#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000.000000000015, -1.1102230246251565e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500.00000000000006, 499.99999999999994, 499.99999999999994)
                double3 target = (0, 0, 0)
            }
            dictionary Right = {
                double3 position = (0, -50000, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        string lightspeed_game_name = "Portal_1_TREX"
        string lightspeed_layer_type = "replacement"
        string remix_replacement_status = "Release Ready"
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            int "rtx:hydra:curves:splits" = 2
            double "rtx:hydra:points:defaultWidth" = 1
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    metersPerUnit = 0.01
    upAxis = "Z"
)

over "RootNode"
{
    over "Camera"
    {
        custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -1148.7331652567711)
        float3 xformOp:rotateXYZ = (51.877254, 0.000037718302, -6.3825345)
        float3 xformOp:scale = (0.99997497, 0.99996805, 1.0000205)
        double3 xformOp:translate = (-109.073, 411.363, 962.962)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    over "Looks"
    {
        token visibility = "invisible"

        def Material "mat_5EC61BC800744B26" (
            references = None
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_5EC61BC800744B26/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_5EC61BC800744B26/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_5EC61BC800744B26/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Portal.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Portal"
                float inputs:emissive_intensity = 30 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/Portal1024Orange_03.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:portal_index = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Portal Index"
                    doc = "Which portal this represents"
                    hidden = false
                )
                float inputs:rotation_speed = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 10
                            float min = -10
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Rotation Speed"
                    doc = "Speed this rotates at"
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Columns"
                    doc = "Number of columns the emissive map is divided into"
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 20 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet FPS"
                    doc = "Frames Per Second if the emissive map is a spritesheet"
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Rows"
                    doc = "Number of row the emissive map is divided into"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "mat_DFDACB6DE1C7741E" (
            references = None
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_DFDACB6DE1C7741E/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_DFDACB6DE1C7741E/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_DFDACB6DE1C7741E/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Portal.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Portal"
                float inputs:emissive_intensity = 30 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/Portal1024Blue_03.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:portal_index = 1 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Portal Index"
                    doc = "Which portal this represents"
                    hidden = false
                )
                float inputs:rotation_speed = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 10
                            float min = -10
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Rotation Speed"
                    doc = "Speed this rotates at"
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Columns"
                    doc = "Number of columns the emissive map is divided into"
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 20 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet FPS"
                    doc = "Frames Per Second if the emissive map is a spritesheet"
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Rows"
                    doc = "Number of row the emissive map is divided into"
                    hidden = false
                )
                token outputs:out
            }
        }

        over "mat_DC141E06214CCBA9" (
            references = @./SubUSDs/mat_DC141E06214CCBA9.usd@</Looks/mat_DC141E06214CCBA9>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A670E74D90303C95" (
            references = @./SubUSDs/mat_A670E74D90303C95.usd@</Looks/mat_A670E74D90303C95>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0647BA4DADD8759D" (
            references = @./SubUSDs/mat_0647BA4DADD8759D.usd@</Looks/mat_0647BA4DADD8759D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_340A3BB8F7DBDA8E" (
            references = @./SubUSDs/mat_340A3BB8F7DBDA8E.usd@</Looks/mat_340A3BB8F7DBDA8E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9CDB1E8343B9F96B" (
            references = @./SubUSDs/mat_9CDB1E8343B9F96B.usd@</Looks/mat_9CDB1E8343B9F96B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_427223DBAC08AC47" (
            references = @./SubUSDs/mat_427223DBAC08AC47.usd@</Looks/mat_427223DBAC08AC47>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Ceiling_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Ceiling_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Ceiling_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_AFDDE458B3491764" (
            references = @./SubUSDs/mat_AFDDE458B3491764.usd@</Looks/mat_AFDDE458B3491764>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/AFDDE458B3491764_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/AFDDE458B3491764_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/AFDDE458B3491764_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_EA75BE4A815BF72F" (
            references = @./SubUSDs/mat_EA75BE4A815BF72F.usd@</Looks/mat_EA75BE4A815BF72F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_MetalCorner_Triangle_01_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_MetalCorner_Triangle_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_MetalCorner_Triangle_01_roughness.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3302EB28DAFA01EC" (
            references = @./SubUSDs/mat_3302EB28DAFA01EC.usd@</Looks/mat_3302EB28DAFA01EC>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/3302EB28DAFA01EC_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 15 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/3302EB28DAFA01EC_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/3302EB28DAFA01EC_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/3302EB28DAFA01EC_normal_OTH.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/3302EB28DAFA01EC_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4578380030BD835D" (
            references = @./SubUSDs/mat_4578380030BD835D.usd@</Looks/mat_4578380030BD835D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/4578380030BD835D_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 60 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/4578380030BD835D_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/4578380030BD835D_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/4578380030BD835D_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/4578380030BD835D_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_6152E01AB53CA990" (
            references = @./SubUSDs/mat_6152E01AB53CA990.usd@</Looks/mat_6152E01AB53CA990>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/6152E01AB53CA990_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/6152E01AB53CA990_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/6152E01AB53CA990_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/6152E01AB53CA990_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/6152E01AB53CA990_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B165C5DFF881D703" (
            references = @./SubUSDs/mat_B165C5DFF881D703.usd@</Looks/mat_B165C5DFF881D703>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/6152E01AB53CA990_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/6152E01AB53CA990_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/6152E01AB53CA990_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/6152E01AB53CA990_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/6152E01AB53CA990_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_04ABCF21EDF93FF0" (
            references = @./SubUSDs/mat_04ABCF21EDF93FF0.usd@</Looks/mat_04ABCF21EDF93FF0>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/04ABCF21EDF93FF0_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/04ABCF21EDF93FF0_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/04ABCF21EDF93FF0_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/04ABCF21EDF93FF0_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/04ABCF21EDF93FF0_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_21288940C8633A55" (
            references = @./SubUSDs/mat_21288940C8633A55.usd@</Looks/mat_21288940C8633A55>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.8745098, 0.8235294, 0.74509805) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/21288940C8633A55_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/21288940C8633A55_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/21288940C8633A55_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_5080198AF493C565" (
            references = @./SubUSDs/mat_5080198AF493C565.usd@</Looks/mat_5080198AF493C565>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_cleanl_Red_EmissiveEdge.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_normal_OTH.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_BC868CE5A075ABB1" (
            references = @./SubUSDs/mat_BC868CE5A075ABB1.usd@</Looks/mat_BC868CE5A075ABB1>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_normal.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B6B5D6EE38B1FDE7" (
            references = @./SubUSDs/mat_B6B5D6EE38B1FDE7.usd@</Looks/mat_B6B5D6EE38B1FDE7>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/B6B5D6EE38B1FDE7_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/B6B5D6EE38B1FDE7_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/B6B5D6EE38B1FDE7_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_677A7587AE5A7D63" (
            references = @./SubUSDs/mat_677A7587AE5A7D63.usd@</Looks/mat_677A7587AE5A7D63>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/677A7587AE5A7D63_upscaled4x.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 0.33333334, 0.15686275) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 8 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/677A7587AE5A7D63_upscaled4x.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_F2C200238EB9F2BF" (
            references = @./SubUSDs/mat_F2C200238EB9F2BF.usd@</Looks/mat_F2C200238EB9F2BF>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_OberservationRoomConcrete_Painted_w_FloorTrim_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_OberservationRoomConcrete_Painted_w_FloorTrim_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_OberservationRoomConcrete_Painted_w_FloorTrim_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7B8F7E54519D5A25" (
            references = @./SubUSDs/mat_7B8F7E54519D5A25.usd@</Looks/mat_7B8F7E54519D5A25>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ObservationRoomConcrete_Plain_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ObservationRoomConcrete_Plain_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ObservationRoomConcrete_Plain_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_92F9EB0DD449F7DE" (
            references = @./SubUSDs/mat_92F9EB0DD449F7DE.usd@</Looks/mat_92F9EB0DD449F7DE>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_ConcreteCeiling_Plain_Skylight_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 30 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_cleanl_Yellow_EmissiveEdge.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/M_ConcreteCeiling_Plain_Skylight_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_ConcreteCeiling_Plain_Skylight_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_ConcreteCeiling_Plain_Skylight_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E35C29752F6CBE76" (
            references = @./SubUSDs/mat_E35C29752F6CBE76.usd@</Looks/mat_E35C29752F6CBE76>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_ConcreteCeiling_Plain_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::src::p4_readonly::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_ConcreteCeiling_Plain_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_ConcreteCeiling_Plain_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F1BD142E6D6F9733" (
            references = @./SubUSDs/mat_F1BD142E6D6F9733.usd@</Looks/mat_F1BD142E6D6F9733>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.94, 0.89, 0.56) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (0.56, 0.73, 0.94) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 2 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
            }
        }

        over "mat_DD6F50A95286F877" (
            references = @./SubUSDs/mat_DD6F50A95286F877.usd@</Looks/mat_DD6F50A95286F877>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_02_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_02_metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_02_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_02_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9454936A0DEDF88D" (
            references = @./SubUSDs/mat_9454936A0DEDF88D.usd@</Looks/mat_9454936A0DEDF88D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Painted_Metal_Trim_Chipped_Rusty_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/Painted_Metal_Trim_Chipped_Rusty_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Painted_Metal_Trim_Chipped_Rusty_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Painted_Metal_Trim_Chipped_Rusty_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3D52969CA2E8BA90" (
            references = @./SubUSDs/mat_3D52969CA2E8BA90.usd@</Looks/mat_3D52969CA2E8BA90>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_4x4_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_4x4_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_4x4_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_4x4_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_678194D03E2AAE64" (
            references = @./SubUSDs/mat_678194D03E2AAE64.usd@</Looks/mat_678194D03E2AAE64>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_52400B0F8A79DEF1" (
            references = @./SubUSDs/mat_52400B0F8A79DEF1.usd@</Looks/mat_52400B0F8A79DEF1>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_TileFloor_Linoleum_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_TileFloor_Linoleum_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_TileFloor_Linoleum_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        def Material "mat_0E2AD2A655A2DBC8" (
            references = @./SubUSDs/mat_0E2AD2A655A2DBC8.usd@</Looks/mat_0E2AD2A655A2DBC8>
        )
        {
            custom string nickname = "RippleGlass"
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_0E2AD2A655A2DBC8/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_0E2AD2A655A2DBC8/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_0E2AD2A655A2DBC8/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @./SubUSDs/textures/0E2AD2A655A2DBC8.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA7trex_2D2022_2E6_2E34::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:ior_constant = 1.5 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/0E2AD2A655A2DBC8_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 0.99 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                color3f inputs:transmittance_color = (1, 0.9706176, 0.8957529) (
                    customData = {
                        float3 default = (0.97, 0.97, 0.97)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Color"
                    doc = "Expected transmittance after the specified transmittance distance through the volume."
                    hidden = false
                )
                float inputs:transmittance_measurement_distance = 65504 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Measurement Distance"
                    doc = "Distance to match the transmittance through the volume at."
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/C91B319E391276F6_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        def Material "mat_C91B319E391276F6" (
            references = @./SubUSDs/mat_C91B319E391276F6.usd@</Looks/mat_C91B319E391276F6>
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_C91B319E391276F6/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_C91B319E391276F6/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_C91B319E391276F6/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @./SubUSDs/textures/C91B319E391276F6.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA7trex_2D2022_2E6_2E34::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:ior_constant = 1.2 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/C91B319E391276F6_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 0.45999998 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                color3f inputs:transmittance_color = (0.969112, 0.9633659, 0.94666153) (
                    customData = {
                        float3 default = (0.97, 0.97, 0.97)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Color"
                    doc = "Expected transmittance after the specified transmittance distance through the volume."
                    hidden = false
                )
                float inputs:transmittance_measurement_distance = 800 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Measurement Distance"
                    doc = "Distance to match the transmittance through the volume at."
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/C91B319E391276F6_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_0CC499CD27021834" (
            references = @./SubUSDs/mat_0CC499CD27021834.usd@</Looks/mat_0CC499CD27021834>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/0CC499CD27021834_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 7 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/0CC499CD27021834_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/0CC499CD27021834_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/0CC499CD27021834_normal_OTH.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/0CC499CD27021834_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C0F058D6F21673F5" (
            references = @./SubUSDs/mat_C0F058D6F21673F5.usd@</Looks/mat_C0F058D6F21673F5>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/C0F058D6F21673F5_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 7 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/C0F058D6F21673F5_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/C0F058D6F21673F5_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/C0F058D6F21673F5_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/C0F058D6F21673F5_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        def Material "mat_5D61EB6874B9ADC6" (
            references = @./SubUSDs/mat_5D61EB6874B9ADC6.usd@</Looks/mat_5D61EB6874B9ADC6>
        )
        {
            custom string nickname = "Glass Stripes"
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_5D61EB6874B9ADC6/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_5D61EB6874B9ADC6/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_5D61EB6874B9ADC6/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @./SubUSDs/textures/5D61EB6874B9ADC6.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA7trex_2D2022_2E6_2E34::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:ior_constant = 1.2 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/C91B319E391276F6_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 0.96999997 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                float inputs:transmittance_measurement_distance = 800 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Measurement Distance"
                    doc = "Distance to match the transmittance through the volume at."
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/C91B319E391276F6_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_BF4A991E91E17B81" (
            references = @./SubUSDs/mat_BF4A991E91E17B81.usd@</Looks/mat_BF4A991E91E17B81>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.992278, 0.992268, 0.992268) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Checker_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9AEAD57B145908C5" (
            references = @./SubUSDs/mat_9AEAD57B145908C5.usd@</Looks/mat_9AEAD57B145908C5>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/9AEAD57B145908C5_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 250 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/9AEAD57B145908C5_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_00D2EE9BA855B235" (
            references = @./SubUSDs/mat_00D2EE9BA855B235.usd@</Looks/mat_00D2EE9BA855B235>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/00D2EE9BA855B235_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/00D2EE9BA855B235_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/00D2EE9BA855B235_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/00D2EE9BA855B235_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/00D2EE9BA855B235_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_50341B4AB9FAC529" (
            references = @./SubUSDs/mat_50341B4AB9FAC529.usd@</Looks/mat_50341B4AB9FAC529>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/00D2EE9BA855B235_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/00D2EE9BA855B235_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/00D2EE9BA855B235_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/00D2EE9BA855B235_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/00D2EE9BA855B235_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_173A44CD64A8FB65" (
            references = @./SubUSDs/mat_173A44CD64A8FB65.usd@</Looks/mat_173A44CD64A8FB65>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Metal_Grate_Plain_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Metal_Grate_Plain_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Metal_Grate_Plain_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Metal_Grate_Plain_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A1E134F2627E2D88" (
            references = @./SubUSDs/mat_A1E134F2627E2D88.usd@</Looks/mat_A1E134F2627E2D88>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Metal_Grate_Circle_Hole_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Metal_Grate_Circle_Hole_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Metal_Grate_Circle_Hole_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Metal_Grate_Circle_Hole_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E62FFFBD1A0386A9" (
            references = @./SubUSDs/mat_E62FFFBD1A0386A9.usd@</Looks/mat_E62FFFBD1A0386A9>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_2x2_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_2x2_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_2x2_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_2x2_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_09D289E27C013FFB" (
            references = @./SubUSDs/mat_09D289E27C013FFB.usd@</Looks/mat_09D289E27C013FFB>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_1x1_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_1x1_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_1x1_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_P1_MetalWallPanel_1x1_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FEAA938DECD4EA76" (
            references = @./SubUSDs/mat_FEAA938DECD4EA76.usd@</Looks/mat_FEAA938DECD4EA76>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.8745098, 0.8235294, 0.74509805) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/21288940C8633A55_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_PistonReplace_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FE377991154A0A67" (
            references = @./SubUSDs/mat_FE377991154A0A67.usd@</Looks/mat_FE377991154A0A67>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Circles_and_Seam_Trim_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Circles_and_Seam_Trim_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Circles_and_Seam_Trim_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Circles_and_Seam_Trim_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Circles_and_Seam_Trim_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9B6FAB72A4FA0A43" (
            references = @./SubUSDs/mat_9B6FAB72A4FA0A43.usd@</Looks/mat_9B6FAB72A4FA0A43>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Dots_1.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Dots_1.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_72C8E1B4EBA1A417" (
            references = @./SubUSDs/mat_72C8E1B4EBA1A417.usd@</Looks/mat_72C8E1B4EBA1A417>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Dots_2.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Dots_2.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_B113B63AD72AAB21" (
            references = @./SubUSDs/mat_B113B63AD72AAB21.usd@</Looks/mat_B113B63AD72AAB21>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Catcher.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Catcher.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_292E141BE464EC44" (
            references = @./SubUSDs/mat_292E141BE464EC44.usd@</Looks/mat_292E141BE464EC44>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FDC2056CEB712D8A" (
            references = @./SubUSDs/mat_FDC2056CEB712D8A.usd@</Looks/mat_FDC2056CEB712D8A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_PlasmaHit.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_PlasmaHit.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_314CF155433D7B62" (
            references = @./SubUSDs/mat_314CF155433D7B62.usd@</Looks/mat_314CF155433D7B62>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/314CF155433D7B62_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/314CF155433D7B62_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/314CF155433D7B62_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/314CF155433D7B62_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D76048E6436AA1A0" (
            references = @./SubUSDs/mat_D76048E6436AA1A0.usd@</Looks/mat_D76048E6436AA1A0>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/D76048E6436AA1A0_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/D76048E6436AA1A0_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/D76048E6436AA1A0_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/D76048E6436AA1A0_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/D76048E6436AA1A0_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_08B32EB040E1D078" (
            references = @./SubUSDs/mat_08B32EB040E1D078.usd@</Looks/mat_08B32EB040E1D078>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_6152E01AB53CA990_Yellow_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_6152E01AB53CA990_Yellow_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/6152E01AB53CA990_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/6152E01AB53CA990_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/6152E01AB53CA990_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_04A2EE7E55AD7AC6" (
            references = @./SubUSDs/mat_04A2EE7E55AD7AC6.usd@</Looks/mat_04A2EE7E55AD7AC6>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Waterline_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Waterline_metallic.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Waterline_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Waterline_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_59A8ACE9F018A2BB" (
            references = @./SubUSDs/mat_59A8ACE9F018A2BB.usd@</Looks/mat_59A8ACE9F018A2BB>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/59A8ACE9F018A2BB_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/59A8ACE9F018A2BB_normal_OTH.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/59A8ACE9F018A2BB_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_CC2055ECB25FCCB3" (
            references = @./SubUSDs/mat_CC2055ECB25FCCB3.usd@</Looks/mat_CC2055ECB25FCCB3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/CC2055ECB25FCCB3_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/CC2055ECB25FCCB3_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/CC2055ECB25FCCB3_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8C94B4B9A0AB54AC" (
            references = @./SubUSDs/mat_8C94B4B9A0AB54AC.usd@</Looks/mat_8C94B4B9A0AB54AC>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 35 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_cleanl_Red_EmissiveEdge.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7F350A5EB6F6A7C7" (
            references = @./SubUSDs/mat_7F350A5EB6F6A7C7.usd@</Looks/mat_7F350A5EB6F6A7C7>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/7F350A5EB6F6A7C7_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/7F350A5EB6F6A7C7_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/7F350A5EB6F6A7C7_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8BDD20506FFB1F9A" (
            references = @./SubUSDs/mat_8BDD20506FFB1F9A.usd@</Looks/mat_8BDD20506FFB1F9A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F328A27CBF13C68B" (
            references = @./SubUSDs/mat_F328A27CBF13C68B.usd@</Looks/mat_F328A27CBF13C68B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0827A657BE5F0646" (
            references = @./SubUSDs/mat_0827A657BE5F0646.usd@</Looks/mat_0827A657BE5F0646>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Top_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Top_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Top_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_80DF90C072702C3F" (
            references = @./SubUSDs/mat_80DF90C072702C3F.usd@</Looks/mat_80DF90C072702C3F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Clean_baseColor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8D1946B4993CE5A3" (
            references = @./SubUSDs/mat_8D1946B4993CE5A3.usd@</Looks/mat_8D1946B4993CE5A3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Bot_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Bot_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Bot_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_036872ED78AB1D8C" (
            references = @./SubUSDs/mat_036872ED78AB1D8C.usd@</Looks/mat_036872ED78AB1D8C>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0F618DC4BD0BA5D5" (
            references = @./SubUSDs/mat_0F618DC4BD0BA5D5.usd@</Looks/mat_0F618DC4BD0BA5D5>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/0F618DC4BD0BA5D5_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/0F618DC4BD0BA5D5_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/0F618DC4BD0BA5D5_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_16B5B90390130475" (
            references = @./SubUSDs/mat_16B5B90390130475.usd@</Looks/mat_16B5B90390130475>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_05_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_05_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_05_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_05_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E0062D64AC9BAC08" (
            references = @./SubUSDs/mat_E0062D64AC9BAC08.usd@</Looks/mat_E0062D64AC9BAC08>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/E0062D64AC9BAC08_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/E0062D64AC9BAC08_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/E0062D64AC9BAC08_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3E556F9BE54AFFED" (
            references = @./SubUSDs/mat_3E556F9BE54AFFED.usd@</Looks/mat_3E556F9BE54AFFED>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteWall_Poured_BotGrunge_Wet_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteWall_Poured_BotGrunge_Wet_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteWall_Poured_BotGrunge_Wet_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_03AC7F65A1797335" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (1, 0.99999, 0.99999) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA4trex_2D2022_2E6_2E31::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.93 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E83D04C31FE08619" (
            references = @./SubUSDs/mat_E83D04C31FE08619.usd@</Looks/mat_E83D04C31FE08619>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/E83D04C31FE08619_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/E83D04C31FE08619_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/E83D04C31FE08619_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/E83D04C31FE08619_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_390FF3CED00F9251" (
            references = @./SubUSDs/mat_390FF3CED00F9251.usd@</Looks/mat_390FF3CED00F9251>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/390FF3CED00F9251_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/390FF3CED00F9251_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/390FF3CED00F9251_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_44824009F755A42C" (
            references = @./SubUSDs/mat_44824009F755A42C.usd@</Looks/mat_44824009F755A42C>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_Fan_01_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_Fan_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_Fan_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F03D3C7DE41905BC" (
            references = @./SubUSDs/mat_F03D3C7DE41905BC.usd@</Looks/mat_F03D3C7DE41905BC>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_ConcreteFloor_Grungy_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_ConcreteFloor_Grungy_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_ConcreteFloor_Grungy_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4DF396D47A0A5851" (
            references = @./SubUSDs/mat_4DF396D47A0A5851.usd@</Looks/mat_4DF396D47A0A5851>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_MudGrate_4DF396D47A0A5851_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Decal_MudGrate_4DF396D47A0A5851_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_MudGrate_4DF396D47A0A5851_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_MudGrate_4DF396D47A0A5851_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7EC676E61D1FE50A" (
            references = @./SubUSDs/mat_7EC676E61D1FE50A.usd@</Looks/mat_7EC676E61D1FE50A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/7EC676E61D1FE50A.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_747128EC53DC0F67" (
            references = @./SubUSDs/mat_747128EC53DC0F67.usd@</Looks/mat_747128EC53DC0F67>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/747128EC53DC0F67_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/747128EC53DC0F67_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/747128EC53DC0F67_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9FF98384F1F407E1" (
            references = @./SubUSDs/mat_9FF98384F1F407E1.usd@</Looks/mat_9FF98384F1F407E1>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/9FF98384F1F407E1_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/9FF98384F1F407E1_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/9FF98384F1F407E1_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/9FF98384F1F407E1_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_86B4CF77EC4FB3DA" (
            references = @./SubUSDs/mat_86B4CF77EC4FB3DA.usd@</Looks/mat_86B4CF77EC4FB3DA>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/86B4CF77EC4FB3DA_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/86B4CF77EC4FB3DA_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/86B4CF77EC4FB3DA_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_6865E88385630C61" (
            references = @./SubUSDs/mat_6865E88385630C61.usd@</Looks/mat_6865E88385630C61>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/6865E88385630C61_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/6865E88385630C61_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/6865E88385630C61_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7E9615C19FAD03B0" (
            references = @./SubUSDs/mat_7E9615C19FAD03B0.usd@</Looks/mat_7E9615C19FAD03B0>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_6152E01AB53CA990_Yellow_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_6152E01AB53CA990_Yellow_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/6152E01AB53CA990_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/6152E01AB53CA990_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/6152E01AB53CA990_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_021AFF2F8FE2A7F6" (
            references = @./SubUSDs/mat_021AFF2F8FE2A7F6.usd@</Looks/mat_021AFF2F8FE2A7F6>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/021AFF2F8FE2A7F6_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/021AFF2F8FE2A7F6_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/021AFF2F8FE2A7F6_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/021AFF2F8FE2A7F6_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8BFD1E9F9436E323" (
            references = @./SubUSDs/mat_8BFD1E9F9436E323.usd@</Looks/mat_8BFD1E9F9436E323>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Dots_3.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Dots_3.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_4DC7121ED2FD9FA2" (
            references = @./SubUSDs/mat_4DC7121ED2FD9FA2.usd@</Looks/mat_4DC7121ED2FD9FA2>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Dots_4.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 2 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Dots_4.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_00A5558BDAF4B61B" (
            references = @./SubUSDs/mat_00A5558BDAF4B61B.usd@</Looks/mat_00A5558BDAF4B61B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/314CF155433D7B62_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/314CF155433D7B62_emissive_1.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/314CF155433D7B62_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/314CF155433D7B62_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/314CF155433D7B62_roughness_1.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        def Material "mat_77B4DD7E0B21896A" (
            references = @./SubUSDs/mat_77B4DD7E0B21896A.usd@</Looks/mat_77B4DD7E0B21896A>
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_77B4DD7E0B21896A/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_77B4DD7E0B21896A/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_77B4DD7E0B21896A/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @./SubUSDs/textures/77B4DD7E0B21896A.dds@
                float inputs:ior_constant = 2 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                float inputs:transmittance_measurement_distance = 1000 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Measurement Distance"
                    doc = "Distance to match the transmittance through the volume at."
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/T_GlassTube_Glass_Milk_Double.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_57A95AAFF81D137B" (
            references = @./SubUSDs/mat_57A95AAFF81D137B.usd@</Looks/mat_57A95AAFF81D137B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_PaintedMetal_White_03_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_PaintedMetal_White_03_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_PaintedMetal_White_03_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4E6B06B533B4430F" (
            references = @./SubUSDs/mat_4E6B06B533B4430F.usd@</Looks/mat_4E6B06B533B4430F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Base_color_1.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Metallic_1.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Normal_1_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Roughness_1.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A3CFD7FC7DB8FDC1" (
            references = @./SubUSDs/mat_A3CFD7FC7DB8FDC1.usd@</Looks/mat_A3CFD7FC7DB8FDC1>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Elevator_Frame_Base_color.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_Elevator_Frame_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Elevator_Frame_Metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Elevator_Frame_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Elevator_Frame_Roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_5AFE4587EC99F681" (
            references = @./SubUSDs/mat_5AFE4587EC99F681.usd@</Looks/mat_5AFE4587EC99F681>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Elevator_Exterior_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_Elevator_Exterior_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Elevator_Exterior_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Elevator_Exterior_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Elevator_Exterior_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_68FE894249F4AEDE" (
            references = @./SubUSDs/mat_68FE894249F4AEDE.usd@</Looks/mat_68FE894249F4AEDE>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B4309355E9E2DBCD" (
            references = @./SubUSDs/mat_B4309355E9E2DBCD.usd@</Looks/mat_B4309355E9E2DBCD>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Frame_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Frame_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Frame_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_RoundDoor_Frame_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7E5BCF793DCCE757" (
            references = @./SubUSDs/mat_7E5BCF793DCCE757.usd@</Looks/mat_7E5BCF793DCCE757>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_M_Fixture_PlasmaBall_Catcher_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_M_Fixture_PlasmaBall_Catcher_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_M_Fixture_PlasmaBall_Catcher_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_M_Fixture_PlasmaBall_Catcher_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_M_Fixture_PlasmaBall_Catcher_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9C79454B82E16B10" (
            references = @./SubUSDs/mat_9C79454B82E16B10.usd@</Looks/mat_9C79454B82E16B10>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_PlasmaBall_Launcher_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_PlasmaBall_Launcher_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_PlasmaBall_Launcher_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_PlasmaBall_Launcher_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_PlasmaBall_Launcher_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_181D6F5CBEFA7835" (
            references = @./SubUSDs/mat_181D6F5CBEFA7835.usd@</Looks/mat_181D6F5CBEFA7835>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_02_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_02_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_02_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/M_MetalTreadPlate_Rusty_02_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A4D0F9B44CA3A15D" (
            references = @./SubUSDs/mat_A4D0F9B44CA3A15D.usd@</Looks/mat_A4D0F9B44CA3A15D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/A4D0F9B44CA3A15D_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/A4D0F9B44CA3A15D_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/A4D0F9B44CA3A15D_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_51338A268B080FE5" (
            references = @./SubUSDs/mat_51338A268B080FE5.usd@</Looks/mat_51338A268B080FE5>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/51338A268B080FE5.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
            }
        }

        over "mat_28B6328CAA10842B" (
            references = @./SubUSDs/mat_28B6328CAA10842B.usd@</Looks/mat_28B6328CAA10842B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_04_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_04_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_04_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_04_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8B010C0675622831" (
            references = @./SubUSDs/mat_8B010C0675622831.usd@</Looks/mat_8B010C0675622831>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Charracter_PortalGun_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Charracter_PortalGun_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Charracter_PortalGun_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Charracter_PortalGun_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A163697C43B63458" (
            references = @./SubUSDs/mat_A163697C43B63458.usd@</Looks/mat_A163697C43B63458>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Red_01_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Red_01_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Red_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Red_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Red_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_78D1E223F7650271" (
            references = @./SubUSDs/mat_78D1E223F7650271.usd@</Looks/mat_78D1E223F7650271>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Blue_02_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Blue_02_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Blue_02_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Blue_02_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Blue_02_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_2D3D48F99B81CC02" (
            references = @./SubUSDs/mat_2D3D48F99B81CC02.usd@</Looks/mat_2D3D48F99B81CC02>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Purple_01_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Purple_01_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Purple_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Purple_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Purple_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_14AC03DBF4ED4B3B" (
            references = @./SubUSDs/mat_14AC03DBF4ED4B3B.usd@</Looks/mat_14AC03DBF4ED4B3B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Orange_01_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Orange_01_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Orange_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Orange_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SK_Character_Personality_Sphere_Orange_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_56C3F52EC1ED7E3F" (
            references = @./SubUSDs/mat_56C3F52EC1ED7E3F.usd@</Looks/mat_56C3F52EC1ED7E3F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        def Material "mat_31AD0886DF36A2DB" (
            references = @./SubUSDs/mat_31AD0886DF36A2DB.usd@</Looks/mat_31AD0886DF36A2DB>
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_31AD0886DF36A2DB/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_31AD0886DF36A2DB/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_31AD0886DF36A2DB/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @./SubUSDs/textures/31AD0886DF36A2DB.dds@
                float inputs:ior_constant = 1.5 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
            }
        }

        over "mat_8BB470838EA0A2D3" (
            references = @./SubUSDs/mat_8BB470838EA0A2D3.usd@</Looks/mat_8BB470838EA0A2D3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_CameraBot_D_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_CameraBot_D_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_CameraBot_D_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_CameraBot_D_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_CameraBot_D_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_522E5513DB9638B6" (
            references = @./SubUSDs/mat_522E5513DB9638B6.usd@</Looks/mat_522E5513DB9638B6>
        )
        {
            over "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                color3f inputs:diffuse_color_constant = (1, 0.99999, 0.99999) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Water_Toxic_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 0.05 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Water_Toxic_basecolor.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_thin_film = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA8trex_2D2022_2E6_2E26::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Water_Toxic_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Water_Toxic_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Water_Toxic_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                float inputs:thin_film_thickness_constant = 10 (
                    customData = {
                        float default = 200
                        dictionary range = {
                            float max = 1500
                            float min = 0.001
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film constant thickness in nm"
                    doc = "Thickness of the thin film if not specified in albedo texture"
                    hidden = false
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = "Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case."
                    hidden = false
                )
            }
        }

        over "mat_155789C91780FBB4" (
            references = @./SubUSDs/mat_155789C91780FBB4.usd@</Looks/mat_155789C91780FBB4>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_PlatformBeam_Emitter_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_PlatformBeam_Emitter_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_PlatformBeam_Emitter_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_PlatformBeam_Emitter_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_PlatformBeam_Emitter_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        def Material "mat_3F9244D427F37AD6" (
            references = @./SubUSDs/mat_3F9244D427F37AD6.usd@</Looks/mat_3F9244D427F37AD6>
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_3F9244D427F37AD6/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_3F9244D427F37AD6/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_3F9244D427F37AD6/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @./SubUSDs/textures/3F9244D427F37AD6.dds@
                float inputs:ior_constant = 1.5 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
            }
        }

        over "mat_DF3FEAB773AA5F61" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Disk_03_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_11A2137E9439862F" (
            references = @./SubUSDs/mat_11A2137E9439862F.usd@</Looks/mat_11A2137E9439862F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Disk_01_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F4741AFEF0FF9A05" (
            references = @./SubUSDs/mat_F4741AFEF0FF9A05.usd@</Looks/mat_F4741AFEF0FF9A05>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Disk_04_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E67151D1996FF91D" (
            references = @./SubUSDs/mat_E67151D1996FF91D.usd@</Looks/mat_E67151D1996FF91D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Disk_02_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_E_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D47E1967DE239247" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Glados_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Glados_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA4trex_2D2022_2E6_2E31::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Glados_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Glados_NormalDX_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Glados_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8AF4E9544F7DE726" (
            references = @./SubUSDs/mat_8AF4E9544F7DE726.usd@</Looks/mat_8AF4E9544F7DE726>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Concrete_Ceiling_Skylight_01_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Concrete_Ceiling_Skylight_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Concrete_Ceiling_Skylight_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Concrete_Ceiling_Skylight_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_222CB4ED1E50C7C2" (
            references = @./SubUSDs/mat_222CB4ED1E50C7C2.usd@</Looks/mat_222CB4ED1E50C7C2>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_5BB1BB31BE7E7838" (
            references = @./SubUSDs/mat_5BB1BB31BE7E7838.usd@</Looks/mat_5BB1BB31BE7E7838>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalGrate02_5BB1BB31BE7E7838_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalGrate02_5BB1BB31BE7E7838_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalGrate02_5BB1BB31BE7E7838_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalGrate02_5BB1BB31BE7E7838_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C59E33545E38E386" (
            references = @./SubUSDs/mat_C59E33545E38E386.usd@</Looks/mat_C59E33545E38E386>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_Wires_HeavyRust_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_48289B753ADFF225" (
            references = @./SubUSDs/mat_48289B753ADFF225.usd@</Looks/mat_48289B753ADFF225>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_IdustrialDoor_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 30 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_IdustrialDoor_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_IdustrialDoor_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_IdustrialDoor_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_IdustrialDoor_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C3E634AC9CDB218D" (
            references = @./SubUSDs/mat_C3E634AC9CDB218D.usd@</Looks/mat_C3E634AC9CDB218D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_inactive_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Normal_dx_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_TripodBot_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D47BB03AFB644D8F" (
            references = @./SubUSDs/mat_D47BB03AFB644D8F.usd@</Looks/mat_D47BB03AFB644D8F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Prop_GrabberBase_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Prop_GrabberBase_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Prop_GrabberBase_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Prop_GrabberBase_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_AF22C86E7BD0058E" (
            references = @./SubUSDs/mat_AF22C86E7BD0058E.usd@</Looks/mat_AF22C86E7BD0058E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_RocketBot_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_RocketBot_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_RocketBot_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_2A1327544ADCE293" (
            references = @./SubUSDs/mat_2A1327544ADCE293.usd@</Looks/mat_2A1327544ADCE293>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Top_and_Bot_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Top_and_Bot_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Staned_Top_and_Bot_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FF2A84F8927F54C3" (
            references = @./SubUSDs/mat_FF2A84F8927F54C3.usd@</Looks/mat_FF2A84F8927F54C3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Grunge_01_baseColor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Grunge_02_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonPanels_Grunge_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_69DEF24F747A60D9" (
            references = @./SubUSDs/mat_69DEF24F747A60D9.usd@</Looks/mat_69DEF24F747A60D9>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_a_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_a_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D961A082435E4F5D" (
            references = @./SubUSDs/mat_D961A082435E4F5D.usd@</Looks/mat_D961A082435E4F5D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_BlastDoor_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_409D72D620C71327" (
            references = @./SubUSDs/mat_409D72D620C71327.usd@</Looks/mat_409D72D620C71327>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_b_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_b_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_b_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8A921D07E82F4277" (
            references = @./SubUSDs/mat_8A921D07E82F4277.usd@</Looks/mat_8A921D07E82F4277>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_c_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_c_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SK_Character_RocketSentry_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E1BFBBFAE675A34F" (
            references = @./SubUSDs/mat_E1BFBBFAE675A34F.usd@</Looks/mat_E1BFBBFAE675A34F>
        )
        {
            custom string nickname = "GladosScreen"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/E1BFBBFAE675A34F.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/E1BFBBFAE675A34F.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_C8C89F4E9382B1B4" (
            active = false
            references = @./SubUSDs/mat_C8C89F4E9382B1B4.usd@</Looks/mat_C8C89F4E9382B1B4>
        )
        {
            custom string nickname = "GladosScreen2"

            over "Shader"
            {
                asset inputs:diffuse_texture (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/C8C89F4E9382B1B4.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_3C3C697C45102542" (
            references = @./SubUSDs/mat_3C3C697C45102542.usd@</Looks/mat_3C3C697C45102542>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_LeapLaunch.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_LeapLaunch.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_709D4DD45506EBB3" (
            references = @./SubUSDs/mat_709D4DD45506EBB3.usd@</Looks/mat_709D4DD45506EBB3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Leap.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Leap.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_43C60300DF8D312D" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 120 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Furniture_Monitor_Screen_Sprite_8x11.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Columns"
                    doc = "Number of columns the emissive map is divided into"
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 12 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet FPS"
                    doc = "Frames Per Second if the emissive map is a spritesheet"
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Rows"
                    doc = "Number of row the emissive map is divided into"
                    hidden = false
                )
            }
        }

        over "mat_5A00A371A6E23DB2" (
            references = @./SubUSDs/mat_5A00A371A6E23DB2.usd@</Looks/mat_5A00A371A6E23DB2>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/5A00A371A6E23DB2.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_B083919453C2C250" (
            references = @./SubUSDs/mat_B083919453C2C250.usd@</Looks/mat_B083919453C2C250>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_HeadKnock.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_HeadKnock.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_218B743C71013CD6" (
            references = @./SubUSDs/mat_218B743C71013CD6.usd@</Looks/mat_218B743C71013CD6>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Dropper.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Dropper.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_12AE45666AA775E0" (
            references = @./SubUSDs/mat_12AE45666AA775E0.usd@</Looks/mat_12AE45666AA775E0>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_NoDrink.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_NoDrink.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_019DEDFF1C9EE984" (
            references = @./SubUSDs/mat_019DEDFF1C9EE984.usd@</Looks/mat_019DEDFF1C9EE984>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Drown.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Drown.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_A5AB60494E737F2B" (
            references = @./SubUSDs/mat_A5AB60494E737F2B.usd@</Looks/mat_A5AB60494E737F2B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/A5AB60494E737F2B.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
            }
        }

        over "mat_6633266F935E5BFD" (
            references = @./SubUSDs/mat_6633266F935E5BFD.usd@</Looks/mat_6633266F935E5BFD>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_CubeDropperArms_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_EC997E9AC116F8A3" (
            references = @./SubUSDs/mat_EC997E9AC116F8A3.usd@</Looks/mat_EC997E9AC116F8A3>
        )
        {
            over "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @./SubUSDs/textures/EC997E9AC116F8A3.dds@
                float inputs:ior_constant = 1.5 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
            }
        }

        over "mat_231F02EE918EB475" (
            references = @./SubUSDs/mat_231F02EE918EB475.usd@</Looks/mat_231F02EE918EB475>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_TileFloor_Linoleum_Tan_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_TileFloor_Linoleum_Tan_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_TileFloor_Linoleum_Tan_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C768EA40A32AB487" (
            references = @./SubUSDs/mat_C768EA40A32AB487.usd@</Looks/mat_C768EA40A32AB487>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/C768EA40A32AB487_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/C768EA40A32AB487_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/C768EA40A32AB487_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/C768EA40A32AB487_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B1BA8E0867AEF6F0" (
            references = @./SubUSDs/mat_B1BA8E0867AEF6F0.usd@</Looks/mat_B1BA8E0867AEF6F0>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Turret.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Turret.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_9DF1A2484CBDFBB8" (
            references = @./SubUSDs/mat_9DF1A2484CBDFBB8.usd@</Looks/mat_9DF1A2484CBDFBB8>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_CompanionBroken.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_CompanionBroken.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_230BD59E6AD19F2A" (
            references = @./SubUSDs/mat_230BD59E6AD19F2A.usd@</Looks/mat_230BD59E6AD19F2A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Incinerator.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Incinerator.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_E3560211103508A7" (
            references = @./SubUSDs/mat_E3560211103508A7.usd@</Looks/mat_E3560211103508A7>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Cake.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Cake.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_BAEF2E2A1F673E05" (
            references = @./SubUSDs/mat_BAEF2E2A1F673E05.usd@</Looks/mat_BAEF2E2A1F673E05>
        )
        {
            over "Shader"
            {
                uniform bool enable_opacity = 1
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Metal_Stair_Mesh_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Metal_Stair_Mesh_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Metal_Stair_Mesh_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Used when no albedo/opacity texture is specified. 0 for completely transparent, 1 for completly opaque."
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Metal_Stair_Mesh_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8D0AACAE9911101A" (
            references = @./SubUSDs/mat_8D0AACAE9911101A.usd@</Looks/mat_8D0AACAE9911101A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_RedText03_8D0AACAE9911101A_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_RedText03_8D0AACAE9911101A_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_RedText03_8D0AACAE9911101A_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_EF607C1AF136DF26" (
            references = @./SubUSDs/mat_EF607C1AF136DF26.usd@</Looks/mat_EF607C1AF136DF26>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_RedText06_EF607C1AF136DF26_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_RedText06_EF607C1AF136DF26_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_RedText06_EF607C1AF136DF26_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8BF93C8FC9F87E24" (
            references = @./SubUSDs/mat_8BF93C8FC9F87E24.usd@</Looks/mat_8BF93C8FC9F87E24>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/8BF93C8FC9F87E24.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_8A43936D50CFED90" (
            references = @./SubUSDs/mat_8A43936D50CFED90.usd@</Looks/mat_8A43936D50CFED90>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/8A43936D50CFED90.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_D51BD114D87C00BD" (
            references = @./SubUSDs/mat_D51BD114D87C00BD.usd@</Looks/mat_D51BD114D87C00BD>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_DamageScorch01_D51BD114D87C00BD_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_DamageScorch01_D51BD114D87C00BD_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_DamageScorch01_D51BD114D87C00BD_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F116B8E9DA308EE8" (
            references = @./SubUSDs/mat_F116B8E9DA308EE8.usd@</Looks/mat_F116B8E9DA308EE8>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_TripodBot_Laser_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_TripodBot_Laser_Albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
            }
        }

        over "mat_FBF1F662D1232979" (
            references = @./SubUSDs/mat_FBF1F662D1232979.usd@</Looks/mat_FBF1F662D1232979>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_FBF1F662D1232979_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_FBF1F662D1232979_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.9 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_FBF1F662D1232979_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C41860E9CD66844C" (
            references = @./SubUSDs/mat_C41860E9CD66844C.usd@</Looks/mat_C41860E9CD66844C>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Text_Ratman_C41860E9CD66844C_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Text_Ratman_C41860E9CD66844C_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.9 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Text_Ratman_C41860E9CD66844C_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B798B753E4B43330" (
            references = @./SubUSDs/mat_B798B753E4B43330.usd@</Looks/mat_B798B753E4B43330>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_B798B753E4B43330_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_B798B753E4B43330_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.9 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_B798B753E4B43330_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4F33C5B2342FA20B" (
            references = @./SubUSDs/mat_4F33C5B2342FA20B.usd@</Looks/mat_4F33C5B2342FA20B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_RedText02_4F33C5B2342FA20B_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_RedText02_4F33C5B2342FA20B_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.9 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_RedText02_4F33C5B2342FA20B_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_90B63328CD155524" (
            references = @./SubUSDs/mat_90B63328CD155524.usd@</Looks/mat_90B63328CD155524>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DecaL_Floor_Grunge_01_90B63328CD155524_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DecaL_Floor_Grunge_01_90B63328CD155524_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DecaL_Floor_Grunge_01_90B63328CD155524_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3DB98F1B93F4679A" (
            references = @./SubUSDs/mat_3DB98F1B93F4679A.usd@</Looks/mat_3DB98F1B93F4679A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_013DB98F1B93F4679A_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_013DB98F1B93F4679A_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.9 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_013DB98F1B93F4679A_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D466A216C1A295DA" (
            references = @./SubUSDs/mat_D466A216C1A295DA.usd@</Looks/mat_D466A216C1A295DA>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/D466A216C1A295DA_upscaled4x.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.8 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_2DBF6CC9A5652816" (
            references = @./SubUSDs/mat_2DBF6CC9A5652816.usd@</Looks/mat_2DBF6CC9A5652816>
        )
        {
            custom string nickname = "Decal Leak 02"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak02_2DBF6CC9A5652816_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak02_2DBF6CC9A5652816_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.9 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak02_2DBF6CC9A5652816_rough.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B93C3AF34B6F3980" (
            references = @./SubUSDs/mat_B93C3AF34B6F3980.usd@</Looks/mat_B93C3AF34B6F3980>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_B93C3AF34B6F3980_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_B93C3AF34B6F3980_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.9 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_B93C3AF34B6F3980_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_11FEA52E5EF4FF93" (
            references = @./SubUSDs/mat_11FEA52E5EF4FF93.usd@</Looks/mat_11FEA52E5EF4FF93>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Button_Standing_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_Button_Standing_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Button_Standing_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Button_Standing_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Button_Standing_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7FAF2E3E9B43CBC3" (
            references = @./SubUSDs/mat_7FAF2E3E9B43CBC3.usd@</Looks/mat_7FAF2E3E9B43CBC3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Base_color.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Fixture_Elevator_Interior_Roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D4558864C8B6C793" (
            references = @./SubUSDs/mat_D4558864C8B6C793.usd@</Looks/mat_D4558864C8B6C793>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/D4558864C8B6C793.dds@
                float inputs:emissive_intensity = 50000 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_VFX_Rocket_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_86CE3CCBDAF3559F" (
            references = @./SubUSDs/mat_86CE3CCBDAF3559F.usd@</Looks/mat_86CE3CCBDAF3559F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/86CE3CCBDAF3559F.dds@
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_60F5B0BF449D5C5C" (
            references = @./SubUSDs/mat_60F5B0BF449D5C5C.usd@</Looks/mat_60F5B0BF449D5C5C>
        )
        {
            custom string nickname = "Decal Leak 05"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak05_60F5B0BF449D5C5C_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak05_60F5B0BF449D5C5C_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak05_60F5B0BF449D5C5C_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0E0905D9231B2621" (
            references = @./SubUSDs/mat_0E0905D9231B2621.usd@</Looks/mat_0E0905D9231B2621>
        )
        {
            custom string nickname = "Decal Leak 01"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak01_0E0905D9231B2621_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak01_0E0905D9231B2621_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak01_0E0905D9231B2621_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_2F38DA65B73883EE" (
            references = @./SubUSDs/mat_2F38DA65B73883EE.usd@</Looks/mat_2F38DA65B73883EE>
        )
        {
            custom string nickname = "Decal Leak 03"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak03_2F38DA65B73883EE_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak03_2F38DA65B73883EE_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak03_2F38DA65B73883EE_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_53841B078528D4EF" (
            references = @./SubUSDs/mat_53841B078528D4EF.usd@</Looks/mat_53841B078528D4EF>
        )
        {
            custom string nickname = "Decal Leak 06"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak06_53841B078528D4EF_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak06_53841B078528D4EF_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak06_53841B078528D4EF_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B68F559B25BF12AE" (
            references = @./SubUSDs/mat_B68F559B25BF12AE.usd@</Looks/mat_B68F559B25BF12AE>
        )
        {
            custom string nickname = "Decal Leak 07"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak07_B68F559B25BF12AE_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak07_B68F559B25BF12AE_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak07_B68F559B25BF12AE_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_5585E3941BBD8A30" (
            references = @./SubUSDs/mat_5585E3941BBD8A30.usd@</Looks/mat_5585E3941BBD8A30>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_ApertureLabs_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Signage_ApertureLabs_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_2D5AC1ADC56A42FD" (
            references = @./SubUSDs/mat_2D5AC1ADC56A42FD.usd@</Looks/mat_2D5AC1ADC56A42FD>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Chell_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_Chell_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Chell_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Chell_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Chell_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F7E497190B529DB8" (
            references = @./SubUSDs/mat_F7E497190B529DB8.usd@</Looks/mat_F7E497190B529DB8>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/F7E497190B529DB8.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_4E9D342DFAD12947" (
            references = @./SubUSDs/mat_4E9D342DFAD12947.usd@</Looks/mat_4E9D342DFAD12947>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak04_4E9D342DFAD12947_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak04_4E9D342DFAD12947_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak04_4E9D342DFAD12947_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0D21C78830B9B87E" (
            references = @./SubUSDs/mat_0D21C78830B9B87E.usd@</Looks/mat_0D21C78830B9B87E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_0D21C78830B9B87E_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_0D21C78830B9B87E_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_37AF209A1A371D8F" (
            references = @./SubUSDs/mat_37AF209A1A371D8F.usd@</Looks/mat_37AF209A1A371D8F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Ceiling_Grunge_01_37AF209A1A371D8F_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Ceiling_Grunge_01_37AF209A1A371D8F_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FAD5EEA07EE81FCA" (
            references = @./SubUSDs/mat_FAD5EEA07EE81FCA.usd@</Looks/mat_FAD5EEA07EE81FCA>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_FAD5EEA07EE81FCA_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_FAD5EEA07EE81FCA_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_810643D7974355CF" (
            references = @./SubUSDs/mat_810643D7974355CF.usd@</Looks/mat_810643D7974355CF>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_RedText05_810643D7974355CF_albedo.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_RedText05_810643D7974355CF_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_RedText05_810643D7974355CF_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_154097D611AA92D6" (
            references = @./SubUSDs/mat_154097D611AA92D6.usd@</Looks/mat_154097D611AA92D6>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Poster_154097D611AA92D6_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Poster_154097D611AA92D6_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Poster_154097D611AA92D6_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FCF7F7862B76C49F" (
            references = @./SubUSDs/mat_FCF7F7862B76C49F.usd@</Looks/mat_FCF7F7862B76C49F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Poster_FCF7F7862B76C4_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Poster_FCF7F7862B76C4_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Poster_FCF7F7862B76C4_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_ED9A4736E697A97B" (
            references = @./SubUSDs/mat_ED9A4736E697A97B.usd@</Looks/mat_ED9A4736E697A97B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_DamageScorch02_ED9A4736E697A97B_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_DamageScorch01_D51BD114D87C00BD_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_DamageScorch01_D51BD114D87C00BD_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C9603739E8F2686B" (
            references = @./SubUSDs/mat_C9603739E8F2686B.usd@</Looks/mat_C9603739E8F2686B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak09_C9603739E8F2686B_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak09_C9603739E8F2686B_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak09_C9603739E8F2686B_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_1CC7CA1FD5C7CEBC" (
            references = @./SubUSDs/mat_1CC7CA1FD5C7CEBC.usd@</Looks/mat_1CC7CA1FD5C7CEBC>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_RedText01_1CC7CA1FD5C7CEBC_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_RedText01_1CC7CA1FD5C7CEBC_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_RedText01_1CC7CA1FD5C7CEBC_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_077416B246F7EBF9" (
            references = @./SubUSDs/mat_077416B246F7EBF9.usd@</Looks/mat_077416B246F7EBF9>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_RedText04_077416B246F7EBF9_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_RedText04_077416B246F7EBF9_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_RedText04_077416B246F7EBF9_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C045D91DACCA62EB" (
            references = @./SubUSDs/mat_C045D91DACCA62EB.usd@</Looks/mat_C045D91DACCA62EB>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Text_Ratman_C045D91DACCA62EB_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Text_Ratman_C045D91DACCA62EB_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Text_Ratman_C045D91DACCA62EB_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E53AE01AC1FF9E03" (
            references = @./SubUSDs/mat_E53AE01AC1FF9E03.usd@</Looks/mat_E53AE01AC1FF9E03>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_ChellHead_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_ChellHead_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_ChellHead_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3103F6EAAB1B6B93" (
            references = @./SubUSDs/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                int inputs:encoding = 2 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA6trex_2D2022_2E6_2E33::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/GlassFrosted_Solid_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_918B1272E24F1EBA" (
            references = @./SubUSDs/mat_918B1272E24F1EBA.usd@</Looks/mat_918B1272E24F1EBA>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_Companion.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_Companion.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_A5D050857A01EE5D" (
            references = @./SubUSDs/mat_A5D050857A01EE5D.usd@</Looks/mat_A5D050857A01EE5D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_A5D050857A01EE5D_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_A5D050857A01EE5D_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A65293BE7EA5F7B7" (
            references = @./SubUSDs/mat_A65293BE7EA5F7B7.usd@</Looks/mat_A65293BE7EA5F7B7>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Atlas01_A65293BE7EA5F7B7_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Atlas01_A65293BE7EA5F7B7_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Atlas01_A65293BE7EA5F7B7_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_AAAB0CB0C06F9934" (
            references = @./SubUSDs/mat_AAAB0CB0C06F9934.usd@</Looks/mat_AAAB0CB0C06F9934>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak11_AAAB0CB0C06F9934_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak11_AAAB0CB0C06F9934_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak11_AAAB0CB0C06F9934_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_6C9DB83C1D5A5254" (
            references = @./SubUSDs/mat_6C9DB83C1D5A5254.usd@</Looks/mat_6C9DB83C1D5A5254>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_RedText07_6C9DB83C1D5A5254_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_RedText07_6C9DB83C1D5A5254_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_RedText07_6C9DB83C1D5A5254_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_40D969C3B7B837F2" (
            references = @./SubUSDs/mat_40D969C3B7B837F2.usd@</Looks/mat_40D969C3B7B837F2>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_40D969C3B7B837F2_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_40D969C3B7B837F2_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Text_RatMan_40D969C3B7B837F2_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F017847A501D804B" (
            references = @./SubUSDs/mat_F017847A501D804B.usd@</Looks/mat_F017847A501D804B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Atlas02_F017847A501D804B_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Atlas02_F017847A501D804B_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Atlas02_F017847A501D804B_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F4661A1B6AA2E97B" (
            references = @./SubUSDs/mat_F4661A1B6AA2E97B.usd@</Looks/mat_F4661A1B6AA2E97B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak10_F4661A1B6AA2E97B_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak10_F4661A1B6AA2E97B_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak10_F4661A1B6AA2E97B_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_E37B04B0085B6401" (
            references = @./SubUSDs/mat_E37B04B0085B6401.usd@</Looks/mat_E37B04B0085B6401>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_E37B04B0085B6401_albedo.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_E37B04B0085B6401_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_E37B04B0085B6401_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C805C1C433BE9CC3" (
            references = @./SubUSDs/mat_C805C1C433BE9CC3.usd@</Looks/mat_C805C1C433BE9CC3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak08_C805C1C433BE9CC3_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak08_C805C1C433BE9CC3_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak08_C805C1C433BE9CC3_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_AE6FC0599B192217" (
            references = @./SubUSDs/mat_AE6FC0599B192217.usd@</Looks/mat_AE6FC0599B192217>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_GrayText02_AE6FC0599B192217_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_GrayText02_AE6FC0599B192217_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_GrayText02_AE6FC0599B192217_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_35961208D8AA165B" (
            references = @./SubUSDs/mat_35961208D8AA165B.usd@</Looks/mat_35961208D8AA165B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_GrayText01_35961208D8AA165B_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_GrayText01_35961208D8AA165B_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_GrayText01_35961208D8AA165B_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3AEFA6FD5CF2DEB4" (
            references = @./SubUSDs/mat_3AEFA6FD5CF2DEB4.usd@</Looks/mat_3AEFA6FD5CF2DEB4>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/3AEFA6FD5CF2DEB4.dds@
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_D247B454A176AFDA" (
            references = @./SubUSDs/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZAAtrex_2D2022_2E6_2E28::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/C91B319E391276F6_normal_OTH.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/C91B319E391276F6_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_05054E94DD6BB441" (
            references = @./SubUSDs/mat_05054E94DD6BB441.usd@</Looks/mat_05054E94DD6BB441>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.000001, 9.9999e-7, 9.9999e-7) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/05054E94DD6BB441.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/05054E94DD6BB441.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_C0BE016F97F55259" (
            references = @./SubUSDs/mat_C0BE016F97F55259.usd@</Looks/mat_C0BE016F97F55259>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/C0BE016F97F55259.dds@
                float inputs:emissive_intensity = 0.5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_63FF8A68ADB06117" (
            references = @./SubUSDs/mat_63FF8A68ADB06117.usd@</Looks/mat_63FF8A68ADB06117>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.000001, 9.9999e-7, 9.9999e-7) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/63FF8A68ADB06117.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/63FF8A68ADB06117.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_F9631DAD700BF661" (
            references = @./SubUSDs/mat_F9631DAD700BF661.usd@</Looks/mat_F9631DAD700BF661>
        )
        {
            over "Shader"
            {
                uniform bool enable_opacity = 1
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.22007722, 0.22007501, 0.22007501) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_BeamEmissive.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 0.01 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_BeamEmissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_CC76669780A210D2" (
            references = @./SubUSDs/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA8trex_2D2022_2E6_2E26::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:ior_constant = 1.5 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/C91B319E391276F6_normal_lss_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                float inputs:transmittance_measurement_distance = 800 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Measurement Distance"
                    doc = "Distance to match the transmittance through the volume at."
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/C91B319E391276F6_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_6E6C9A486CA765AC" (
            references = @./SubUSDs/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
            }
        }

        over "mat_9F874078BE0C83FF" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.02702701, 0.02702674, 0.02702674) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.90999997 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_D43FD9819FFDFB83" (
            references = @./SubUSDs/mat_D43FD9819FFDFB83.usd@</Looks/mat_D43FD9819FFDFB83>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/D43FD9819FFDFB83.dds@
                float inputs:emissive_intensity = 15 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/D43FD9819FFDFB83.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_F79DD67E8F6C9211" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.87258685, 0.82167375, 0.7445625) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                custom asset inputs:diffuse_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                int inputs:encoding = 2 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA4trex_2D2022_2E6_2E31::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_PistonReplace_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = "Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case."
                    hidden = false
                )
            }
        }

        over "mat_9EF5BB02100A5A21" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.01930499, 0.019304797, 0.019304797) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 0.79999995 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.61 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Mini_MetalFloor_Squares_4x4_01_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3CE13ABFA28FB599" (
            references = @./SubUSDs/mat_3CE13ABFA28FB599.usd@</Looks/mat_3CE13ABFA28FB599>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.4864865, 0.48648164, 0.48648164) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/3CE13ABFA28FB599_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/3CE13ABFA28FB599_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/3CE13ABFA28FB599_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_32B77A2178217BD6" (
            references = @./SubUSDs/mat_32B77A2178217BD6.usd@</Looks/mat_32B77A2178217BD6>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A5E8A1A436B43F4B" (
            references = @./SubUSDs/mat_A5E8A1A436B43F4B.usd@</Looks/mat_A5E8A1A436B43F4B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/A5E8A1A436B43F4B.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_51BD52AFFAAD4BE7" (
            references = @./SubUSDs/mat_51BD52AFFAAD4BE7.usd@</Looks/mat_51BD52AFFAAD4BE7>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak12_51BD52AFFAAD4BE7_albedo.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak12_51BD52AFFAAD4BE7_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak12_51BD52AFFAAD4BE7_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_121AF2BCC5B5AFCA" (
            references = @./SubUSDs/mat_121AF2BCC5B5AFCA.usd@</Looks/mat_121AF2BCC5B5AFCA>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak13_121AF2BCC5B5AFCA_albedo.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak13_121AF2BCC5B5AFCA_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak13_121AF2BCC5B5AFCA_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9594601C44B29721" (
            references = @./SubUSDs/mat_9594601C44B29721.usd@</Looks/mat_9594601C44B29721>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Waterline_basecolor.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Waterline_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Waterline_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_191B964DBBA9BA03" (
            references = @./SubUSDs/mat_191B964DBBA9BA03.usd@</Looks/mat_191B964DBBA9BA03>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Waterline_basecolor.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Waterline_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerWall_Waterline_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0464EB8194DD2139" (
            references = @./SubUSDs/mat_0464EB8194DD2139.usd@</Looks/mat_0464EB8194DD2139>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                custom asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak14_0464EB8194DD2139_albedo.dds@
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Leak14_0464EB8194DD2139_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak14_0464EB8194DD2139_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_604014719492D198" (
            references = @./SubUSDs/mat_604014719492D198.usd@</Looks/mat_604014719492D198>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/604014719492D198.dds@
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/604014719492D198.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_2DE4721839C4DCEA" (
            references = @./SubUSDs/mat_2DE4721839C4DCEA.usd@</Looks/mat_2DE4721839C4DCEA>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Projector_Moist.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 20 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Projector_Moist.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_AB0FD3C2087777A3" (
            references = @./SubUSDs/mat_AB0FD3C2087777A3.usd@</Looks/mat_AB0FD3C2087777A3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Screen_AB0FD3C2087777A3.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Screen_AB0FD3C2087777A3.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_090276399554917F" (
            references = @./SubUSDs/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                float inputs:ior_constant = 2.7 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                float inputs:transmittance_measurement_distance = 5000 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Measurement Distance"
                    doc = "Distance to match the transmittance through the volume at."
                    hidden = false
                )
                asset inputs:transmittance_texture = @./SubUSDs/textures/T_GlassTube_Glass_Milk.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_BD96927D7E62E25A" (
            references = @./SubUSDs/mat_BD96927D7E62E25A.usd@</Looks/mat_BD96927D7E62E25A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/BD96927D7E62E25A.dds@
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/fire_flip_02a.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:excludeFromWhiteMode = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Exclude from White Mode"
                    hidden = false
                )
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Columns"
                    doc = "Number of columns the emissive map is divided into"
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet FPS"
                    doc = "Frames Per Second if the emissive map is a spritesheet"
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Rows"
                    doc = "Number of row the emissive map is divided into"
                    hidden = false
                )
            }
        }

        over "mat_88ED77E565B7A549" (
            references = @./SubUSDs/mat_88ED77E565B7A549.usd@</Looks/mat_88ED77E565B7A549>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_MetalWall_88ED77E565B7A549_EmissiveEdge.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_T_MetalFloor_Squares_4x4_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D3A2B9688A37E911" (
            references = @./SubUSDs/mat_D3A2B9688A37E911.usd@</Looks/mat_D3A2B9688A37E911>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z16C_3A::ZC6Program_20Files_20_28x86_29::Steam::steamapps::common::Portal::PortalRTX::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_739825AF5FF7B600" (
            references = @./SubUSDs/mat_739825AF5FF7B600.usd@</Looks/mat_739825AF5FF7B600>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_013DB98F1B93F4679A_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_013DB98F1B93F4679A_normal_OTH.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.22 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_013DB98F1B93F4679A_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                float inputs:thin_film_thickness_constant = 229.49985 (
                    customData = {
                        float default = 200
                        dictionary range = {
                            float max = 1500
                            float min = 0.001
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film constant thickness in nm"
                    doc = "Thickness of the thin film if not specified in albedo texture"
                    hidden = false
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = "Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case."
                    hidden = false
                )
            }
        }

        over "mat_040F9EE0A6B54B7D" (
            references = @./SubUSDs/mat_040F9EE0A6B54B7D.usd@</Looks/mat_040F9EE0A6B54B7D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Asphalt_B_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Asphalt_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Asphalt_B_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9DED9E2A03234E95" (
            references = @./SubUSDs/mat_9DED9E2A03234E95.usd@</Looks/mat_9DED9E2A03234E95>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/9DED9E2A03234E95_upscaled.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_4DEEF5C779DDC88A" (
            references = @./SubUSDs/mat_4DEEF5C779DDC88A.usd@</Looks/mat_4DEEF5C779DDC88A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/4DEEF5C779DDC88A_upscaled.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_3CD4F0E2A8AAD575" (
            references = @./SubUSDs/mat_3CD4F0E2A8AAD575.usd@</Looks/mat_3CD4F0E2A8AAD575>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/3CD4F0E2A8AAD575_upscaled.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_4FEB275B85245FB9" (
            references = @./SubUSDs/mat_4FEB275B85245FB9.usd@</Looks/mat_4FEB275B85245FB9>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/4FEB275B85245FB9_upscaled.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_8DA1232E36B0AB4D" (
            references = @./SubUSDs/mat_8DA1232E36B0AB4D.usd@</Looks/mat_8DA1232E36B0AB4D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_8DA1232E36B0AB4D_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_8DA1232E36B0AB4D_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Floor_Grunge_01_8DA1232E36B0AB4D_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_179A68608CFD30C5" (
            references = @./SubUSDs/mat_179A68608CFD30C5.usd@</Looks/mat_179A68608CFD30C5>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_FloorLight_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 15 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_FloorLight_emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_FloorLight_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_FloorLight_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D86241E5472A3301" (
            references = @./SubUSDs/mat_D86241E5472A3301.usd@</Looks/mat_D86241E5472A3301>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/D86241E5472A3301.dds@
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_MiniFlood_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_5A53226615267C85" (
            references = @./SubUSDs/mat_5A53226615267C85.usd@</Looks/mat_5A53226615267C85>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalGrate01_5A53226615267C85_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalGrate01_5A53226615267C85_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalGrate01_5A53226615267C85_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalGrate01_5A53226615267C85_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3C1083709A6668A8" (
            references = @./SubUSDs/mat_3C1083709A6668A8.usd@</Looks/mat_3C1083709A6668A8>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/3C1083709A6668A8.dds@
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_3EB6278F7249DEC8" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Glass_Shatter_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZAAtrex_2D2022_2E6_2E28::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Glass_Shatter_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Glass_Shatter_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Glass_Shatter_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_26FCA00D7C9E8179" (
            references = @./SubUSDs/mat_26FCA00D7C9E8179.usd@</Looks/mat_26FCA00D7C9E8179>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/26FCA00D7C9E8179.dds@
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                float inputs:metallic_constant = 0.2 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Used when no albedo/opacity texture is specified. 0 for completely transparent, 1 for completly opaque."
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_FEABD5B514665A45" (
            references = @./SubUSDs/mat_FEABD5B514665A45.usd@</Looks/mat_FEABD5B514665A45>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/FEABD5B514665A45.dds@
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                float inputs:metallic_constant = 0.2 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Used when no albedo/opacity texture is specified. 0 for completely transparent, 1 for completly opaque."
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_09DEC5272AB9173E" (
            references = @./SubUSDs/mat_09DEC5272AB9173E.usd@</Looks/mat_09DEC5272AB9173E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/09DEC5272AB9173E.dds@
                float inputs:metallic_constant = 0.2 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_472BD2BCB90FE5B4" (
            references = @./SubUSDs/mat_472BD2BCB90FE5B4.usd@</Looks/mat_472BD2BCB90FE5B4>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/472BD2BCB90FE5B4.dds@
                float inputs:metallic_constant = 0.2 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_640E9BEDCA86A693" (
            references = @./SubUSDs/mat_640E9BEDCA86A693.usd@</Looks/mat_640E9BEDCA86A693>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_DimpledMoonTiles_Floor_Clean_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_DEDC4B3F32AAAD33" (
            references = @./SubUSDs/mat_DEDC4B3F32AAAD33.usd@</Looks/mat_DEDC4B3F32AAAD33>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_FloorLight_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_FloorLight_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_FloorLight_normal_OTH.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_FloorLight_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B69D5AB705802E1E" (
            references = @./SubUSDs/mat_B69D5AB705802E1E.usd@</Looks/mat_B69D5AB705802E1E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C72DD1EF670359FB" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Normal1.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8E57D4BC639FDDE4" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Screen_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Speakers_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Speakers_Normal1.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Screen_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7E6A8D072093662E" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Speakers_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Speakers_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Speakers_Normal1.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Glados_Screen_A1_Speakers_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B327F59623860335" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part3_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part3_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part3_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part3_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_EF6B21915EDB1073" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Tile1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Tile1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Tile1_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Tile1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_ECD0ED1320F80E4F" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part1_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part1_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part1_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4C3109FCEC41625E" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part2_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part2_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part2_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part2_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FAAC06D77245D24D" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part4_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part4_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part4_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part4_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_A_Part4_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D9BE46FFF3260C82" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::fbaraccani::appdata::local::ov::pkg::ZA5trex_2D2022_2E6_2E32::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_55AF529A05398536" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part2_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part2_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part2_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part2_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part2_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_68D76E5FE0EDB99C" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part3_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part3_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part3_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part3_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part3_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9DD26A46234B099D" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C66D80EBEC96F898" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B975F6822B71DE2A" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            custom string nickname = "M_Character_Glados_Mount_B_Tile1"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.94236314, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B0D5CB528C574CF1" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile3_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile3_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile3_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile3_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_70E5C66BF6A5C613" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            custom string nickname = "M_Character_Glados_Mount_C_Tile2"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile2_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile2_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile2_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile2_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_46B95973D75CFBE6" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            custom string nickname = "M_Character_Glados_Mount_C_Tile1"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_C_Tile1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_5772FA1936F4CB3C" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            custom string nickname = "M_Character_Glados_Mount_D_Tile1"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_58DE614634DC95AF" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D9372F04A193E222" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Incinerator_A1_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Character_Incinerator_A1_Emissive.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z36c_3A::users::vernon::appdata::local::ov::pkg::ZA6trex_2D2022_2E6_2E33::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Incinerator_A1_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Incinerator_A1_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Incinerator_A1_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0901F01E92F1E81C" (
            references = @./SubUSDs/mat_0901F01E92F1E81C.usd@</Looks/mat_0901F01E92F1E81C>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_FloorLight_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_FloorLight_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_FloorLight_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_FloorLight_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_EE9DD842BEBE5116" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
        }

        over "mat_F39A9E4E93667B72" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            custom string nickname = "T_ElectricFX_A01_Emissive"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                bool inputs:blend_enabled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Enabled"
                    doc = "Indicates if alpha state blending should be enabled."
                    hidden = false
                )
                int inputs:blend_type = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Type"
                    doc = "The alpha state blend type to use."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA6trex_2D2022_2E6_2E33::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Opacity::BlendType"
                    sdrMetadata = {
                        string __SDR__enum_value = "Alpha"
                        string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                    }
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ElectricFX_A01_Emissive.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 0.99999, 0.99999) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_ElectricFX_A01_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 4 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Columns"
                    doc = "Number of columns the emissive map is divided into"
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 12 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet FPS"
                    doc = "Frames Per Second if the emissive map is a spritesheet"
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 4 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Rows"
                    doc = "Number of row the emissive map is divided into"
                    hidden = false
                )
            }
        }

        over "mat_6937879504539805" (
            references = @./SubUSDs/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
            }
        }

        over "mat_E9FD72BAAB0C5FD0" (
            references = @./SubUSDs/mat_E9FD72BAAB0C5FD0.usd@</Looks/mat_E9FD72BAAB0C5FD0>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Decal_WarningSign07_E9FD72BAAB0C5FD0_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Decal_WarningSign07_E9FD72BAAB0C5FD0_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Decal_WarningSign07_E9FD72BAAB0C5FD0_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_6F1EAF2F9481C02F" (
            references = @./SubUSDs/mat_6F1EAF2F9481C02F.usd@</Looks/mat_6F1EAF2F9481C02F>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Decal_WarningSign02_6F1EAF2F9481C02F_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Decal_WarningSign02_6F1EAF2F9481C02F_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Decal_WarningSign02_6F1EAF2F9481C02F_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7A619D021C573F04" (
            references = @./SubUSDs/mat_7A619D021C573F04.usd@</Looks/mat_7A619D021C573F04>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Decal_WarningSign03_7A619D021C573F04_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Decal_WarningSign03_7A619D021C573F04_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Decal_WarningSign03_7A619D021C573F04_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_DBE4777E91467916" (
            references = @./SubUSDs/mat_DBE4777E91467916.usd@</Looks/mat_DBE4777E91467916>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Decal_WarningSign06_DBE4777E91467916_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Decal_WarningSign06_DBE4777E91467916_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Decal_WarningSign06_DBE4777E91467916_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4CB8F9A3D13B1C53" (
            references = @./SubUSDs/mat_4CB8F9A3D13B1C53.usd@</Looks/mat_4CB8F9A3D13B1C53>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Decal_WarningSign01_4CB8F9A3D13B1C53_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Decal_WarningSign01_4CB8F9A3D13B1C53_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Decal_WarningSign01_4CB8F9A3D13B1C53_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_6602BA893916C43C" (
            references = @./SubUSDs/mat_6602BA893916C43C.usd@</Looks/mat_6602BA893916C43C>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Decal_WarningSign04_6602BA893916C43C_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Decal_WarningSign04_6602BA893916C43C_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Decal_WarningSign04_6602BA893916C43C_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_129C15D6322998CB" (
            references = @./SubUSDs/mat_129C15D6322998CB.usd@</Looks/mat_129C15D6322998CB>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/Decal_WarningSign08_129C15D6322998CB_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/Decal_WarningSign08_129C15D6322998CB_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/Decal_WarningSign08_129C15D6322998CB_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_F600C3C5174DBF69" (
            references = @./SubUSDs/mat_F600C3C5174DBF69.usd@</Looks/mat_F600C3C5174DBF69>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                color3f inputs:diffuse_color_constant = (0.8745098, 0.8235294, 0.74509805) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_WhiteRails_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_WhiteRails_Normal_OTH.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.57 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_WhiteRails_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_5629D3F93966BA14" (
            references = [
                @./SubUSDs/mat_5629D3F93966BA14.usd@</Looks/mat_5629D3F93966BA14>,
                @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
            ]
        )
        {
            custom string nickname = "M_Character_Glados_Mount_B_Part4"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Part4_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_CEFA5A7F67AAF993" (
            references = [
                @./SubUSDs/mat_CEFA5A7F67AAF993.usd@</Looks/mat_CEFA5A7F67AAF993>,
                @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
            ]
        )
        {
            custom string nickname = "M_Character_Glados_Mount_B_Tile2"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_B_Tile2_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_20D620CB35D92BAF" (
            references = [
                @./SubUSDs/mat_20D620CB35D92BAF.usd@</Looks/mat_20D620CB35D92BAF>,
                @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
            ]
        )
        {
            custom string nickname = "M_Character_Glados_Mount_D_Tile2"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile2_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA3trex_2D2022_2E6_2E30::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile2_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile2_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Character_Glados_Mount_D_Tile2_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_BD2CBBFAECF0168C" (
            references = @./SubUSDs/mat_BD2CBBFAECF0168C.usd@</Looks/mat_BD2CBBFAECF0168C>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/BD2CBBFAECF0168C.dds@
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/BD2CBBFAECF0168C.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_3574F482B41905E8" (
            references = @./SubUSDs/mat_3574F482B41905E8.usd@</Looks/mat_3574F482B41905E8>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/3574F482B41905E8.dds@
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/3574F482B41905E8.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_ED271AB781D49A9A" (
            references = @./SubUSDs/mat_ED271AB781D49A9A.usd@</Looks/mat_ED271AB781D49A9A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/ED271AB781D49A9A.dds@
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/ED271AB781D49A9A.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_B25CD04A355C45D9" (
            references = @./SubUSDs/mat_B25CD04A355C45D9.usd@</Looks/mat_B25CD04A355C45D9>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/B25CD04A355C45D9.dds@
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/B25CD04A355C45D9.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_C5C302766FA5F91D" (
            references = @./SubUSDs/mat_C5C302766FA5F91D.usd@</Looks/mat_C5C302766FA5F91D>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/C5C302766FA5F91D.dds@
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/C5C302766FA5F91D.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_09083D293A167C5B" (
            references = @./SubUSDs/mat_09083D293A167C5B.usd@</Looks/mat_09083D293A167C5B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/09083D293A167C5B.dds@
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/09083D293A167C5B.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_170C6B7C7FA10C83" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/170C6B7C7FA10C83.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:metallic_constant = 0.48 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/170C6B7C7FA10C83.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B4240520BE7BA0B4" (
            references = @./SubUSDs/mat_B4240520BE7BA0B4.usd@</Looks/mat_B4240520BE7BA0B4>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Asphalt_C_Albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_309C81AB6FA2B1BD" (
            references = @./SubUSDs/mat_309C81AB6FA2B1BD.usd@</Looks/mat_309C81AB6FA2B1BD>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Asphalt_D_Albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_4FBD343C2D4327A7" (
            references = @./SubUSDs/mat_4FBD343C2D4327A7.usd@</Looks/mat_4FBD343C2D4327A7>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Asphalt_E_Albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_300C1921BCBC6A25" (
            references = @./SubUSDs/mat_300C1921BCBC6A25.usd@</Looks/mat_300C1921BCBC6A25>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Asphalt_C2_Albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_6643F8FF7C42CB18" (
            references = @./SubUSDs/mat_6643F8FF7C42CB18.usd@</Looks/mat_6643F8FF7C42CB18>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_Leak15_6643F8FF7C42CB18_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_Leak15_6643F8FF7C42CB18_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_27C8BA6D1FB47A6A" (
            references = @./SubUSDs/mat_27C8BA6D1FB47A6A.usd@</Looks/mat_27C8BA6D1FB47A6A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Decal_CameraWallGrip_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z17D_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Decal_CameraWallGrip_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Decal_CameraWallGrip_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_ECE63A6D1DE44F11" (
            references = @./SubUSDs/mat_ECE63A6D1DE44F11.usd@</Looks/mat_ECE63A6D1DE44F11>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/ECE63A6D1DE44F11.dds@
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/ECE63A6D1DE44F11.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_9BC64D479939D58E" (
            references = @./SubUSDs/mat_9BC64D479939D58E.usd@</Looks/mat_9BC64D479939D58E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/9BC64D479939D58E.dds@
                color3f inputs:emissive_color_constant = (0.7915058, 0.8768361, 1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 2 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_843880B80A8DA0CD" (
            references = @./SubUSDs/mat_843880B80A8DA0CD.usd@</Looks/mat_843880B80A8DA0CD>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/843880B80A8DA0CD.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_63425BD78B488714" (
            references = @./SubUSDs/mat_63425BD78B488714.usd@</Looks/mat_63425BD78B488714>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/63425BD78B488714.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_88ADD910DD646F15" (
            references = @./SubUSDs/mat_88ADD910DD646F15.usd@</Looks/mat_88ADD910DD646F15>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/88ADD910DD646F15.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_B12B1FC9419E61AA" (
            references = @./SubUSDs/mat_B12B1FC9419E61AA.usd@</Looks/mat_B12B1FC9419E61AA>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/B12B1FC9419E61AA.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_92A48101DBFFBB39" (
            references = @./SubUSDs/mat_92A48101DBFFBB39.usd@</Looks/mat_92A48101DBFFBB39>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/92A48101DBFFBB39.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_92839004744C4F55" (
            references = @./SubUSDs/mat_92839004744C4F55.usd@</Looks/mat_92839004744C4F55>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/92839004744C4F55.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_8115C595AA787711" (
            references = @./SubUSDs/mat_8115C595AA787711.usd@</Looks/mat_8115C595AA787711>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/8115C595AA787711.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_BF07C6904C5A098E" (
            references = @./SubUSDs/mat_BF07C6904C5A098E.usd@</Looks/mat_BF07C6904C5A098E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/BF07C6904C5A098E.dds@
                bool inputs:ignore_material = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
            }
        }

        over "mat_003DCD9D459603E2" (
            references = @./SubUSDs/mat_003DCD9D459603E2.usd@</Looks/mat_003DCD9D459603E2>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/003DCD9D459603E2.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/003DCD9D459603E2_upscaled4x.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.56 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_CA4F5DA4FBB99FFC" (
            references = @./SubUSDs/mat_CA4F5DA4FBB99FFC.usd@</Looks/mat_CA4F5DA4FBB99FFC>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_CA4F5DA4FBB99FFC_TreeBackground_Cleaner.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_CA4F5DA4FBB99FFC_TreeBackground_Cleaner.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
            }
        }

        over "mat_6CB534F9ACD206D5" (
            references = @./SubUSDs/mat_6CB534F9ACD206D5.usd@</Looks/mat_6CB534F9ACD206D5>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_6CB534F9ACD206D5_TreeBackground_Cleaner.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_6CB534F9ACD206D5_TreeBackground_Cleaner.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
            }
        }

        over "mat_EFE3A97FA9B79419" (
            references = @./SubUSDs/mat_EFE3A97FA9B79419.usd@</Looks/mat_EFE3A97FA9B79419>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/EFE3A97FA9B79419.dds@
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/EFE3A97FA9B79419.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_A869AD3FF2A04D2E" (
            references = @./SubUSDs/mat_A869AD3FF2A04D2E.usd@</Looks/mat_A869AD3FF2A04D2E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/A869AD3FF2A04D2E.dds@
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/A869AD3FF2A04D2E.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_5C30A288E0F56338" (
            references = @./SubUSDs/mat_5C30A288E0F56338.usd@</Looks/mat_5C30A288E0F56338>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/5C30A288E0F56338.dds@
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/5C30A288E0F56338.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_7E5068AAAD725549" (
            references = @./SubUSDs/mat_7E5068AAAD725549.usd@</Looks/mat_7E5068AAAD725549>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/7E5068AAAD725549.dds@
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/7E5068AAAD725549_origEmissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_0A72E9EC969DABB3" (
            references = @./SubUSDs/mat_0A72E9EC969DABB3.usd@</Looks/mat_0A72E9EC969DABB3>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_FloorLight_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_FloorLight_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_FloorLight_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_FloorLight_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_FloorLight_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_617136E3A2779E95" (
            references = @./SubUSDs/mat_617136E3A2779E95.usd@</Looks/mat_617136E3A2779E95>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_LeapGun_2.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_LeapGun_2.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_3B2B25636659ECAE" (
            references = @./SubUSDs/mat_3B2B25636659ECAE.usd@</Looks/mat_3B2B25636659ECAE>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_Signage_Danger_LeapGun_1.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Signage_Danger_LeapGun_1.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_5073D083DAE15E8B" (
            references = @./SubUSDs/mat_5073D083DAE15E8B.usd@</Looks/mat_5073D083DAE15E8B>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_02_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_02_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_02_normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_02_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_3C014888D001E197" (
            references = @./SubUSDs/AperturePBR_Opacity.usda@</Looks/mat_AperturePBR_Opacity>
        )
        {
            custom string nickname = "T_ElectricFX_B01_Emissive"

            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                bool inputs:blend_enabled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Enabled"
                    doc = "Indicates if alpha state blending should be enabled."
                    hidden = false
                )
                int inputs:blend_type = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Type"
                    doc = "The alpha state blend type to use."
                    hidden = false
                    renderType = "::Z38e_3A::ov::library::ZA6trex_2D2022_2E6_2E33::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Opacity::BlendType"
                    sdrMetadata = {
                        string __SDR__enum_value = "Alpha"
                        string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                    }
                )
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ElectricFX_B01_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 0.99999, 0.99999) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 150 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_ElectricFX_B01_Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 3 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Columns"
                    doc = "Number of columns the emissive map is divided into"
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 2 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet FPS"
                    doc = "Frames Per Second if the emissive map is a spritesheet"
                    hidden = false
                )
            }
        }

        over "mat_AD2E8628C4E9F15E" (
            references = @./SubUSDs/mat_AD2E8628C4E9F15E.usd@</Looks/mat_AD2E8628C4E9F15E>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_White_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_metallic.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_normal_OTH.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_MetalPanelWall_HeavyRust_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4B7186B0087C72B5" (
            references = @./SubUSDs/mat_4B7186B0087C72B5.usd@</Looks/mat_4B7186B0087C72B5>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_4B7186B0087C72B5_rebuild_Albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_4B7186B0087C72B5_rebuild_Metal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Piston_Square_Top_Normal_OTH.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_4B7186B0087C72B5_rebuild_Rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_384EE5E5185E060A" (
            references = @./SubUSDs/mat_384EE5E5185E060A.usd@</Looks/mat_384EE5E5185E060A>
        )
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                asset inputs:diffuse_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_basecolor.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                asset inputs:metallic_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_normal_OTH.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_ConcreteBunkerFloor_01_roughness.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }
    }

    over "meshes"
    {
        over "mesh_68FDFDB5BC2E38A9" (
            references = @./SubUSDs/SM_Fixture_Superbutton_Base.usd@
        )
        {
            token visibility = "inherited"

            over "Looks"
            {
                token visibility = "invisible"
            }

            over "SM_Fixture_Superbutton_Base"
            {
                token visibility = "inherited"

                over "DiskLight"
                {
                    token visibility = "invisible"
                }

                over "SM_Fixture_Superbutton_BaseShape"
                {
                    token visibility = "invisible"
                }
            }
        }

        over "mesh_32B85D105CF86F5D" (
            references = @./SubUSDs/SM_Fixture_Platform_A.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "SM_Fixture_PlatformPiston_A"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Platform_A_Albedo.png@ (
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Platform_A_Metal.png@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Platform_A_Normal1.png@ (
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Platform_A_Rough.png@ (
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_D96F51EEBC5D7A4D" (
            references = @./SubUSDs/SM_Furniture_Chair_Padded_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E07CAB97B0BA66B6" (
            references = @./SubUSDs/SM_Furniture_Monitor_A_01.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_Furniture_Monitor_A"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @@ (
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        asset inputs:emissive_mask_texture = @@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Mask Map"
                            doc = "The texture masking the emissive color"
                            hidden = false
                        )
                        bool inputs:enable_emission = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Emissive"
                            displayName = "Enable Emission"
                            doc = "Enables the emission of light from the material"
                            hidden = false
                        )
                        int inputs:encoding = 0
                        asset inputs:metallic_texture = @./SubUSDs/textures/T_Furniture_Monitor_A_Metal.dds@
                        asset inputs:normalmap_texture = @./SubUSDs/textures/T_Furniture_Monitor_A_Normal_OTH.dds@
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Furniture_Monitor_A_Rough.dds@
                        int inputs:sprite_sheet_cols = 1 (
                            customData = {
                                int default = 1
                                dictionary range = {
                                    int max = 255
                                    int min = 1
                                }
                            }
                            displayGroup = "Emissive"
                            displayName = "Spritesheet Columns"
                            doc = "Number of columns the emissive map is divided into"
                            hidden = false
                        )
                        int inputs:sprite_sheet_fps = 0 (
                            customData = {
                                int default = 0
                                dictionary range = {
                                    int max = 255
                                    int min = 0
                                }
                            }
                            displayGroup = "Emissive"
                            displayName = "Spritesheet FPS"
                            doc = "Frames Per Second if the emissive map is a spritesheet"
                            hidden = false
                        )
                        int inputs:sprite_sheet_rows = 1 (
                            customData = {
                                int default = 1
                                dictionary range = {
                                    int max = 255
                                    int min = 1
                                }
                            }
                            displayGroup = "Emissive"
                            displayName = "Spritesheet Rows"
                            doc = "Number of row the emissive map is divided into"
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_01F1701EB21532EE" (
            references = @./SubUSDs/SM_Fixture_Elevator_Base_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_06526F98C0D9D8E5" (
            references = @./SubUSDs/SM_Fixture_GlassTube_Coupler.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B92B59E7CD7351BA" (
            references = @./SubUSDs/SM_Fixture_Toilet.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_2A458DB2800B38F9" (
            references = @./SubUSDs/SM_Furnitue_EndTable.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_40839A227EAC0196" (
            references = @./SubUSDs/SM_Prop_Radio.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_22FE67441D6C24BB" (
            references = @./SubUSDs/SM_Fixture_DoorLock.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_2440770086FC63BA" (
            references = @./SubUSDs/SM_Fixture_TimerFrame.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C44D2223F5878063" (
            references = @./SubUSDs/SM_Fixture_FizzleGates_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_DC1C467D678BF7A3" (
            references = @./SubUSDs/SM_Fixture_ToiletLid.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_943F213A76D34B96" (
            references = @./SubUSDs/SM_Fixture_PlatformPillars_C13.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8A649CAE38FD0786" (
            references = @./SubUSDs/SM_Fixture_Platform_B.usd@
        )
        {
            token visibility = "invisible"

            over "SM_Fixture_PlatformPiston_B"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_D79BEB44D9761D46" (
            references = @./SubUSDs/SM_Furnitue_ChamberBed.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6B67DA7C3C1A9146" (
            references = @./SubUSDs/SM_Fixture_Superbutton_Pad.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7D324954A2A437C5" (
            references = @./SubUSDs/SM_Fixture_Pipes_Diagonal_A2_02.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_739BC65880B9E3B8" (
            references = @./SubUSDs/SM_Fixture_Pipes_Straight_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9A3125E32828BB09" (
            references = @./SubUSDs/SM_Fixture_Pipes_Diagonal_A3_03.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_2417597B90FC0D1F" (
            references = @./SubUSDs/SM_Fixture_IndustrialFan_Blades_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4019D65FB9B7DF03" (
            references = @./SubUSDs/SM_Fixture_Glados_Screen.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B48075FE925CDC01" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B40C3049EEBDFB35" (
            references = @./SubUSDs/SM_Furniture_Monitor_B_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9C1E6F86338594F6" (
            references = @./SubUSDs/SM_Fixture_Platform_Folding.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4BA7CC96401D7668" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_D.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_89A49E12DFE34E09" (
            references = @./SubUSDs/SM_Fixture_GlassTube_Straight.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_GlassTube_Straight_Frame"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/T_GlassTube_Straight_Albedo.dds@
                        asset inputs:metallic_texture = @./SubUSDs/textures/T_GlassTube_Straight_Metal.dds@
                        asset inputs:normalmap_texture = @./SubUSDs/textures/T_GlassTube_Straight_Normal.dds@ (
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_GlassTube_Straight_Rough.dds@
                    }
                }
            }
        }

        over "mesh_28A3DB0952945EC8" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_3BCEC13C48A6DFA1" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_D1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_23649DA4F7E6DFEA" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_C2.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_ED94411C81AEFB87" (
            references = @./SubUSDs/SM_Fixture_ElevatorRoom_Walls_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BD15CCE8DD84F744" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_971F0F76408E5352" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_AC419020F4326231" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_E57FB86E46DCAAE4" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_051FCAEF5E9A4B6B" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_E.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_Electrical_Box_E_AperturePBR_Opacity"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_E_albedo.dds@ (
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        int inputs:encoding = 0
                        asset inputs:metallic_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_E_metallic.dds@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_E_normal_OTH.dds@ (
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_E_roughness.dds@ (
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_81508BDFD9F41CBE" (
            references = @./SubUSDs/SM_Fixture_electrical_box_G.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4B0D5A01FD172538" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_F.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_Electrical_Box_F_AperturePBR_Opacity"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/SM_Fixture_electrical_box_F_albedo.dds@ (
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        int inputs:encoding = 0
                        asset inputs:metallic_texture = @./SubUSDs/textures/SM_Fixture_electrical_box_F_metallic.dds@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./SubUSDs/textures/SM_Fixture_electrical_box_F_normal_OTH.dds@ (
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SM_Fixture_electrical_box_F_roughness.dds@ (
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_C9F98C405F1EED00" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_D1_01.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_Fixture_Electrical_Box_D"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_D1_Albedo.dds@ (
                            colorSpace = "sRGB"
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        float inputs:emissive_intensity = 10 (
                            customData = {
                                float default = 40
                                dictionary range = {
                                    float max = 65504
                                    float min = 0
                                }
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Intensity"
                            doc = "Intensity of the emission"
                            hidden = false
                        )
                        asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_D1_Emissive.dds@ (
                            colorSpace = "sRGB"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Mask Map"
                            doc = "The texture masking the emissive color"
                            hidden = false
                        )
                        bool inputs:enable_emission = 1 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Emissive"
                            displayName = "Enable Emission"
                            doc = "Enables the emission of light from the material"
                            hidden = false
                        )
                        asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_D1_Metal.dds@ (
                            colorSpace = "raw"
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_D1_Normal.dds@ (
                            colorSpace = "raw"
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_D1_Rough.dds@ (
                            colorSpace = "raw"
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_944D918A56CA22F3" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_A.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_Electrical_Box_A"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_albedo.dds@ (
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        int inputs:encoding = 0 (
                            customData = {
                                int default = 0
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Encoding"
                            doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                            hidden = false
                            renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                            sdrMetadata = {
                                string __SDR__enum_value = "octahedral"
                                string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                            }
                        )
                        asset inputs:metallic_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_metallic.dds@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_normal_OTH.dds@ (
                            colorSpace = "raw"
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_roughness.dds@ (
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_071B82D4ED7CFBEF" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_B.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "SM_Fixture_Electrical_Box_B_AperturePBR_Opacity"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_B_albedo.dds@ (
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        int inputs:encoding = 0
                        asset inputs:metallic_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_B_metallic.dds@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_B_normal_OTH.dds@ (
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_B_roughness.dds@ (
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_55FD54E122CDA9A8" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_I1_01.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_Fixture_Electrical_Box_I"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_I1_Albedo.dds@
                        asset inputs:emissive_mask_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_I1_Emissive.dds@
                        int inputs:encoding = 0 (
                            doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                            hidden = false
                            renderType = "::Z36c_3A::users::hhazen::appdata::local::ov::pkg::ZA7trex_2D2022_2E6_2E16::_build::Z0Awindows_2Dx86_5F64::release::omni_core_materials::Base::AperturePBR_Normal::normalmap_encoding"
                            sdrMetadata = {
                                string __SDR__enum_value = "octahedral"
                                string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                            }
                        )
                        asset inputs:metallic_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_I1_Metal.dds@
                        asset inputs:normalmap_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_I1_Normal_OTH.dds@
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/T_Fixture_Electrical_Box_I1_Rough.dds@
                    }
                }
            }
        }

        over "mesh_7A8432AB51E68C04" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_H1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6A7BFE196AD700BC" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_079422AFA41BDD9D" (
            references = @./SubUSDs/SM_Furniture_Desk_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D128277A929D9C32" (
            references = @./SubUSDs/SM_Furniture_Desk_B_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_80DB04C2B80D394D" (
            references = @./SubUSDs/SM_Fixture_intercom_B1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F2EB924232ADB7F7" (
            references = @./SubUSDs/SM_Fixture_intercom_B1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_26CF70F668F8D9F2" (
            references = @./SubUSDs/SM_Fixture_HydroGen.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_DEE1151EFD748462" (
            references = @./SubUSDs/SM_Fixture_Pipes_Diagonal_A2_02.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FA842512BF6434AE" (
            references = @./SubUSDs/SM_Fixture_Pipes_Straight_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_814369487065F8D4" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_B.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_228395C4F69C0C35" (
            references = @./SubUSDs/SM_Fixture_Rail_3Unit_Stair_Damaged_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_920FAD91202B269F" (
            references = @./SubUSDs/SM_Fixture_Rail_1Unit_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D39F833F9FA35B3B" (
            references = @./SubUSDs/SM_Fixture_Rail_4Unit_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9A39D603EDE9ACA0" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_D1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_77AB09682A978A37" (
            references = @./SubUSDs/SM_Fixture_GlassTube_Straight.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_39566143CD3B8B69" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_8821D615B69CD94D" (
            references = @./SubUSDs/SK_Character_TripodBot_Damaged_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8F46B3C06565A71C" (
            references = @./SubUSDs/SM_Furniture_Table_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0D994D38625C1A27" (
            references = @./SubUSDs/SM_Fixture_intercom_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_1B14E45CAE6B7CA2" (
            references = @./SubUSDs/SM_Fixture_IndustrialValveCap.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9C8F45650BBFD141" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_E.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_69BD1AE231052BC3" (
            references = @./SubUSDs/SM_Prop_CardboardBed_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_24B47372D3E6CDC5" (
            references = @./SubUSDs/SM_Furniture_Desk_B_1m_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_711F2D4895C93499" (
            references = @./SubUSDs/SM_Flixture_Light_Bulkhead.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_CDB3041759BA38C8" (
            references = @./SubUSDs/SM_Fixture_Pipes_Diagonal_A3_03.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4665F23E75A0EFEC" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_B1_01_1.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FA5B28DB8C25BAA1" (
            references = @./SubUSDs/SM_Fixture_IdustrialDoor_Frame.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_69DADE8B2ACA3E0D" (
            references = @./SubUSDs/SM_Fixture_Rail_3Unit_Stair_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_CD4FE5581DE87244" (
            references = @./SubUSDs/SM_Fixture_PowerWall.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_AE3855D6998EFB4C" (
            references = @./SubUSDs/SM_Prop_Redphone_Base.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_951796E822586FC7" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_D1_01_1.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8D3A0219F1173AC5" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0B1D134BC06667D6" (
            references = @./SubUSDs/SM_Fixture_Pipes_T_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_EFDB64EE42A776EA" (
            references = @./SubUSDs/SM_Furniture_Chair_Padded_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_35F406B88720F01F" (
            references = @./SubUSDs/SM_Prop_GameConsole.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_840D0708CE320CD9" (
            references = @./SubUSDs/SM_Prop_GameConsole.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_CAC6CCB4DDE9C8DC" (
            references = @./SubUSDs/SM_Fixture_Spotlight.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_5D42DEF9F02087B2" (
            references = @./SubUSDs/SM_Fixture_Spotlight_Mount_A.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7196EF7A7688EBC7" (
            references = @./SubUSDs/SM_Furniture_Desk_B_Corner_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_51776A0678725744" (
            references = @./SubUSDs/SM_Furniture_Desk_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4F0836A1F37C636D" (
            references = @./SubUSDs/SM_Fixture_Rail_2Unit_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C33DB96194F00ECB" (
            references = @./SubUSDs/SM_Furniture_Shelf_Standing.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7D1AB586BFE5EF3C" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_C1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_865F0A1545309EF3" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_F.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_703A03656798CAED" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_H1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_841B350DCC7FFFD9" (
            references = @./SubUSDs/SM_Furniture_Stool.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BFB805622A561625" (
            references = @./SubUSDs/SM_Fixture_Tank_NaturalGas_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4B9B9E068BD0FABD" (
            references = @./SubUSDs/SM_Fixture_GlassTube_T.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F2A83404B478115B" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_AA5156DC92BF8B58" (
            references = @./SubUSDs/SM_Fixture_Elevator_Interior_Windows.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_A53392B7C34B7071" (
            references = @./SubUSDs/SM_Fixture_Elevator_Frame_1.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C47107DE773AE102" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_ADA073FEC6FA90A4" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_C4097AB0934F97DF" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_C1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_A32499D1B9FC0640" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_A.usd@
        )
        {
            token visibility = "invisible"

            over "Looks"
            {
                over "M_Electrical_Box_A"
                {
                    over "Shader"
                    {
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        asset inputs:diffuse_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_albedo.dds@ (
                            doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                            hidden = false
                        )
                        int inputs:encoding = 0 (
                            customData = {
                                int default = 0
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Encoding"
                            doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                            hidden = false
                            renderType = "::Z18E_3A::lss_remaster::notnv::lightspeedrtx::trex::portal1::lss::capture::materials::AperturePBR_Normal::normalmap_encoding"
                            sdrMetadata = {
                                string __SDR__enum_value = "octahedral"
                                string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                            }
                        )
                        asset inputs:metallic_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_metallic.dds@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_normal_OTH.dds@ (
                            colorSpace = "raw"
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @./SubUSDs/textures/SM_Fixture_Electrical_Box_A_roughness.dds@ (
                            hidden = false
                        )
                    }
                }
            }
        }

        over "mesh_CDF52AED9175CB01" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_I1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_46911A868EEAD519" (
            references = @./SubUSDs/SM_Prop_GameConsole_Damaged_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_5C8ACC54F254C945" (
            references = @./SubUSDs/SM_Prop_CanBeans_B.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_14A226A5E058A595" (
            references = @./SubUSDs/SM_Prop_CanBeans_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9B9B00D1861E9B54" (
            references = @./SubUSDs/SM_Prop_CompanionCube_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8A3F85F12DD57998" (
            references = @./SubUSDs/SM_Fixture_CryoTube_01.usd@
        )
        {
            token visibility = "invisible"

            over "SM_Fixture_CryoTube_01"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_D5A4A407F20CF6F4" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_CCCD00522D23E900" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        over "mesh_92CC82E665F3C0D7" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_48CDF09D87BD9721" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_FD7C3189CFD8F84A" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_D1CBC18434544789" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_E1D29056592BAF70" (
            references = @./SubUSDs/SM_Fixture_EmergencyLight.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_AB744AE7C1DBFB39" (
            references = @./SubUSDs/SM_Prop_Clipboard_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_53D5AC9D841652EE" (
            references = @./SubUSDs/SM_Fixture_PlatformBeam_Reciver.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3947DE91859169EC" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_B041B993EC8AC701" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_7860A17C00A8C88C" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_3D73F09CA5FA1F01" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_1F2DEF8F0BB16A3B" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_5523C36B0343719B" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_1118078103F684A5" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_4B9A62B288F69EDA" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_D0D964EB10FE38EC" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_EFE3F386F358E684" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_72C09266BFEBEDF7" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_86FF4D60BACB4CC9" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_2F87FC2B87E14806" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_7C52FD596AEBCAB4" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_D172BDD09D3E9CD9" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_49836AF38B3B4922" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_C24A749521EF205D" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_AE36E64A66036F6E" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_D0D2B890AB448488" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_4EAE49E1488BCA9B" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_36EA9A1B30FB60D9" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_7E4328C353058734" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_690254670E221D02" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_12EA2152E982ECC5" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_C3CA48BE834453B6" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_96BFA9AC8F78ABC5" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_F88C0BA343837F10" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_87084B0021FD74FB" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_94CED26533DA6663" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_C1730A4EF50049AA" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_AD0972B3AA8F1ACB" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_E3A481FA2E0CD3C2" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_0AC5A6C372D31C08" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_A54A544AB1D53930" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_4E3682C2BE176710" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_F3A28C5A1FD3F2B4" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_EBD6EA5D157F5C8C" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_F30453E5BCA83E9A" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_B37F6DB99D587F7D" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_6BFE390AC69A488C" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_8F77A418064551C7" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "inherited"
        }

        over "mesh_16B527BB68B177A1" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_Base.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_EFA1189A9C963CC1" (
            references = @./SubUSDs/SM_Fixture_Vents_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_99DD631EFBBEF2F1" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_B2.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F5D0EDB244CA5689" (
            references = @./SubUSDs/SK_Character_CameraBot_D_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_50FD8622601FA31B" (
            references = @./SubUSDs/SM_Fixture_Elevator_Interior.fbx.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_343810EBEE3A7741" (
            references = @./SubUSDs/SM_Fixture_Elevator_Exterior.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6C5F573118ECE9B6" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_C1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_59B2365841E90DE6" (
            references = @./SubUSDs/SM_Furniture_Table_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C3A5FD0E44712B54" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_B1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FA02815EA702B577" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7F0DF05FFD710270" (
            references = @./SubUSDs/SM_Prop_WeightedSphere.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_12577555F48F289B" (
            references = @./SubUSDs/SM_Fixture_GlassTube_Elbow.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D9A3BA74FFDA5DD6" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_6CD875CC9B6EB101" (
            references = @./SubUSDs/SM_fixture_fence_A01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BD99CE07205B330A" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_DC3668825F514FAF" (
            references = @./SubUSDs/SM_fixture_fence_gate_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E54F53A914DD05EE" (
            references = @./SubUSDs/SM_fixture_fence_gateFrame_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7C48284C9E2AA7CC" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_ADD7B03F84C7759E" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_B97AF532C92894C3" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_507F6B1AC1377A6B" (
            references = @./SubUSDs/SM_fixture_fence_B01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4D3E09524A371C51" (
            references = @./SubUSDs/SM_fixture_fence_C01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_561BAB4823CABCDF" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_Base.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B7D73BA3FFEC605E" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_B.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_5C1F1519931AA33A" (
            references = @./SubUSDs/SM_PersonalitySphere_cakeRoom.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_26560462E62BCF18" (
            references = @./SubUSDs/SM_Furniture_Shelf_Standing_CakeRoom.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C25C400FD89DB6BA" (
            references = @./SubUSDs/SM_PersonalitySphere_Background.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_671F2D584B23864A" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9714E457A6E295B3" (
            references = @./SubUSDs/SM_Prop_Cake.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_1E38A9C76AC4400F" (
            references = @./SubUSDs/SM_Fixture_GladosEntranceLight.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C36637FC4FFAE08E" (
            references = @./SubUSDs/SM_Prop_Keyboard_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B66A6B0626C0C79A" (
            references = @./SubUSDs/SM_Prop_Clipboard_B1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BC6E119425BA1AE7" (
            references = @./SubUSDs/SM_Prop_Redphone_Base.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_747FCC5A076573B5" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_A.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_73C600A9033919B6" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_A.usd@
        )
        {
            token visibility = "invisible"

            over "SM_Fixture_PlatformPiston_A"
            {
                token visibility = "invisible"
            }

            over "Looks"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_C61B105E7D0F5984" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_Base.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6307803B0AF6EFB2" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_E.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F6626485879A644C" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_Base_E_Base.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_A9FE5D4BF1332DEB" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_Base_Oval.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0C9ACDF9F142C52B" (
            references = @./SubUSDs/mesh_0C9ACDF9F142C52B_REPLACED.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_92D6D75EEB3FA68D" (
            references = @./SubUSDs/SM_Fixture_HangingLight.usd@
        )
        {
            custom string nickname = "HangingLight"
            token visibility = "invisible"
        }

        over "mesh_459432106F729559" (
            references = @./SubUSDs/SM_Furniture_Shelf_Standing.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_76B55F4B7A0BB079" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9B340C3143499C85" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E7468B98F25A1C90" (
            references = @./SubUSDs/SM_Fixture_GlassTube_Elbow.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_41CF1278F014CE4A" (
            references = @./SubUSDs/SM_Fixture_GeoReplace_Emissive_ch10.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_83A2C2E59B335605" (
            references = @./SubUSDs/SM_Fixture_Platform_A_Small.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C7A22ECBF7826AF0" (
            references = @./SubUSDs/mesh_C7A22ECBF7826AF0_GlassReplace_CH12_B.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6582291A0CF5E0AD" (
            references = @./SubUSDs/SM_Fixture_GeoReplace_Emissive_ch12.usd@
        )
        {
            custom string nickname = "RepacedEmissiveLava"
            token visibility = "invisible"
        }

        over "mesh_EC570C98BFAA1DBE" (
            references = @./SubUSDs/SM_Fixture_AC_LargeVent.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4219752473EB4C67" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_841A72466B3DD6AE" (
            references = @./SubUSDs/SM_Fixture_GlassTube_T.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6F91E6D78656E6FA" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_A2_02.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_959D6D02B0AFE2BF" (
            references = @./SubUSDs/SM_Prop_CardboardBed_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D279157ACFC950FE" (
            references = @./SubUSDs/SM_Fixture_PowerTerminal.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E52B772795CCA3D7" (
            references = @./SubUSDs/mesh_87D1904CA26C8E2A_GlassReplace_CH19.usd@
        )
        {
            custom string nickname = "ReplacementHall Glass"
            token visibility = "invisible"
        }

        over "mesh_CA7E8FDE4040E578" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C611148FC4C8977E" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6DAAAE2FDC6EB520" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FA89CFF6D497D270" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8C4485F2E351559B" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_EC6E8BE204D98062" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B8FB0441EC604E42" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_AF8E85B5E4811E32" (
            references = @./SubUSDs/SM_Prop_SoupPot_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E7185DF706DBF4CE" (
            references = @./SubUSDs/SM_Prop_GameConsole_Damaged_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C2E4880E7F1CE36A" (
            references = @./SubUSDs/SM_Prop_Bucket.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3583CDFC73724A37" (
            references = @./SubUSDs/SM_Prop_LooseCube_A.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D7B3DF0DC9514164" (
            references = @./SubUSDs/mesh_C7A22ECBF7826AF0_GlassReplace_CH12.usd@
        )
        {
            custom string nickname = "Glass "
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_06A73350CF14DBE0" (
            references = [
                @./SubUSDs/companionCubeGroupDisplayB.usd@,
                @./SubUSDs/mesh_06A73350CF14DBE0.usd@
            ]
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E9C457F578ABEB25" (
            references = @./SubUSDs/mesh_F1117ACC55D4C5B2_Glass_CH_01.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_0EF706246B095656" (
            references = @./SubUSDs/mesh_0EF706246B095656.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0CD3F5B6C28FCFE3" (
            references = @./SubUSDs/SM_Fixture_BrushPillars_Chamber18_A01_01.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"

            over "SM_Fixture_BrushPillars_Chamber18_A01_01"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (763.9999389648438, -58.119873046875, 188)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_499DD549F8E882E4" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_991C82F61B5AB8F6" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_2A766CACE2EA6960" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_0F76E26DD96D31E5" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_6C80625603D21558" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_DF7EDE5077250257" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_5D128CB94E6199D9" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_E1786FC51B71825F" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_7428D9D60535D3B1" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_65D698FB30D24697" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_836917C70F258E33" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_37BFBF3A686E3B76" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_0550C3A6CB0AB4C4" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_E81A32C5DE24B725" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_Base_Oval.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_ACAFCAFB915F8DC6" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_91A2BE783F7EF5C3" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassA"
        }

        over "mesh_440A8A773EEAC66D" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassB"
        }

        over "mesh_E0195FBCEFDA5881" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassC"
        }

        over "mesh_C28B4E8EE7C15943" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassD"
        }

        over "mesh_5D33EE7058403921" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassE"
        }

        over "mesh_3A78A44CA4EB9ACE" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassF"
        }

        over "mesh_A8A63CF39AC21C14" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassG"
        }

        over "mesh_6F5654F09198D047" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            custom string nickname = "GladosGlassH"
        }

        over "mesh_A0F8C0A3DBF01893" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_579270C1FAFF26FC" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_CBA534DFB63D88E1" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_CC9F39F44B16A72E" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_D52B6D562053937A" (
            references = @./SubUSDs/SM_Fixture_BeamEmitter_Vert_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F8F2C8E57CC674AA" (
            references = @./SubUSDs/SM_Furniture_Monitor_A_02.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_3393EE459A44B29B" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_C01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8FCC4DE95EED1482" (
            references = @./SubUSDs/SM_Prop_Projector.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_22F1A063E79DA6CF" (
            references = @./SubUSDs/SM_Fixture_RoundFrame_Wide.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_80478F0A65147101" (
            references = @./SubUSDs/SM_Prop_Mug_Damage_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_AA94E3AD8E339255" (
            references = @./SubUSDs/SM_Prop_Mug_Damage_02.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_388F43E1AC8B4D67" (
            references = @./SubUSDs/SM_Prop_Mug.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6FBD43146613FF96" (
            references = @./SubUSDs/SM_Fixture_Elevator_Frame.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E2600588B8C8B5D0" (
            references = @./SubUSDs/SM_Fixture_Elevator_Frame.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4564F13F6A027850" (
            references = @./SubUSDs/SM_Fixture_Elevator_Interior.fbx.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_44ED0B2D3697B91B" (
            references = @./SubUSDs/SM_Fixture_Elevator_Exterior.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_2E562E63E253C262" (
            references = @./SubUSDs/SM_Fixture_Firepit.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9A04B894ACF3DB83" (
            references = @./SubUSDs/SM_Fixture_Firepit.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_46AC22CE7BBD319D" (
            references = @./SubUSDs/PRTX_lighting_SpotlightCatcher.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_4457652AA6746B07" (
            references = @./SubUSDs/SM_Furniture_Monitor_ScreenReplacement.usd@
        )
        {
            token visibility = "invisible"

            over "SM_MonitorScreen_Replacement"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_11DF73B04A540DC9" (
            references = @./SubUSDs/SM_Fixture_ThinPipes_Damaged_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3189EABAD45B1C71" (
            references = @./SubUSDs/SM_Fixture_ThinPipes_Damaged_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_865063120A105B22" (
            references = @./SubUSDs/SM_Fixture_Tank_NaturalGas_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C38D799231E0457A" (
            references = @./SubUSDs/SM_Prop_ChannelLocks_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_857F96ACB5D0C51F" (
            references = @./SubUSDs/SM_Prop_Wrench_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0057C956B8C3CD12" (
            references = @./SubUSDs/SM_Prop_OilBarrel.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_5AC35F501C66BE43" (
            references = @./SubUSDs/SM_Prop_OilBarrel.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F088C7FA487F5D5B" (
            references = @./SubUSDs/SM_Prop_OilBarrel.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3AE491B86BD42E8E" (
            references = @./SubUSDs/SM_fixture_fence_A01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_93AA28ABD1FE074B" (
            references = @./SubUSDs/SM_Fixture_Firepit.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_77D4699E2155741C" (
            references = @./SubUSDs/SM_Prop_OutdoorsSet_Light_B1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_CA8A5087B13D1C08" (
            references = @./SubUSDs/SM_Prop_OutdoorsSet_Curbs_D1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_012599B8AA0BE78C" (
            references = @./SubUSDs/SM_Prop_OutdoorsSet_Shack_E1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B9C617F037618113" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_2B7E5709EEB8830C" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_192A727907B6BCDA" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_09952537CD90E3AA" (
            references = @./SubUSDs/SK_Character_GladosDead_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FAA5B43592406DD7" (
            references = @./SubUSDs/SM_Prop_Rubble_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B41AFD99A4AB5692" (
            references = @./SubUSDs/SM_Fixture_Pipes_Elbow_B2.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FE13959423303D10" (
            references = @./SubUSDs/SM_Fixture_ThinPipes_B01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F8FD8C11B9D61454" (
            references = @./SubUSDs/SM_Fixture_ThinPipes_C01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9C203E89E0852A25" (
            references = @./SubUSDs/SM_Fixture_ThinPipes_D01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3F9682317D14256E" (
            references = @./SubUSDs/SM_Fixture_ThinPipes_A01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_5A5ED25717E2B13A" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_D01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8CDC28C22B49C3EE" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_Elbow_A02_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_959911E5A86BD539" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_A01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0DBBF9BB78653110" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_B01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BA98CFB553C5DE6C" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_C1.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4820EF5DA27DA833" (
            references = @./SubUSDs/SM_Fixture_PlatformPiston_Base_Oval.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_8B22F3A0889C4B49" (
            references = @./SubUSDs/SM_Fixture_electrical_box_G.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_066D4B7B0FCFB1FB" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_41EBCB75B32E04AE" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FAFDAA644566551B" (
            references = @./SubUSDs/SM_Prop_Mouse.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_CBD4B23867619ED7" (
            references = @./SubUSDs/SM_Prop_Grp_RTX4090_ch19.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_82BF8E03CE15B4C4" (
            references = @./SubUSDs/SM_Prop_OutdoorsSet_Curbs_D1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_A83CEB80D1EE97ED" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_05FCC63635245C0B" (
            references = @./SubUSDs/SM_Prop_OutdoorsSet_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E1A23BB1F29743E1" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0050E1C34E7F7D00" (
            references = @./SubUSDs/SM_Prop_OutdoorsSet_Shack_E1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FC6B74ED03E80D39" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_35AA9DABC475B13E" (
            references = @./SubUSDs/SM_Prop_OutdoorsSet_Sign_C1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B30E8CE408AAE482" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_F8CEEC3FA65BFCD9" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_1F9C43F2F8360F97" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_44AC48E98072BCB4" (
            references = @./SubUSDs/SM_Fixture_ThinPipes_Damaged_A02_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_63B1F6F21FE69B57" (
            references = @./SubUSDs/SM_Fixture_Electrical_Box_D1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D9EFDAEF88EC2F43" (
            references = @./SubUSDs/SM_Fixture_electrical_box_G.usd@
        )
        {
            token visibility = "invisible"

            over "SM_Fixture_electrical_box_G"
            {
                token visibility = "inherited"
            }
        }

        over "mesh_9C599823BECEC6EF" (
            references = @./SubUSDs/SM_Fixture_ElectricalPipe_D01_01.usd@
        )
        {
            token visibility = "invisible"

            over "SM_Fixture_ElectricalPipe_D1"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_DFF6CB92ABD00613" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9F3DEB11C0843FFE" (
            references = @./SubUSDs/SM_Furniture_Shelf_Hanging.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B64BBFA9B89F6467" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_Elbow_A02_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_100916B77C5F70C5" (
            references = @./SubUSDs/SM_Furniture_Chair_Wooden_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7FA9DBB8E8FC949D" (
            references = @./SubUSDs/SM_Fixture_intercom_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C6B12BE038F38E7E" (
            references = @./SubUSDs/SM_Furniture_Stool.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_ABAD4890EEE328C9" (
            references = @./SubUSDs/SM_Fixture_CryoTube_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D7C154C7F872244C" (
            references = @./SubUSDs/SM_Character_Glados_Mount_A.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3B0B5D5A80144CFA" (
            references = @./SubUSDs/SM_Character_Glados_Mount_B.usd@
        )
        {
            custom string nickname = "Change me"
            token visibility = "invisible"
        }

        over "mesh_2F9CAC3EB7AB7EF1" (
            references = @./SubUSDs/SM_Character_Glados_Mount_C.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7F2981301C00C7A3" (
            references = @./SubUSDs/SM_Character_Glados_Mount_D.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3E080AA2667F0740" (
            references = @./SubUSDs/SM_Furniture_Chair_Wooden_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_A7EB90B15B951767" (
            references = @./SubUSDs/SM_Furniture_Desk_B_1m_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3A910CB6691D40EE" (
            references = @./SubUSDs/SM_Furniture_Desk_B_Corner_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_AD06656B39E6A436" (
            references = @./SubUSDs/SM_Fixture_EmergencyLight.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6B528ACCCB75570D" (
            references = @./SubUSDs/SM_Fixture_PlatformPillars_C13.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D47A94F131D209EE" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BF8C1DA1F7449F02" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_81846602239FB35D" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E5E42110E36402E5" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D975395332D99402" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_CDAE4092004AEDA8" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_78EDA327AFF96CF2" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_763EE12BD3D7AD74" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_CA237B52848D62A5" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_DDA7493E5907251B" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_86A46256F09F59D0" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BCA54E73BF8E843F" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_DDED0A5F98CF8149" (
            references = @./SubUSDs/SM_Prop_WaterJug_A01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D4342CA2B9668505" (
            references = @./SubUSDs/SM_Prop_MilkCarton_A01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_05E0E4A0A5AFD70A" (
            references = @./SubUSDs/SM_Fixture_GeoReplace_Emissive_GladosFightB.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_EBF3CC7E1B5CB88D" (
            references = @./SubUSDs/SM_Fixture_GeoReplace_Emissive_GladosFight.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_46E5AEA4A1E7EE5F" (
            references = @./SubUSDs/SM_Fixture_SewerPipe_Elbow_A01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B5EB8D6F8812EF9F" (
            references = @./SubUSDs/SM_Fixture_Glados_Platform_Room.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C2876AA4495F3E1C" (
            references = @./SubUSDs/SM_Fixture_Glados_Platform_Upper.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C144241E1FA3D6B8" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_796E5848F0AD706F" (
            references = @./SubUSDs/SM_Fixture_FloorLight_B.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_B6B44FA2D5891833" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6EBBC894943FA7CA" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_9C85605B98B23BFA" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C167BD037B38C223" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_5A88A9D0A3CEE47B" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_64891485F589644D" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_D4401462CF89CC20" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_504FB1578F07B2DE" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_9499DDA545489421" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_D2219C1F3CE6253E" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_9433200B4EFE9568" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_32C1C6B000C9036A" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_1CE514FCE129FE96" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3269A2582FC49356" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_4CD203134F5CE50D" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0AF3C9510FB99B86" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_A36EAC19C8378F96" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0A2975077622359A" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D797E2A03980ABF5" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C07F1A908CB236DC" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_A0E58C14C23E99B7" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_FB8497F3346B1AFD" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_73824F010C9226F8" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_3E19B5F884FF1884" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_5F93EEC69D830AAF" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0B3D2515AD0FA0EE" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0FFFCA251EE21251" (
            references = @./SubUSDs/SM_Fixture_GeoReplace_Emissive_GladosFightB.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D07370896F3E4553" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_42826873F3EF7AC4" (
            references = @./SubUSDs/SM_Fixture_Outdoor_fallingRing.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_6F9061351A9C62F2" (
            references = @./SubUSDs/SM_Character_PortalGun_P3.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_291CA139026B02A3" (
            references = @./SubUSDs/SM_Prop_Padlock.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BD85D28FFDFF3889" (
            references = @./SubUSDs/SM_fixture_fence_gate_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D07C60EF0E383950" (
            references = @./SubUSDs/SM_fixture_fence_gateFrame_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_BE8035C529601F89" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_EE89151A5431D4B9" (
            references = @./SubUSDs/SM_fixture_fence_B01_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D041B27326D6F67C" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_E6929CE2EDE07868" (
            references = @./SubUSDs/SM_Fixture_Glados_Platform.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_EBF6B49CC23DFA5B" (
            references = @./SubUSDs/SM_Fixture_RoundFrame.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_23711AD5845B6D84" (
            references = @./SubUSDs/SM_Prop_Grp_RTX4090_ch19.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_620CE10CA449D918" (
            references = @./SubUSDs/RocketLight.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_E05F21307BCE3D4F" (
            references = @./SubUSDs/SM_Prop_WeightedSphere -Glow.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_EA475C5E5BB62619" (
            references = @./SubUSDs/SM_Character_Incinerator_A1_QR.usd@
        )
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"
        }

        over "mesh_5CA41972491CB5F8" (
            references = @./SubUSDs/SM_Prop_CinderBlock_A1_01.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_0DE9A836118DEEE4" (
            references = @./SubUSDs/SM_Fixture_GravGun_Stand.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_C4A1A70650505C9A" (
            references = @./SubUSDs/SM_Fixture_GravGun_Stand_LockRings.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_D96084A9F1FFFB72" (
            references = @./SubUSDs/SM_Fixture_Gunstand_Ring_D96084A9F1FFFB72.usd@
        )
        {
            token visibility = "invisible"
        }

        over "mesh_7BB743F264F72243" (
            references = @./SubUSDs/SM_Fixture_EMPTY_NULL.usd@
        )
        {
        }

        over "mesh_3463EDD2F4A17332" (
            references = @./SubUSDs/SM_Prop_Clipboard_C1_01.usd@
        )
        {
        }

        over "mesh_5D00C3CC39A78482" (
            references = @./SubUSDs/SM_Furniture_Chair_Wooden_02.usd@
        )
        {
        }

        over "mesh_501ADF7896CFA576" (
            references = None
        )
        {
        }

        over "mesh_3D4554D4710B6B67" (
            references = None
        )
        {
        }
    }

    over "lights"
    {
        over "light_F098DBA5455BCA1D" (
            references = @./SubUSDs/light_F098DBA5455BCA1D.usd@</light_F098DBA5455BCA1D>
        )
        {
            float intensity = 0
        }

        over "light_CF65F9345C27395C" (
            references = @./SubUSDs/light_CF65F9345C27395C.usd@</light_CF65F9345C27395C>
        )
        {
            float intensity = 0
        }

        over "light_8FCB263DE255FE90" (
            references = @./SubUSDs/light_8FCB263DE255FE90.usd@</light_8FCB263DE255FE90>
        )
        {
            float intensity = 0
        }

        over "light_ACC0FB2097FF4DF0" (
            references = @./SubUSDs/light_ACC0FB2097FF4DF0.usd@</light_ACC0FB2097FF4DF0>
        )
        {
            float intensity = 2500

            def Xform "FloorLights_01"
            {
                float3 xformOp:rotateXYZ = (52.204136, 28.024336, 13.941481)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-294.6457378962075, -62.19201495078494, -514.3448547768679)
                float3 xformOp:translate:pivot = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "FloorLight01" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (0.4, 0.75686276, 1)
                    float height = 100
                    float intensity = 30
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, 2.842170943040401e-14, 8.526512829121202e-14)
                    double3 xformOp:scale = (5.0813775062561035, 0.029999999329447746, 1)
                    double3 xformOp:translate = (127.7857375220817, 379.74670917815496, 0.20752842541023814)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight04" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (0.4, 0.75686276, 1)
                    float height = 100
                    float intensity = 30
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, 2.842170943040401e-14, 45)
                    double3 xformOp:scale = (1.6985806226730347, 0.028999999165534973, 1)
                    double3 xformOp:translate = (-191.02995535704832, 316.75713601801004, 0.9805581965246754)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight15" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (0.4, 0.75686276, 1)
                    float height = 100
                    float intensity = 30
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (184.60000275075436, 0, 90)
                    double3 xformOp:scale = (6.198397636413574, 0.03889208287000656, 0.7922307848930359)
                    double3 xformOp:translate = (507.21315426824225, -71.80000106990286, 0.2701631367457902)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight18" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (0.4, 0.75686276, 1)
                    float height = 100
                    float intensity = 30
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, 2.842170943040401e-14, -45)
                    double3 xformOp:scale = (1.7128759622573853, 0.02800000086426735, 1.1226569414138794)
                    double3 xformOp:translate = (446.90539786963376, 316.54778569650273, 1.199421683611058)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight19" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (0.4, 0.75686276, 1)
                    float height = 100
                    float intensity = 15
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, -2.842170943040401e-14, 90)
                    double3 xformOp:scale = (6.259180545806885, 0.028999999165534973, 1)
                    double3 xformOp:translate = (-252.4511570731153, -58.825081417807084, 1.0295318910349005)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight01_01" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (0.4, 0.75686276, 1)
                    float height = 100
                    float intensity = 30
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 750
                    double3 xformOp:rotateXYZ = (188, 2.842170943040401e-14, 8.526512829121202e-14)
                    double3 xformOp:scale = (1, 0.029999999329447746, 1)
                    double3 xformOp:translate = (128.59953, -380.43906767336074, 0.2075284254106376)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plasma_Catcher_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.2807203, 0.03474903)
                float intensity = 0
                float radius = 3
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-608.6132386086736, -232.30422409660616, -201.46755577464177)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FXLight_Static_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.31675136, 0.60720134, 0.98841697)
                float intensity = 50
                float radius = 5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (145.0625575987503, -238.93976730308157, -866.5932267896937)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FXLight_Static02_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.31675136, 0.60720134, 0.98841697)
                float intensity = 100
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-384.2911230820942, -370.85525833534984, -575.7935210747139)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Skylight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                uniform bool collection:shadowLink:includeRoot = 1
                color3f color = (0.68235296, 0.8627451, 1)
                float intensity = 0
                float radius = 5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-626.4026306845099, -466.4551026146159, 103.06795707722767)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Cubby_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9022525, 0.6795367)
                float height = 1
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 1
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (29.46390724182129, 29.46390724182129, 29.46390724182129)
                double3 xformOp:translate = (211.17225602348037, -205.55285194552766, -872.5363987809295)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Cubby_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9022525, 0.6795367)
                float height = 1
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 1
                double3 xformOp:rotateXYZ = (49.025997161865234, 44.23052215576172, -107.26654052734375)
                double3 xformOp:scale = (29.46390724182129, 29.46390724182129, 29.46390724182129)
                double3 xformOp:translate = (-491.36660435624333, -571.1568184712802, -436.7124425450058)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "ButtonLight_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.2807203, 0.03474903)
                float intensity = 300
                float radius = 4
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (56.70298212646168, 34.90562693970293, -442.8357152583213)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "ElevatorLight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68235296, 0.8627451, 1)
                float intensity = 500
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (0.6682032942771912, 0.6682032942771912, 0.6682032942771912)
                double3 xformOp:translate = (-987.6997898260116, -417.10624741771716, 6.995437808927022)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PlasmaLauncher_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.2807203, 0.03474903)
                float intensity = 0
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (256.4679829177335, 58.29110661612731, -523.9043805214984)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Plasma_Catcher_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.2807203, 0.03474903)
                float diffuse = 10
                float intensity = 0
                float radius = 5
                float shaping:cone:angle = 12
                float shaping:cone:softness = 1
                float shaping:focus = 11
                color3f shaping:focusTint = (1, 0.9453026, 0.6718147)
                float shaping:ies:angleScale = 1
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (139.0260009765625, 44.23052215576172, -107.26654052734375)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-210.5606318113101, -43.52074106050709, -535.7579184583072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.88768786, 0.5405406)
                float intensity = 0
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-894.3026912435952, -453.29677800868404, -131.65034701073353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68235296, 0.8627451, 1)
                float intensity = 500
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1034.5882953793912, -548.422604219852, -137.94545988643432)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68235296, 0.8627451, 1)
                float intensity = 500
                float radius = 3
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (0.8418186902999878, 0.8418186902999878, 0.8418186902999878)
                double3 xformOp:translate = (-1095.6718278690978, -577.1792219434268, -90.80149356745181)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_07" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68235296, 0.8627451, 1)
                float intensity = 500
                float radius = 3
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1054.5871781546234, -444.9997508011993, 43.94702789205337)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Lava_Up_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.09266406, 0)
                float height = 100
                float intensity = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 1
                float width = 100
                double3 xformOp:rotateXYZ = (-139.0260009765625, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (0.949999988079071, 5.700000286102295, 1)
                double3 xformOp:translate = (-301.8368689083334, -35.69821680019416, -928.3656333886721)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Lava_Up_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.09266406, 0)
                float height = 100
                float intensity = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (-139.0260009765625, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-381.9062037532898, 296.4694268039293, -430.53440412466256)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Lava_Up_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.09266406, 0)
                float height = 100
                float intensity = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (-139.0260009765625, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1.1950987577438354, 1.25, 1)
                double3 xformOp:translate = (-122.20074322173693, 302.0544498625543, -648.884875617657)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpperRoom_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                uniform bool collection:shadowLink:includeRoot = 1
                color3f color = (0.68235296, 0.8627451, 1)
                float intensity = 15000
                float radius = 3.5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (52.56583846958961, 11.53599028354671, -9.45851476866926)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpperRoom_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                uniform bool collection:shadowLink:includeRoot = 1
                color3f color = (0.68235296, 0.8627451, 1)
                float intensity = 15000
                float radius = 3.5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (147.51693273842795, 66.15124950279807, -40.54477378142445)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpperRoom_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                uniform bool collection:shadowLink:includeRoot = 1
                color3f color = (0.74517375, 0.96163046, 1)
                float intensity = 9000
                float radius = 5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-653.7972615366499, -403.7838100123431, 55.76586754832374)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpperRoom_07" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                uniform bool collection:shadowLink:includeRoot = 1
                color3f color = (0.55598456, 0.80814457, 1)
                float intensity = 25000
                float radius = 5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (130.9739990234375, -44.23052215576172, 72.73345947265625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-688.1825374268504, -429.5797267583091, 33.882550820487154)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_969C5E4983270204" (
            references = @./SubUSDs/light_969C5E4983270204.usd@</light_969C5E4983270204>
        )
        {
            float intensity = 0
        }

        over "light_DA761A7B7D554D16" (
            references = @./SubUSDs/light_DA761A7B7D554D16.usd@</light_DA761A7B7D554D16>
        )
        {
            float intensity = 0

            def RectLight "FloorLight01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.6779922, 0.39999998)
                float height = 20
                float intensity = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (175, 2.6279490261964418e-14, 8.51775518607295e-14)
                double3 xformOp:scale = (5.0813775062561035, 0.029999999329447746, 1)
                double3 xformOp:translate = (63.78573752208182, -132.25329082184498, -375.7924715745898)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight19" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.6779922, 0.39999998)
                float height = 20
                float intensity = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (175, -3.339582570986016e-14, 90)
                double3 xformOp:scale = (6.259180545806885, 0.028999999165534973, 1)
                double3 xformOp:translate = (-316.45115707311516, -570.825081417807, -374.9704681089651)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight01_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.6779922, 0.39999998)
                float height = 20
                float intensity = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 750
                double3 xformOp:rotateXYZ = (-172, 2.8367260458488607e-14, 8.565254760875898e-14)
                double3 xformOp:scale = (1, 0.029999999329447746, 1)
                double3 xformOp:translate = (64.5995300000001, -892.4390676733607, -375.7924715745893)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_BD3FD259A7479E9A" (
            references = @./SubUSDs/light_BD3FD259A7479E9A.usd@</light_BD3FD259A7479E9A>
        )
        {
            float intensity = 0
        }

        over "light_EB7C675AF06F8DEA" (
            references = @./SubUSDs/light_EB7C675AF06F8DEA.usd@</light_EB7C675AF06F8DEA>
        )
        {
        }

        over "light_28E1823E43F8CFDA" (
            references = @./SubUSDs/light_28E1823E43F8CFDA.usd@</light_28E1823E43F8CFDA>
        )
        {
            token visibility = "inherited"

            def RectLight "FloorLight05_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 410
                double3 xformOp:rotateXYZ = (2, 2.842170943040401e-14, -9.895978148001983e-29)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-461.36975896145987, 14.07295587420765, -233.3497007343671)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 250
                double3 xformOp:rotateXYZ = (-2, 2.842170943040401e-14, 9.895978148001983e-29)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-542.3998833496865, -782.121552006844, -235.23383563536999)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 785
                double3 xformOp:rotateXYZ = (2, 2.882377564167489e-14, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-669.9006057052682, -383.74309336109593, -239.1360088707516)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float height = 60
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -656, -30.462807405727744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_07" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 250
                double3 xformOp:rotateXYZ = (-160, 7.121689543155337e-15, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (512.5602559464484, -530.4961364958741, -519.2156122650625)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_08" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 250
                double3 xformOp:rotateXYZ = (-160, 7.0167091267055864e-15, -7.0167091267055864e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (512.5602559464484, -782.6921823443165, -518.592556338057)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_09" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 250
                double3 xformOp:rotateXYZ = (160, 1.5902774228222262e-14, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (637.4247094553355, -657.2970643986596, -518.5925563380599)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_10" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 6
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 125
                double3 xformOp:rotateXYZ = (0, 90, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (508.08202061287585, -926.4002069038497, -184.46184228849734)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_11" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 500
                double3 xformOp:rotateXYZ = (20, -1.5902773592947552e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (402.7011163567814, -654.0378286183022, 22.376630194745758)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_12" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 6
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 125
                double3 xformOp:rotateXYZ = (0, 90, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (508.0820206128903, -384.9185372736352, -184.46184228849728)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_13" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 110
                double3 xformOp:rotateXYZ = (20, 1.8510823110001515e-17, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (456.4334464271572, -909.1280352556486, 24.967826766789358)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05_14" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 2.5
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 110
                double3 xformOp:rotateXYZ = (20, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (456.43344642715397, -402.76880668261106, 23.13740363986051)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.1821039667873663, -656.6654579866347, -26.678349022550265)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_269A25BCB8AF4345" (
            references = @./SubUSDs/light_269A25BCB8AF4345.usd@</light_269A25BCB8AF4345>
        )
        {
            float intensity = 0
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
        }

        over "light_0745457E89A2B6E9" (
            references = @./SubUSDs/light_0745457E89A2B6E9.usd@</light_0745457E89A2B6E9>
        )
        {
        }

        over "light_9C0CC1F1CE6061D3" (
            references = @./SubUSDs/light_9C0CC1F1CE6061D3.usd@</light_9C0CC1F1CE6061D3>
        )
        {
            color3f color = (1, 0.3243243, 0)
            float diffuse = 2
            float intensity = 10000
            float radius = 7
        }

        over "light_36F91FA41B800C25" (
            references = @./SubUSDs/light_36F91FA41B800C25.usd@</light_36F91FA41B800C25>
        )
        {
            color3f color = (1, 0.27799225, 0)
            float diffuse = 2
            float intensity = 10000
            float radius = 4
        }

        over "light_C5FD59B45A962866" (
            references = @./SubUSDs/light_C5FD59B45A962866.usd@</light_C5FD59B45A962866>
        )
        {
            color3f color = (0.8272236, 1, 0.5289575)
            float intensity = 65000
            float radius = 4
            float shaping:cone:softness = 0.8
        }

        over "light_E4D24665D98121E2" (
            references = @./SubUSDs/light_E4D24665D98121E2.usd@</light_E4D24665D98121E2>
        )
        {
            color3f color = (0.57906115, 0.96138996, 0.90381914)
            float intensity = 8000
        }

        over "light_0FBF0D906770A019" (
            references = @./SubUSDs/light_0FBF0D906770A019.usd@</light_0FBF0D906770A019>
        )
        {
            color3f color = (0.6804373, 1, 0.8778505)
            float diffuse = 1.5
            float intensity = 30000
        }

        over "light_EDF9B59568FD1142" (
            references = @./SubUSDs/light_EDF9B59568FD1142.usd@</light_EDF9B59568FD1142>
        )
        {
            float intensity = 0
            float radius = 2
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1148, 337.0089954081269, -144.1072724804441)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def RectLight "RectLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.25595224, 0)
                float height = 30
                float intensity = 1000
                bool isProjector = 0
                bool light:enableCaustics = 0
                bool normalize = 0
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 30
                double3 xformOp:rotateXYZ = (41.77538584573233, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -12.803767877392772, 6.964226543828886)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_7564D7A18C7D6132" (
            references = @./SubUSDs/light_7564D7A18C7D6132.usd@</light_7564D7A18C7D6132>
        )
        {
            float intensity = 0
        }

        over "light_EFF4151BFD9CC84F" (
            references = @./SubUSDs/light_EFF4151BFD9CC84F.usd@</light_EFF4151BFD9CC84F>
        )
        {
            color3f color = (1, 0.8875065, 0.5366795)
            float diffuse = 2
            float exposure = 0
            float intensity = 15000
            float radius = 10
            float specular = 1
        }

        over "light_F07E6D55BDEC8617" (
            references = @./SubUSDs/light_F07E6D55BDEC8617.usd@</light_F07E6D55BDEC8617>
        )
        {
            float diffuse = 5
            float radius = 8
        }

        over "light_D0FE4713314A7CE2" (
            references = @./SubUSDs/light_D0FE4713314A7CE2.usd@</light_D0FE4713314A7CE2>
        )
        {
            float diffuse = 2
            float intensity = 45000
            float radius = 4
        }

        over "light_DABC79492FBD349E" (
            references = @./SubUSDs/light_DABC79492FBD349E.usd@</light_DABC79492FBD349E>
        )
        {
            float diffuse = 3
            float intensity = 45000
            float radius = 5
        }

        over "light_77DD23C567803430" (
            references = @./SubUSDs/light_77DD23C567803430.usd@</light_77DD23C567803430>
        )
        {
            float intensity = 0
        }

        over "light_E2E794EEE008B7A5" (
            references = @./SubUSDs/light_E2E794EEE008B7A5.usd@</light_E2E794EEE008B7A5>
        )
        {
            color3f color = (1, 0.9986341, 0.6462351)
            float diffuse = 8
            float intensity = 20000
        }

        over "light_A3F9A5CC3E5E1E7F" (
            references = @./SubUSDs/light_A3F9A5CC3E5E1E7F.usd@</light_A3F9A5CC3E5E1E7F>
        )
        {
            color3f color = (0.6804373, 1, 0.8334326)
        }

        over "light_C7DCD713B6252505" (
            references = @./SubUSDs/light_C7DCD713B6252505.usd@</light_C7DCD713B6252505>
        )
        {
            color3f color = (0.6804374, 1, 0.9148655)
            float diffuse = 2
            float intensity = 8000
        }

        over "light_D4FA83D6B511AF4F" (
            references = @./SubUSDs/light_D4FA83D6B511AF4F.usd@</light_D4FA83D6B511AF4F>
        )
        {
            float shaping:cone:softness = 0.2

            def Xform "Es01" (
                kind = "group"
            )
            {
                token visibility = "inherited"
                float3 xformOp:rotateXYZ = (150, 0.000003268942, 0.000012199858)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-544.0000724969265, 227.33824891137476, -422.23837071640986)
                float3 xformOp:translate:pivot = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def DiskLight "DiskLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.7655059, 0.49806952)
                    float diffuse = 4
                    float intensity = 300
                    float radius = 50
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1208.2101107203937, 169.26136450134487, 165.36068655187185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.82364607, 0.49806952)
                    float diffuse = 4
                    float intensity = 100
                    float radius = 50
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1788.9810725931736, 178.1314803433077, -67.00641104331095)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.82364607, 0.49806952)
                    float diffuse = 4
                    float intensity = 100
                    float radius = 50
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1795.8318055798366, -1041.0580859702327, -67.00641104331105)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.82364607, 0.49806952)
                    float diffuse = 4
                    float intensity = 150
                    float radius = 50
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1279.3150008965497, -1035.366421368304, -88.00641104331163)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_04" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.33333334, 0.15686275)
                    float intensity = 250
                    float radius = 50
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1531.3526375028714, 1161.970697050591, -59.5207994130483)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_05" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.33333334, 0.15686275)
                    float diffuse = 4
                    float intensity = 500
                    float radius = 15
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (-90, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-619.6592191042648, 1580.5129781004553, -427.37461371105877)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_06" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.33333334, 0.15686275)
                    float intensity = 300
                    float radius = 50
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-2292.3526375028714, 1312.970697050592, -314.5207994130482)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_07" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.33333334, 0.15686275)
                    float diffuse = 2
                    float intensity = 100
                    float radius = 18
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (-90, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1108.6473624971286, 699.9706970505931, -107.52079941304832)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_08" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.57915056, 0)
                    float diffuse = 2
                    float intensity = 100
                    float radius = 18
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (-90, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1172.6473624971286, 699.9706970505935, -107.52079941304828)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_09" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.33333334, 0.15686275)
                    float diffuse = 2
                    float intensity = 100
                    float radius = 18
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (-90, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1172.6473624971286, 699.9706970505937, -169.52079941304834)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_10" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.3337903, 0.15830117)
                    float diffuse = 2
                    float intensity = 100
                    float radius = 18
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (-90, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1108.6473624971286, 699.9706970505933, -169.52079941304837)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_11" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6588447, 0.23166025)
                    float diffuse = 1
                    float intensity = 20
                    float radius = 50
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (632.9810725931736, 789.1314803433077, 83.99358895668905)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_12" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6588447, 0.23166025)
                    float diffuse = 2
                    float intensity = 100
                    float radius = 40
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1151.0189274068264, 2623.131480343308, 9.993588956689052)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_13" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.33333334, 0.15686275)
                    float diffuse = 4
                    float intensity = 500
                    float radius = 15
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (-89.99999999999994, -2.842170943040401e-14, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1342.6592191042657, 2899.512978100457, -300.37461371105894)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.92057335, 0.6293436)
                    float diffuse = 2
                    float height = 35
                    float intensity = 100
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    float width = 60
                    double3 xformOp:rotateXYZ = (0, 0, 90.00000000000011)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1449.0000000000011, 2623.0000000000014, -420.99999999999875)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.9254226, 0.77220076)
                    float intensity = 10
                    float radius = 60
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (1216.3806079701253, 175.7003390234787, -177.0737476927966)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "light_43EB2C4E2DE30843" (
            references = @./SubUSDs/light_43EB2C4E2DE30843.usd@</light_43EB2C4E2DE30843>
        )
        {
            color3f color = (0.9685846, 1, 0.646235)
            float diffuse = 4
            float intensity = 3500
            float radius = 8
            token visibility = "inherited"
        }

        over "light_0733508A831E7405" (
            references = @./SubUSDs/light_0733508A831E7405.usd@</light_0733508A831E7405>
        )
        {
            color3f color = (0.9849753, 1, 0.646235)
            float diffuse = 4
            float intensity = 25000
            float radius = 6
            bool treatAsPoint = 0
            token visibility = "inherited"

            def DiskLight "DiskLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.93050194, 0.27129525, 0.14370687)
                float diffuse = 2
                float intensity = 150
                float radius = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (123.42552185058594, 31.09036636352539, -159.72572326660156)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-569.8039666331742, 124.87959842928069, -1186.6315338297152)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.92941177, 0.27058825, 0.14509805)
                float diffuse = 10
                float intensity = 200
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (92.25293731689453, 38.380802154541016, -175.72103881835938)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-287.31172267877633, 32.772091528802775, -965.0794196935875)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.92941177, 0.27058825, 0.14509805)
                float diffuse = 10
                float intensity = 200
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (92.25293731689453, 38.380802154541016, -175.72103881835938)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-386.5897171017178, 25.344003759168004, -1043.9318345928477)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.92941177, 0.27058825, 0.14509805)
                float diffuse = 10
                float intensity = 200
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (92.25293731689453, 38.380802154541016, -175.72103881835938)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-187.25201176431597, 40.258668178513744, -885.6061196376406)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.92941177, 0.27058825, 0.14509805)
                float diffuse = 2
                float intensity = 400
                float radius = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (78.86151885986328, 37.42041778564453, 156.3177947998047)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-502.0489739910735, 132.71577325670808, -1116.4470958384986)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.92941177, 0.27058825, 0.14509805)
                float diffuse = 2
                float intensity = 150
                float radius = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (-12.252935409545898, -38.380802154541016, 4.27895975112915)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-547.52580568966, 262.7116240753544, -639.7942488433338)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                float intensity = 1500
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (121.28238620907558, -123.17652501854388, 377.7075638518709)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                bool disableFogInteraction = 1
                float intensity = 20
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (46.73499795669886, 194.88530095212343, -537.6439324406481)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                bool disableFogInteraction = 1
                float intensity = 20
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (52.93041296776909, 47.04076949123714, -9.681233616241457)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_10" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.31423193, 0.05019307)
                float diffuse = 10
                float intensity = 200
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (-11.0214204788208, 29.515483856201172, -8.88152027130127)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (445.731062392159, -313.73542466188735, -293.07881219475166)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_11" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.31423193, 0.05019307)
                float diffuse = 10
                float intensity = 200
                float radius = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (-21.297788619995117, 30.910036087036133, -3.3167874813079834)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (412.6486824502302, -307.87102903302787, -251.97935962800727)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                bool disableFogInteraction = 1
                float intensity = 0
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-152.89511198435042, -64.11899684220418, -799.8453682280822)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 5
                float intensity = 20
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-876.6020326681349, -364.56166213830204, -1148.8532446781292)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_10" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.27340078, 0.1081081)
                float diffuse = 1
                bool disableFogInteraction = 1
                float intensity = 35
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (168.07755994983728, 391.83321460543755, 102.6152252959547)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_11" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.27340078, 0.1081081)
                float diffuse = 3
                bool disableFogInteraction = 1
                float intensity = 35
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (337.27595434998665, 665.2164491449429, -132.03792007846067)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 90
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 90
                double3 xformOp:rotateXYZ = (-165, -50, 165)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-507.25881973299505, 9.337115949745339, -438.49364210106364)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_16" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                bool disableFogInteraction = 1
                float intensity = 30
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (50.97495651245117, 9.576577186584473, 86.59947967529297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (44.13360092698133, -207.7722911164302, -462.3786240341977)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_CF7B7210D4872108" (
            references = @./SubUSDs/light_CF7B7210D4872108.usd@</light_CF7B7210D4872108>
        )
        {
            color3f color = (1, 0.23759335, 0.00772202)
            float diffuse = 2
            float intensity = 8000
            float radius = 8
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-384, -1161, -484)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_FFAD0A99195693BA" (
            references = @./SubUSDs/light_FFAD0A99195693BA.usd@</light_FFAD0A99195693BA>
        )
        {
            token visibility = "inherited"
        }

        over "light_BC42674751AC27FB" (
            references = @./SubUSDs/light_BC42674751AC27FB.usd@</light_BC42674751AC27FB>
        )
        {
            color3f color = (0.9439986, 1, 0.646235)
            float diffuse = 3
            float intensity = 20000
            float radius = 6
            token visibility = "inherited"
        }

        over "light_B246022FA82EE9E0" (
            references = @./SubUSDs/light_B246022FA82EE9E0.usd@</light_B246022FA82EE9E0>
        )
        {
            color3f color = (0.96038926, 1, 0.646235)
            float diffuse = 2
            float intensity = 20000
            token visibility = "inherited"

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                float intensity = 500
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (143.94761657714844, 54.46865463256836, 119.35765838623047)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (352.83745622242867, -909.8160356415644, 502.8266893682811)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_DAD1F6D49EEAB1A4" (
            references = @./SubUSDs/light_DAD1F6D49EEAB1A4.usd@</light_DAD1F6D49EEAB1A4>
        )
        {
            color3f color = (0.9685846, 1, 0.64623505)
            float diffuse = 3
            float intensity = 10000
            float radius = 8
            token visibility = "inherited"
        }

        over "light_043ADD042C76F71A" (
            references = @./SubUSDs/light_043ADD042C76F71A.usd@
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_8995D3EB5431E5EA" (
            references = @./SubUSDs/light_8995D3EB5431E5EA.usd@
        )
        {
            float diffuse = 2
            float exposure = 2
            float intensity = 20000
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (-3.9807281, -48.618725, -1.7987267)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1410.248007629367, -216.0000000000028, 822.5440063476519)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_EA2CBFD437EBE3F4" (
            references = @./SubUSDs/light_EA2CBFD437EBE3F4.usd@
        )
        {
            float intensity = 5000
        }

        over "light_657C6CB06961DB2F" (
            references = @./SubUSDs/light_657C6CB06961DB2F.usd@
        )
        {
            float intensity = 12000

            def SphereLight "OverheadLamp" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9475666, 0.8301158)
                float diffuse = 3
                float exposure = 2
                float intensity = 800
                float radius = 1
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (63.916175842285156, -27.00336265563965, -17.038347244262695)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-265.54996411444813, 61.83832458399149, -270.5493563133389)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (63.916175842285156, -27.00336265563965, -17.038347244262695)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-452.50668622157445, -482.02083092533985, -886.2250738237669)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_FEE02A4E77085202" (
            references = @./SubUSDs/light_FEE02A4E77085202.usd@
        )
        {
            float exposure = 0
            float intensity = 8000
            float radius = 5
            float shaping:cone:angle = 0
            float shaping:cone:softness = 0
            float shaping:focus = 0
            float3 xformOp:rotateZYX = (-30.963364, 58.358788, 17.58435)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-326, -813, 361)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.96081537, 0.88030887)
                float exposure = 1
                float intensity = 100
                float radius = 12
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (27.851341247558594, -15.658349990844727, 99.47368621826172)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-959.3057949369615, 617.0334360502061, -561.0523163754522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float exposure = 1
                float height = 125
                float intensity = 20
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 60
                double3 xformOp:rotateXYZ = (27.851341247558594, -15.658349990844727, 99.47368621826172)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (8.496414515276854, 3.142246352655775, -75.41634380749582)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_F424C68572F35572" (
            references = @./SubUSDs/light_F424C68572F35572.usd@
        )
        {
            float exposure = 0
            float intensity = 8000
            float radius = 5
        }

        over "light_4D2D893B1004BDBB" (
            references = @./SubUSDs/light_4D2D893B1004BDBB.usd@
        )
        {
            float intensity = 0
        }

        over "light_C286458FEC5D6522" (
            references = @./SubUSDs/light_C286458FEC5D6522.usd@
        )
        {
            float intensity = 25
        }

        over "light_CF70E0D634F7D719" (
            references = @./SubUSDs/light_CF70E0D634F7D719.usd@
        )
        {
            float intensity = 0
        }

        over "light_58FBD350568A7922" (
            references = @./SubUSDs/light_58FBD350568A7922.usd@</light_58FBD350568A7922>
        )
        {
            float exposure = 1
            float intensity = 15000
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)

            def RectLight "FloorLight03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 280
                double3 xformOp:rotateXYZ = (-20, 3.4546536653579096e-7, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (574.5216197086361, -330.3531862065179, 21.47903153496975)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 280
                double3 xformOp:rotateXYZ = (-20, 3.4546536653579096e-7, 89.99999980537666)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (729.885376361449, -330.3531862064626, 21.47903153499101)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 1140
                double3 xformOp:rotateXYZ = (20, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-805.6286369396826, 609.4000090807676, 727.0000108331442)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 310
                double3 xformOp:rotateXYZ = (20, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-69.46423890888326, -413.7335234347294, 727.3000108376145)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight11" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 450
                double3 xformOp:rotateXYZ = (160, 3.854021599636326e-7, 89.99999990678111)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-161.5137480228152, -316.91144604753936, -262.074956035428)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight12" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 222
                double3 xformOp:rotateXYZ = (160, 3.854021599636326e-7, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-52.46023928078796, -93.48548175031499, -262.07495603542816)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_4B2BCD8C5823F543" (
            references = @./SubUSDs/light_4B2BCD8C5823F543.usd@</light_4B2BCD8C5823F543>
        )
        {
            float exposure = 2
            float intensity = 6000
            float radius = 6
            token visibility = "inherited"
        }

        over "light_FFCB33955A5651A9" (
            references = @./SubUSDs/light_FFCB33955A5651A9.usd@</light_FFCB33955A5651A9>
        )
        {
            color3f color = (1, 0.9691542, 0.6804374)
            float diffuse = 2
            float exposure = 1.5
            float intensity = 15000
            token visibility = "inherited"
        }

        over "light_496B7B8FB2CA5470" (
            references = @./SubUSDs/light_496B7B8FB2CA5470.usd@</light_496B7B8FB2CA5470>
        )
        {
            float exposure = 2
            float intensity = 10000
            token visibility = "inherited"

            def RectLight "FloorLight02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 820
                double3 xformOp:rotateXYZ = (20, 3.9651553151998087e-7, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-333.60000717639923, -545.3192033805481, 151.40001083910465)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight14" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.75686276, 0.052600496, 0)
                float diffuse = 1
                float exposure = 1
                float height = 250
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-206.4632032429946, -636.7514631196022, -630.96252075131)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight13" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.75686276, 0.050980393, 0)
                float diffuse = 1
                float exposure = 1
                float height = 350
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 400
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-290.0188500277834, 70.43813792790706, -630.9625207513072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight10" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.75686276, 0.050980393, 0)
                float diffuse = 2
                float exposure = 1
                float height = 300
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 200
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1133.4836116644956, 70.43813792790706, -630.9625207513072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (20, 3.741156717751437e-7, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1229.6172347690376, 64.20023405734662, 151.00000000001364)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 1010
                double3 xformOp:rotateXYZ = (-20, 3.854021599636326e-7, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-82.50000343471766, -258.9860698585402, 151)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 880
                double3 xformOp:rotateXYZ = (-20, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-782.462911274868, -125.5289740827792, 151)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (-20, 3.4546536653579096e-7, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (237.77886893463256, -864.0493255852421, 151.13021450473002)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float exposure = 1
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 560
                double3 xformOp:rotateXYZ = (140, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-51.90219278838458, -957.5419142812581, 150.66321577214342)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_37F3F8FA1346DBDB" (
            references = @./SubUSDs/light_37F3F8FA1346DBDB.usd@</light_37F3F8FA1346DBDB>
        )
        {
            float exposure = 2
            float intensity = 2500
            token visibility = "inherited"
        }

        over "light_C4309851302946CA" (
            references = @./SubUSDs/light_C4309851302946CA.usd@</light_C4309851302946CA>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_3B76FF35F5D1120F" (
            references = @./SubUSDs/light_3B76FF35F5D1120F.usd@</light_3B76FF35F5D1120F>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_9763BA181F849EF6" (
            references = @./SubUSDs/light_9763BA181F849EF6.usd@</light_9763BA181F849EF6>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_213C02D206222CBC" (
            references = @./SubUSDs/light_213C02D206222CBC.usd@</light_213C02D206222CBC>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_76DDCE3B13EEE061" (
            references = @./SubUSDs/light_76DDCE3B13EEE061.usd@</light_76DDCE3B13EEE061>
        )
        {
            float exposure = 1
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_A1B4EC1157053AC7" (
            references = @./SubUSDs/light_A1B4EC1157053AC7.usd@</light_A1B4EC1157053AC7>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_7F32D0549B6D4971" (
            references = @./SubUSDs/light_7F32D0549B6D4971.usd@</light_7F32D0549B6D4971>
        )
        {
            token visibility = "inherited"
        }

        over "light_25A8F35779D6FAD6" (
            references = @./SubUSDs/light_25A8F35779D6FAD6.usd@</light_25A8F35779D6FAD6>
        )
        {
            token visibility = "inherited"
        }

        over "light_BFC7804EC5C9749A" (
            references = @./SubUSDs/light_BFC7804EC5C9749A.usd@</light_BFC7804EC5C9749A>
        )
        {
            token visibility = "inherited"
        }

        over "light_212CD34562DD88F3" (
            references = @./SubUSDs/light_212CD34562DD88F3.usd@</light_212CD34562DD88F3>
        )
        {
            token visibility = "inherited"
        }

        over "light_7CDF4DD19AA55AAE" (
            references = @./SubUSDs/light_7CDF4DD19AA55AAE.usd@</light_7CDF4DD19AA55AAE>
        )
        {
            color3f color = (1, 0.96349186, 0.88030887)
            float diffuse = 4
            float exposure = 1.5
            float intensity = 1000
            float radius = 8
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (-63.64437, 20.8531, 13.0289)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (180, 663, 120)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_DFBE4FECC591588E" (
            references = @./SubUSDs/light_DFBE4FECC591588E.usd@</light_DFBE4FECC591588E>
        )
        {
            float intensity = 0
        }

        over "light_3B0D5898BF206D38" (
            references = @./SubUSDs/light_3B0D5898BF206D38.usd@</light_3B0D5898BF206D38>
        )
        {
            token visibility = "inherited"
        }

        over "light_436417709D0227E3" (
            references = @./SubUSDs/light_436417709D0227E3.usd@</light_436417709D0227E3>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_55937643D10C8263" (
            references = @./SubUSDs/light_55937643D10C8263.usd@</light_55937643D10C8263>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_0F861F636E9E291E" (
            references = @./SubUSDs/light_0F861F636E9E291E.usd@</light_0F861F636E9E291E>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_C5B0DB952CC266AE" (
            references = @./SubUSDs/light_C5B0DB952CC266AE.usd@</light_C5B0DB952CC266AE>
        )
        {
            token visibility = "inherited"
        }

        over "light_137E6F8802D1E7E5" (
            references = @./SubUSDs/light_137E6F8802D1E7E5.usd@</light_137E6F8802D1E7E5>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_788AD73761466497" (
            references = @./SubUSDs/light_788AD73761466497.usd@</light_788AD73761466497>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_562CCDA5B52EE5CA" (
            references = @./SubUSDs/light_562CCDA5B52EE5CA.usd@</light_562CCDA5B52EE5CA>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_D4EB11E090F63911" (
            references = @./SubUSDs/light_D4EB11E090F63911.usd@</light_D4EB11E090F63911>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_363F866DEB07AA1E" (
            references = @./SubUSDs/light_363F866DEB07AA1E.usd@</light_363F866DEB07AA1E>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_329D4EDE976CC278" (
            references = @./SubUSDs/light_329D4EDE976CC278.usd@</light_329D4EDE976CC278>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_C32F3D24E6B64183" (
            references = @./SubUSDs/light_C32F3D24E6B64183.usd@</light_C32F3D24E6B64183>
        )
        {
            color3f color = (0.6804373, 0.9296715, 1)
            float intensity = 50
            token visibility = "inherited"
        }

        over "light_05D58CB522032546" (
            references = @./SubUSDs/light_05D58CB522032546.usd@</light_05D58CB522032546>
        )
        {
            token visibility = "inherited"

            def RectLight "FloorLight2_66" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (-75.69890594482422, 37.037689208984375, -155.0719757080078)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-225.0710832883679, -109.0352524223905, -109.85889083523944)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_65" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 620
                double3 xformOp:rotateXYZ = (-14.873321533203125, -63.15052795410156, 86.84778594970703)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (340.79241617505716, -209.6903726082499, -361.53047837275494)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_64" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 500
                double3 xformOp:rotateXYZ = (-25.126678466796875, 63.15052795410156, -93.15221405029297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-295.5410361062049, -253.58240909799986, -391.4941778463585)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_63" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 500
                double3 xformOp:rotateXYZ = (-83.24296569824219, -2.3129940032958984, -178.57571411132812)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (97.10720265346129, -72.14197433640823, -66.86009274971912)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_54" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 150
                double3 xformOp:rotateXYZ = (154.8733367919922, 63.15052795410156, -93.15220642089844)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.9597618202890317, -157.63538257997186, -862.5676982994886)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_53" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 210
                double3 xformOp:rotateXYZ = (96.75703430175781, -2.3129940032958984, -178.57571411132812)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-131.7504155898216, -310.85511876495747, -1154.7231118160394)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_52" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 400
                double3 xformOp:rotateXYZ = (165.12667846679688, -63.15052795410156, 86.84778594970703)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-255.69604440446682, -221.2100959049617, -965.8049316845668)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_48" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 620
                double3 xformOp:rotateXYZ = (43.24296569824219, 2.3129940032958984, 1.4242793321609497)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (13.386649670411884, -360.68266068637377, -631.6283522066988)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_B8179E3F7B3CDFFD" (
            references = @./SubUSDs/light_B8179E3F7B3CDFFD.usd@</light_B8179E3F7B3CDFFD>
        )
        {
            color3f color = (1, 0.98472005, 0.8416988)
            float intensity = 20000
            token visibility = "inherited"
        }

        over "light_99A61E951BE059D9" (
            references = @./SubUSDs/light_99A61E951BE059D9.usd@</light_99A61E951BE059D9>
        )
        {
            color3f color = (0.98841697, 0.9488691, 0.82050055)
            float intensity = 1200
            token visibility = "inherited"

            def RectLight "FloorLight2_46" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 350
                double3 xformOp:rotateXYZ = (-66.49703979492188, 17.957256317138672, 172.233642578125)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-344.5101964565127, 44.19399300491374, -275.6527949850067)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_47" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 350
                double3 xformOp:rotateXYZ = (26.49704360961914, -17.957256317138672, -7.766358375549316)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-328.6329724972822, -43.78120282206704, -360.87472801429817)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_51" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 220
                double3 xformOp:rotateXYZ = (134.78892517089844, -43.630523681640625, 100.23027038574219)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-21.920409524710806, 171.46954360582492, -425.8310081950476)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_50" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 285
                double3 xformOp:rotateXYZ = (-153.50296020507812, -17.957256317138672, -7.766358375549316)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (98.59185666402192, 237.41787502794955, -299.6059459184928)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_49" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 285
                double3 xformOp:rotateXYZ = (113.50296020507812, 17.957256317138672, 172.233642578125)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (130.93143225430757, 58.22530944953899, -473.1905191554906)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_AC81045069F08D62" (
            references = @./SubUSDs/light_AC81045069F08D62.usd@</light_AC81045069F08D62>
        )
        {
            float intensity = 2000
            token visibility = "inherited"
        }

        over "light_097A275F0B88EB5C" (
            references = @./SubUSDs/light_097A275F0B88EB5C.usd@</light_097A275F0B88EB5C>
        )
        {
            token visibility = "inherited"
        }

        over "light_6BB17A2208692041" (
            references = @./SubUSDs/light_6BB17A2208692041.usd@</light_6BB17A2208692041>
        )
        {
            token visibility = "inherited"
        }

        over "light_A0572F675E2F167E" (
            references = @./SubUSDs/light_A0572F675E2F167E.usd@</light_A0572F675E2F167E>
        )
        {
            color3f color = (1, 0.9843137, 0.84313726)
            float intensity = 6500

            def RectLight "FloorLight2_46" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (164.5, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-962.3263332119536, -225.41417284940871, -262.09866712607106)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_47" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (164.5, 6.015051161962961e-15, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-962.3263332119536, -477.967057527235, -262.0986671260711)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_48" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (164.5, 3.1805547185895103e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-834.2091238699552, -350.32194863823474, -262.0986671260713)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_3541B5945E4E9405" (
            references = @./SubUSDs/light_3541B5945E4E9405.usd@</light_3541B5945E4E9405>
        )
        {
            float intensity = 0
        }

        over "light_690B84F5BEFC4558" (
            references = @./SubUSDs/light_690B84F5BEFC4558.usd@</light_690B84F5BEFC4558>
        )
        {
            float intensity = 0
        }

        over "light_E3ED400DD6F285F6" (
            references = @./SubUSDs/light_E3ED400DD6F285F6.usd@</light_E3ED400DD6F285F6>
        )
        {
            float intensity = 0
        }

        over "light_EB8C9197B38BE9BA" (
            references = @./SubUSDs/light_EB8C9197B38BE9BA.usd@</light_EB8C9197B38BE9BA>
        )
        {
            float intensity = 0
        }

        over "light_AB27C51BC664484D" (
            references = @./SubUSDs/light_AB27C51BC664484D.usd@</light_AB27C51BC664484D>
        )
        {
            float intensity = 0
        }

        over "light_31AB468B5FD0A370" (
            references = @./SubUSDs/light_31AB468B5FD0A370.usd@</light_31AB468B5FD0A370>
        )
        {
            float intensity = 0
        }

        over "light_EA8579A5996B724E" (
            references = @./SubUSDs/light_EA8579A5996B724E.usd@</light_EA8579A5996B724E>
        )
        {
            color3f color = (0.996139, 0.9487674, 0.7730654)
            float exposure = 0
            float intensity = 15000

            def RectLight "FloorLight2_74" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 2.1
                float intensity = 115
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 165
                double3 xformOp:rotateXYZ = (-33.54664611816406, -53.09890365600586, 141.79244995117188)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (429.63970606394014, -89.95237692223668, -195.44479954327676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_73" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 115
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 420
                double3 xformOp:rotateXYZ = (-68.71955108642578, -27.775209426879883, -167.22509765625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (193.99305601852666, -97.04030461392506, -15.287983362202795)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_72" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 115
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 420
                double3 xformOp:rotateXYZ = (28.719554901123047, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (69.63072350864263, -555.2521541928409, -437.9378933014665)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_71" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 2.1
                float intensity = 115
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 165
                double3 xformOp:rotateXYZ = (-73.8719711303711, 8.085124015808105, -139.11326599121094)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (328.9598493492306, -452.1618727855225, -527.5393312657725)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_70" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 2
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 385
                double3 xformOp:rotateXYZ = (18.601043701171875, -41.675018310546875, 74.81526184082031)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (430.03005742155847, -258.5553971422638, -387.69624945509486)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_69" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 115
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (28.719554901123047, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (501.92157387353427, -284.31887157734354, -474.43477647568193)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_68" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 115
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (-68.71955108642578, -27.775209426879883, -167.22509765625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (526.2318185426705, -194.74800273990365, -391.8155258340513)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_08" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (-131.2804412841797, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (177.62175057173204, 175.0664653970058, -782.3832667987106)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (-131.2804412841797, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-520.9740460672442, -140.62119026127777, -584.2679174003889)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (-131.2804412841797, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-493.3430047386746, -38.81487722876011, -490.3628185384016)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_07" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (-131.2804412841797, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (22.07295560209934, 139.7982731471568, -698.3782457903411)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (-131.2804412841797, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-429.68127327435957, 195.74617621032314, -274.00610885838796)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (-131.2804412841797, 27.775209426879883, 12.774909019470215)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-461.730180591556, 77.66227731249069, -382.92548595505264)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_2BD4968BFE5BFEC5" (
            references = @./SubUSDs/light_2BD4968BFE5BFEC5.usd@</light_2BD4968BFE5BFEC5>
        )
        {
            color3f color = (1, 0.9370758, 0.7567568)
            float exposure = 0
            float intensity = 25000
        }

        over "light_393D11A6D8C45725" (
            references = @./SubUSDs/light_393D11A6D8C45725.usd@</light_393D11A6D8C45725>
        )
        {
            float intensity = 2500
        }

        over "light_93F5427D515C57C1" (
            references = @./SubUSDs/light_93F5427D515C57C1.usd@</light_93F5427D515C57C1>
        )
        {
            float intensity = 5000

            def RectLight "SkylightExit_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-352.7149508714316, -319.87097909676555, -60.99819156704217)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-90, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (352.1778192056854, -55.57223443904638, -215.60468611313576)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (144.6369320784811, -55.57223443904638, -328.1923288457774)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (127.84387922442954, -221.3899398147862, 259.89037898739684)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (448.10487787217517, -350.1103427073954, -624.3103136054939)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_F0AB1DD13CD601FD" (
            references = @./SubUSDs/light_F0AB1DD13CD601FD.usd@</light_F0AB1DD13CD601FD>
        )
        {
            float intensity = 2500
        }

        over "light_8E4E468A450619AE" (
            references = @./SubUSDs/light_8E4E468A450619AE.usd@</light_8E4E468A450619AE>
        )
        {
            color3f color = (1, 0.9463484, 0.77220076)
            float intensity = 31000
        }

        over "light_D505A211DB57DBB7" (
            references = @./SubUSDs/light_D505A211DB57DBB7.usd@</light_D505A211DB57DBB7>
        )
        {
            color3f color = (1, 0.962016, 0.79922783)
            float exposure = 1
            float intensity = 12000
        }

        over "light_1EA36FDDC6428AF9" (
            references = @./SubUSDs/light_1EA36FDDC6428AF9.usd@</light_1EA36FDDC6428AF9>
        )
        {
            color3f color = (0.3822394, 0.7373607, 1)
            float exposure = 3
            float intensity = 6000
            float radius = 1

            def RectLight "SkylightExit_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-90, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (287.636932078482, 525.4277655609542, -600.1923288457772)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float exposure = 2
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, 0, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (510.6369320784819, 160.42776556095424, -455.1923288457771)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_07" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float exposure = 2
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (176.63693207848212, 18.427765560954214, -360.19232884577696)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_08" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float exposure = 2
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-80.36306792151771, 33.42776556095427, -296.19232884577696)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_09" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float exposure = 2
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-239.36306792151774, 33.4277655609543, -360.80000537633896)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_10" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (3.7398847241715885, 240.58012910814105, -600.1923288457772)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_12EBE4AF34263587" (
            references = @./SubUSDs/light_12EBE4AF34263587.usd@</light_12EBE4AF34263587>
        )
        {
            color3f color = (0.38996136, 0.7406475, 1)
            float exposure = 2
            float intensity = 2500
            float radius = 2

            def RectLight "SkylightExit_11" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, -6.149296609692101e-7, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (367.3419820220415, -477.0842161315959, -145.2063936854732)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_12" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-90, 8.46991696749769e-15, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (223.30183377923595, -474.11597037519107, -32.795178949497426)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_13" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9104956, 0.7065637)
                float exposure = 2
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1950.92430956022, -206.6267464477129, 123.750777521504)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_EF819DD639248B2C" (
            references = @./SubUSDs/light_EF819DD639248B2C.usd@</light_EF819DD639248B2C>
        )
        {
            float intensity = 100
        }

        over "light_56695EAE8CD26A26" (
            references = @./SubUSDs/light_56695EAE8CD26A26.usd@</light_56695EAE8CD26A26>
        )
        {
            float exposure = 1
            float intensity = 5000
            float radius = 2
        }

        over "light_2719F02921DD5DC3" (
            references = @./SubUSDs/light_2719F02921DD5DC3.usd@</light_2719F02921DD5DC3>
        )
        {
            float exposure = 3
        }

        over "light_95E30834A36C380D" (
            references = @./SubUSDs/light_95E30834A36C380D.usd@</light_95E30834A36C380D>
        )
        {
            float intensity = 0
        }

        over "light_90EBB988272BEB73" (
            references = @./SubUSDs/light_90EBB988272BEB73.usd@</light_90EBB988272BEB73>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_A9CA99B686AF8D62" (
            references = @./SubUSDs/light_A9CA99B686AF8D62.usd@</light_A9CA99B686AF8D62>
        )
        {
            float intensity = 600
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-99.88269844681174, -1120, 935.783267394291)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_C6A3E3B5A5C4D6F0" (
            references = @./SubUSDs/light_C6A3E3B5A5C4D6F0.usd@</light_C6A3E3B5A5C4D6F0>
        )
        {
            token visibility = "inherited"
        }

        over "light_31F4BE750E14F1E5" (
            references = @./SubUSDs/light_31F4BE750E14F1E5.usd@</light_31F4BE750E14F1E5>
        )
        {
            token visibility = "inherited"
        }

        over "light_8E8F2D50891F552F" (
            references = @./SubUSDs/light_8E8F2D50891F552F.usd@</light_8E8F2D50891F552F>
        )
        {
            token visibility = "inherited"
        }

        over "light_B918337A8352AF01" (
            references = @./SubUSDs/light_B918337A8352AF01.usd@</light_B918337A8352AF01>
        )
        {
            token visibility = "inherited"
        }

        over "light_AA5EC6966534547C" (
            references = @./SubUSDs/light_AA5EC6966534547C.usd@</light_AA5EC6966534547C>
        )
        {
            token visibility = "inherited"
        }

        over "light_8D27DB019C32D376" (
            references = @./SubUSDs/light_8D27DB019C32D376.usd@</light_8D27DB019C32D376>
        )
        {
            token visibility = "inherited"
        }

        over "light_08CB48513E3A2FE1" (
            references = @./SubUSDs/light_08CB48513E3A2FE1.usd@</light_08CB48513E3A2FE1>
        )
        {
            token visibility = "inherited"
        }

        over "light_7EE7DCCD2CE8A315" (
            references = @./SubUSDs/light_7EE7DCCD2CE8A315.usd@</light_7EE7DCCD2CE8A315>
        )
        {
            token visibility = "inherited"
        }

        over "light_7EC789E40932E39A" (
            references = @./SubUSDs/light_7EC789E40932E39A.usd@</light_7EC789E40932E39A>
        )
        {
            token visibility = "inherited"
        }

        over "light_E861261B0401CD37" (
            references = @./SubUSDs/light_E861261B0401CD37.usd@</light_E861261B0401CD37>
        )
        {
            token visibility = "inherited"
        }

        over "light_3125C687924366DC" (
            references = @./SubUSDs/light_3125C687924366DC.usd@</light_3125C687924366DC>
        )
        {
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-352, -1128.0699462890625, 909.6434977420698)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_18EF2E3E4B39FAA5" (
            references = @./SubUSDs/light_18EF2E3E4B39FAA5.usd@</light_18EF2E3E4B39FAA5>
        )
        {
            token visibility = "inherited"
        }

        over "light_B98AE93031F1E02A" (
            references = @./SubUSDs/light_B98AE93031F1E02A.usd@</light_B98AE93031F1E02A>
        )
        {
            token visibility = "inherited"
        }

        over "light_0A8E84B5FC8E1C31" (
            references = @./SubUSDs/light_0A8E84B5FC8E1C31.usd@</light_0A8E84B5FC8E1C31>
        )
        {
            token visibility = "inherited"
        }

        over "light_C54AF81B87321F9C" (
            references = @./SubUSDs/light_C54AF81B87321F9C.usd@</light_C54AF81B87321F9C>
        )
        {
            token visibility = "inherited"

            def RectLight "SkylightExit_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (607.387332217904, 239.70915475650418, -144.5171591155323)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (160.29218799964758, -187.7666889239938, -401.06764861212366)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, 4.297291638337289e-15, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (383.89518470360036, 958.7811478973159, 366.98602381357864)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, 4.297291638337289e-15, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (287.97568462431934, 622.2417515799821, -176.97579661368547)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_54775EA7772AD7D3" (
            references = @./SubUSDs/light_54775EA7772AD7D3.usd@</light_54775EA7772AD7D3>
        )
        {
            token visibility = "inherited"
        }

        over "light_57B2704C333E3D2C" (
            references = @./SubUSDs/light_57B2704C333E3D2C.usd@</light_57B2704C333E3D2C>
        )
        {
            float intensity = 200
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-600, -384, 326.4028218381418)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_3EC044B582142102" (
            references = @./SubUSDs/light_3EC044B582142102.usd@</light_3EC044B582142102>
        )
        {
            token visibility = "invisible"
        }

        over "light_BF8BCB50790FF3AE" (
            references = @./SubUSDs/light_BF8BCB50790FF3AE.usd@</light_BF8BCB50790FF3AE>
        )
        {
            float intensity = 0
        }

        over "light_B6375CBBA8C7306F" (
            references = @./SubUSDs/light_B6375CBBA8C7306F.usd@</light_B6375CBBA8C7306F>
        )
        {
            float intensity = 0
        }

        over "light_3A2B22526FFF5372" (
            references = @./SubUSDs/light_3A2B22526FFF5372.usd@</light_3A2B22526FFF5372>
        )
        {
            float intensity = 0
        }

        over "light_02179A032FF29801" (
            references = @./SubUSDs/light_02179A032FF29801.usd@</light_02179A032FF29801>
        )
        {
            float exposure = 1
        }

        over "light_C43270A0F4DFB09F" (
            references = @./SubUSDs/light_C43270A0F4DFB09F.usd@</light_C43270A0F4DFB09F>
        )
        {
            token visibility = "invisible"
        }

        over "light_A26D70067ECB73BF" (
            references = @./SubUSDs/light_A26D70067ECB73BF.usd@</light_A26D70067ECB73BF>
        )
        {
            float intensity = 0
        }

        over "light_D2D7B2780AE5A393" (
            references = @./SubUSDs/light_D2D7B2780AE5A393.usd@</light_D2D7B2780AE5A393>
        )
        {
            float exposure = 2
            float intensity = 1499.2023
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (428.11945914827055, 1232, 65.21099853515625)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_5D367EA8C12BFCF5" (
            references = @./SubUSDs/light_5D367EA8C12BFCF5.usd@</light_5D367EA8C12BFCF5>
        )
        {
            float exposure = 2
        }

        over "light_903ACCD0944147CD" (
            references = @./SubUSDs/light_903ACCD0944147CD.usd@</light_903ACCD0944147CD>
        )
        {
            float exposure = 1
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-384, -704, -95.97724116969124)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_333D3F35D1421AE0" (
            references = @./SubUSDs/light_333D3F35D1421AE0.usd@</light_333D3F35D1421AE0>
        )
        {
            float exposure = 1
            float intensity = 700
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-203.63364442032253, -1214.2324366343576, 200.30253845728015)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def RectLight "FloorLight2_82" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 125
                double3 xformOp:rotateXYZ = (-20, 7.730563189542212e-16, 1.5090593933890398e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-693.9604473360966, 59.7244887488107, -57.18760710460066)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_81" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 155
                double3 xformOp:rotateXYZ = (-19.999996185302734, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-547.7681499306216, -195.88467648533515, -57.18760710459702)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_80" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (-20, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-630.8682986877665, -67.2119529301649, -57.187607104591734)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_78" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 500
                double3 xformOp:rotateXYZ = (-20, 0.000002998594027303625, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-753.897709714332, -192.66098205435446, -57.18760710459486)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_79" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 285
                double3 xformOp:rotateXYZ = (-20, 7.730563189542212e-16, 1.5090593933890398e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-610.9375175463405, -447.40867114186267, -57.18760710459736)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_71" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 500
                double3 xformOp:rotateXYZ = (-20, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-181.93086752005433, -771.7285496811999, -187.6049195825669)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_70" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 630
                double3 xformOp:rotateXYZ = (-20, 0.000002998594027303625, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-305.8853822702442, -832.2308606496738, -187.6049195825667)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_68" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (-20, 7.730563189542212e-16, 1.5090593933890398e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-214.66556982739735, -1151.3697350684872, -187.60491958256634)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_69" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 65
                double3 xformOp:rotateXYZ = (-19.999996185302734, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-151.00000420723165, -1028.2103756522567, -187.60491958256668)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_D93E1C749EF86B70" (
            references = @./SubUSDs/light_D93E1C749EF86B70.usd@</light_D93E1C749EF86B70>
        )
        {
            float exposure = 2
        }

        over "light_E626475D9B20FA4C" (
            references = @./SubUSDs/light_E626475D9B20FA4C.usd@</light_E626475D9B20FA4C>
        )
        {
            float exposure = 1
        }

        over "light_DAB3FCCACEBB5E9C" (
            references = @./SubUSDs/light_DAB3FCCACEBB5E9C.usd@</light_DAB3FCCACEBB5E9C>
        )
        {
            def RectLight "FloorLight2_69" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 365
                double3 xformOp:rotateXYZ = (0, 180, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-93.70254249329025, 1002.129538055729, 28.85164980072966)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_70" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (2.9000000432133675, 180, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-93.81601275281537, 363.13704034126187, 26.631499197523397)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_71" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 200
                double3 xformOp:rotateXYZ = (0, 180, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-197.16991467425225, 809.8725762333086, 28.851649800729888)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_72" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (0, 180, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-222.50924029277644, 558.2600423996982, 28.85164980073563)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_73" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (0, 180, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-349.8097677387111, 684.129538055729, 28.851649800729774)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_74" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 240
                double3 xformOp:rotateXYZ = (0, 180, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (228.6000013947499, 298.07645053549095, 28.851649800729604)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_75" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 360
                double3 xformOp:rotateXYZ = (0, 180, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (123.60000139473857, 109.84364849141247, 28.85164980072966)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_76" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (0, 180, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (430.6000013947484, -17.64680853413779, 28.85164980072966)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_77" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (0, 180, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (509.67774062989747, 201.1295380557391, 29.076092233300642)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_78" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (0, 180, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (430.6000013947484, 425.6607197753555, 28.804811232453403)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_79" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (0, 180, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (354.4000052809715, 201.1295380557326, 28.266901972763605)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_91" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 2
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-2.842170943040401e-14, 2.1511193388949152, 45.000000000000625)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1087.4125235572235, -146.30856125565356, -239.82141539275568)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 7.0167091267055864e-15, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (768.4548805811539, -52.2803566347518, 82.17198910926095)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_09" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (638.8438792244295, 491.6100601852138, 273.89037898739684)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_09" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, 8.46991696749769e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (556.9756846243193, 1339.241751579982, -188.38680735587303)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "SkylightExit_10" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, 8.46991696749769e-15, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (305.97568462431934, 604.2417515799821, -189.38680735587303)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_110" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 3
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1725.595203226678, -177.91091878304496, -249.58440233803844)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_1A7C4083E157198B" (
            references = @./SubUSDs/light_1A7C4083E157198B.usd@</light_1A7C4083E157198B>
        )
        {
            float intensity = 0
        }

        over "light_4FD9B83E6177D3B7" (
            references = @./SubUSDs/light_4FD9B83E6177D3B7.usd@</light_4FD9B83E6177D3B7>
        )
        {
            float intensity = 0
        }

        over "light_AC8307313C854DFF" (
            references = @./SubUSDs/light_AC8307313C854DFF.usd@</light_AC8307313C854DFF>
        )
        {
            float intensity = 0
            float3 xformOp:rotateZYX = (180, -7.0167096e-15, 180)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1217, -798, -16)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_DCA0A8FD07DD9855" (
            references = @./SubUSDs/light_DCA0A8FD07DD9855.usd@</light_DCA0A8FD07DD9855>
        )
        {
            float intensity = 0
        }

        over "light_4E69A1228AC43810" (
            references = @./SubUSDs/light_4E69A1228AC43810.usd@</light_4E69A1228AC43810>
        )
        {
            float exposure = 2
            float intensity = 5000
        }

        over "light_8DE08FF26F79A220" (
            references = @./SubUSDs/light_8DE08FF26F79A220.usd@</light_8DE08FF26F79A220>
        )
        {
            float exposure = 2
            float intensity = 2000

            def RectLight "FloorLight2_89" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, -0, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-306.2498997875455, -520.6865880863165, -203.5974487706829)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_106" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-753.6999900564551, -382.0009117720164, -205.58040453529878)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_107" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (0, 2.842170943040401e-14, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-877.8785161259973, -255.40000645816883, -205.58040453529875)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_108" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (0, 2.842170943040401e-14, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-626.3180215830425, -256.4000064581547, -205.58040453529873)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_ED75BC4A068F0D61" (
            references = @./SubUSDs/light_ED75BC4A068F0D61.usd@</light_ED75BC4A068F0D61>
        )
        {
            float exposure = 2
            float intensity = 2000
        }

        over "light_6718BBFD848A51EA" (
            references = @./SubUSDs/light_6718BBFD848A51EA.usd@</light_6718BBFD848A51EA>
        )
        {
            float exposure = 3
            float intensity = 1100

            def RectLight "FloorLight2_88" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (180, 4.297291638337289e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (381.9166538384202, -402.49998412281275, 73.80850116374717)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_87" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (180, 4.297291638337289e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (253.86482371856164, -132.49998412281275, 73.62005220583382)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_86" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 400
                double3 xformOp:rotateXYZ = (180, 7.0167091267055864e-15, -7.0167091267055864e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (129.60000139474823, -480.97636525563667, 74.43785721567775)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_85" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 530
                double3 xformOp:rotateXYZ = (180, 7.0167091267055864e-15, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.600001394748233, -173.8825138491568, 502.7659529259281)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_90" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 2.5
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (180, 7.510167651886366e-15, 135)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (320.7051354334353, -261.7948682546041, 74.95676668314906)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_C068AC8AC837DFE5" (
            references = @./SubUSDs/light_C068AC8AC837DFE5.usd@</light_C068AC8AC837DFE5>
        )
        {
            float diffuse = 20
            float exposure = 0
            float intensity = 20000
            float radius = 6
            float shaping:cone:angle = 65
            float shaping:cone:softness = 1
            float3 xformOp:rotateZYX = (30.789728, 41.56077, -11.930104)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (40.50202932254903, -693.4628800523991, 359.7690637743517)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_E12CE652CD9445F3" (
            references = @./SubUSDs/light_E12CE652CD9445F3.usd@</light_E12CE652CD9445F3>
        )
        {
            float intensity = 500
            float specular = 0
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (8, -128, 350.2820129394531)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def RectLight "skylight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 60
                float intensity = 5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-180, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-183.2149535442612, 225.51978573987293, 2.7738541487934185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float diffuse = 3
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.2
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-180, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-183.4410565719345, 336.0699839999048, 210.03484527235378)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float diffuse = 2
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.2
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-180, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-183.4410565719555, 528.1054629282139, 177.98666767292332)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-180, 90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (935.7094717870834, 431.9663365650112, 497.9653708255672)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-90, 90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2648.767434827329, 851.5666903991237, 962.2961371455683)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 250
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (180, 90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2918.825053832012, 1040.0091343308745, 882.0418277080626)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_07" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2071.5922997343037, 543.8383053321614, 1481.7338938436314)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_08" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1495.2227771839962, 542.2264580353649, 1481.7338938436314)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_09" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1367.8084559843812, 992.5558198197384, 1481.7338938436314)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_10" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1689.043428817598, 1181.824433777072, 1481.7338938436314)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_11" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2009.355976524213, 1311.8306857556572, 1481.7338938436314)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_12" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.23250991, 0.057915032)
                float height = 120
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2681.225072048933, 1024.3911559395278, 1567.9081797485667)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_13" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 300
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1046.4365865568411, 1054.6523796532872, 1100.2442667350006)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_14" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 300
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1046.4365865568411, 800.0715653336947, 1100.2442667350006)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_15" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-232.80173990536255, 769.6269793026431, 928.9651871690419)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_16" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 250
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-423.4344303017841, 769.6269793026431, 928.9651871690419)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_17" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-617.759631730213, 769.6269793026431, 928.9651871690419)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_18" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 120
                float intensity = 230
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.5
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1095.8641063207938, 194.23533477718257, 3349.079264559375)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_19" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 120
                float intensity = 300
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1158.9818320731595, -254.27702860787093, 3349.079264559375)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_20" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0.5
                float height = 240
                float intensity = 180
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.05
                token visibility = "inherited"
                float width = 240
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1930.2587795846025, 508.8922670576959, 3582.801120409904)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_21" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 120
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                token visibility = "inherited"
                float width = 150
                double3 xformOp:rotateXYZ = (0, 0, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-788.3388371520233, 576.004422219235, 796.5558600237155)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_22" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.5019305, 0.90513235, 1)
                float height = 120
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (90, -2.842170943040401e-14, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (694.6159716376453, 895.0509363290142, 1057.4248101492406)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_23" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.5
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (471.23121221977635, 555.4167401403045, 257.81690638671864)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_24" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.5
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (407.91372831461103, 943.1525409192359, 450.2001333327644)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_25" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (471.23121221977624, 532.980076612891, 257.1638277037006)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_26" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (344.40173684501667, 555.4167401403001, 770.3060319271854)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_27" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float diffuse = 3
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.2
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (344.4017368450199, 532.4026855448725, 770.3060319271854)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_29" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 30
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.5
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (231.7850464557389, 148.51978573987327, 17.77385414879336)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_30" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 30
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (456.7850464557389, 148.51978573987347, -13.226145851206752)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_31" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 30
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.5
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (712.7850464557389, 148.5197857398737, 17.773854148793134)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_32" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 1
                float height = 30
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.5
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (807.7850464557389, 148.51978573987378, -78.22614585120692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_33" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68235296, 0.8627451, 1)
                float exposure = 0
                float height = 50
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.05
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2710.785046455743, 1022.5197857398729, 702.7738541487934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_34" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68235296, 0.8627451, 1)
                float exposure = 0
                float height = 100
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (0, 90, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2674.7850464557437, 1150.5197857398728, 1123.773854148794)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_35" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (296.4017368450166, 940.4167401403001, 721.3060319271854)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_36" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 30
                float intensity = 200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.2
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (200.40173684501676, 939.4167401403, 1137.3060319271854)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_37" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (712.5589434280657, 169.06998399990547, 18.034845272353948)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_38" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 30
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (-90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (807.5589434280655, 169.06998399990545, -77.96515472764605)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_39" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.18532825, 0)
                float exposure = 1
                float height = 100
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (-90, -90, -179.99999999999997)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.59826315498319, -762.5832598596996, 228.30603192718524)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float diffuse = 0.5
                float intensity = 8
                float radius = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-255.48646815593727, -467.63024822641137, 166.68428803041536)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_40" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float exposure = 0
                float height = 120
                float intensity = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.5
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (887.5073413081052, -0.31353762361123927, 484.2687175690577)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_41" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68235296, 0.8627451, 1)
                float exposure = 0
                float height = 120
                float intensity = 5
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0.05
                token visibility = "inherited"
                float width = 200
                double3 xformOp:rotateXYZ = (180, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2578.87733315904, 1022.5197857398448, 685.8499166903698)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_42" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                uniform bool collection:shadowLink:includeRoot = 0
                color3f color = (1, 0.94582665, 0.82239383)
                float diffuse = 1
                float height = 100
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness = 6
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-649.3388371520236, 768.0044222192358, 736.5558600237155)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float diffuse = 0.5
                float intensity = 20
                float radius = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-6.382767187518706, -467.63024822639204, -81.31571196958458)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                bool disableFogInteraction = 1
                float intensity = 0
                float radius = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (48.93049736366142, 435.8939639461, 554.7120195479436)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_68" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 200
                double3 xformOp:rotateXYZ = (160, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1079.3800956269336, -2.516071483206616, -109.73836714196662)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_69" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 200
                double3 xformOp:rotateXYZ = (160, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1079.3800956269336, -125.68106221921306, -109.73836714196597)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float diffuse = 0.5
                float intensity = 20
                float radius = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-26.965623770935327, -467.6302482264257, 166.68428803041536)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_28" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.95326555, 0.7799228)
                float height = 120
                float intensity = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float specular = 0
                token visibility = "inherited"
                float width = 220
                double3 xformOp:rotateXYZ = (90, -2.842170943040401e-14, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-136.97058390512376, 512.9646042799972, 546.0530068059687)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_077F1B07864CB8B2" (
            references = @./SubUSDs/light_077F1B07864CB8B2.usd@</light_077F1B07864CB8B2>
        )
        {
            float exposure = 0
            float intensity = 0
            float radius = 60
            float specular = 0
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-2135.2802001362497, 256.8281711555348, 2176.4503786550986)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_223FED0C21EF095A" (
            references = @./SubUSDs/light_223FED0C21EF095A.usd@</light_223FED0C21EF095A>
        )
        {
            float exposure = 1
            float intensity = 3500
        }

        over "light_D264F5B4521E06BF" (
            references = @./SubUSDs/light_D264F5B4521E06BF.usd@</light_D264F5B4521E06BF>
        )
        {
            float exposure = 0
            float intensity = 2200
        }

        over "light_110FC69B5ED865D6" (
            references = @./SubUSDs/light_110FC69B5ED865D6.usd@</light_110FC69B5ED865D6>
        )
        {
            float exposure = 1
            float intensity = 35000
        }

        over "light_F8A40D77EE525CEE" (
            references = @./SubUSDs/light_F8A40D77EE525CEE.usd@</light_F8A40D77EE525CEE>
        )
        {
            float exposure = 1
            float intensity = 2000
        }

        over "light_827FF8D89121D3EF" (
            references = @./SubUSDs/light_827FF8D89121D3EF.usd@</light_827FF8D89121D3EF>
        )
        {
            float exposure = 0
            float intensity = 80000
        }

        over "light_516F1C31D43589AA" (
            references = @./SubUSDs/light_516F1C31D43589AA.usd@</light_516F1C31D43589AA>
        )
        {
            float exposure = 1
            float intensity = 2500
        }

        over "light_520D9BD4C2DD3836" (
            references = @./SubUSDs/light_520D9BD4C2DD3836.usd@</light_520D9BD4C2DD3836>
        )
        {
            float intensity = 0
        }

        over "light_80451A594FFA48AA" (
            references = @./SubUSDs/light_80451A594FFA48AA.usd@</light_80451A594FFA48AA>
        )
        {
            float intensity = 4500
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (2738.0537539831785, 900.364992152727, 1072.5873953075543)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_CFFDFB98EEE6F810" (
            references = @./SubUSDs/light_CFFDFB98EEE6F810.usd@</light_CFFDFB98EEE6F810>
        )
        {
            float intensity = 0
            float specular = 0
        }

        over "light_2901DDFBD01716A3" (
            references = @./SubUSDs/light_2901DDFBD01716A3.usd@</light_2901DDFBD01716A3>
        )
        {
            float exposure = 0
            float intensity = 2200
        }

        over "light_E001F736F19CC81E" (
            references = @./SubUSDs/light_E001F736F19CC81E.usd@</light_E001F736F19CC81E>
        )
        {
            float exposure = 0
            float intensity = 7500
        }

        over "light_1BD39F8ADC2A4A06" (
            references = @./SubUSDs/light_1BD39F8ADC2A4A06.usd@</light_1BD39F8ADC2A4A06>
        )
        {
            float exposure = 0
            float intensity = 8000
            float3 xformOp:rotateZYX = (-46.974464, 14.37836, 6.2747974)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1733.3800048828125, 1018.239990234375, 1930.6700439453125)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_23431CFCA729C26B" (
            references = @./SubUSDs/light_23431CFCA729C26B.usd@</light_23431CFCA729C26B>
        )
        {
            float exposure = 0
            float intensity = 2000
        }

        over "light_CF1EEB5DA081B7CA" (
            references = @./SubUSDs/light_CF1EEB5DA081B7CA.usd@</light_CF1EEB5DA081B7CA>
        )
        {
            float intensity = 0
            float specular = 0
        }

        over "light_B8A9C0B6A85CEC78" (
            references = @./SubUSDs/light_B8A9C0B6A85CEC78.usd@</light_B8A9C0B6A85CEC78>
        )
        {
            float exposure = 1
            float intensity = 50000
        }

        over "light_4E08828DA88540EF" (
            references = @./SubUSDs/light_4E08828DA88540EF.usd@</light_4E08828DA88540EF>
        )
        {
            float exposure = 0
            float intensity = 30000
        }

        over "light_031AF7E565A7B1A7" (
            references = @./SubUSDs/light_031AF7E565A7B1A7.usd@</light_031AF7E565A7B1A7>
        )
        {
            float intensity = 0
        }

        over "light_AB2D85ED5EB97B5B" (
            references = @./SubUSDs/light_AB2D85ED5EB97B5B.usd@</light_AB2D85ED5EB97B5B>
        )
        {
            float intensity = 25000
        }

        over "light_4287F9B1613C399C" (
            references = @./SubUSDs/light_4287F9B1613C399C.usd@</light_4287F9B1613C399C>
        )
        {
            float intensity = 40000
        }

        over "light_4F7B2E73B458ACC0" (
            references = @./SubUSDs/light_4F7B2E73B458ACC0.usd@</light_4F7B2E73B458ACC0>
        )
        {
            float intensity = 0
            float radius = 50
            float specular = 0
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (618.1153578982942, -116.90502660055307, 95.34982119006632)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_32AA41E5E8921C5E" (
            references = @./SubUSDs/light_32AA41E5E8921C5E.usd@</light_32AA41E5E8921C5E>
        )
        {
            float exposure = 1
            float intensity = 1300
        }

        over "light_01E284370C4B0913" (
            references = @./SubUSDs/light_01E284370C4B0913.usd@</light_01E284370C4B0913>
        )
        {
            float intensity = 0

            def RectLight "FloorLight2_102" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 80
                double3 xformOp:rotateXYZ = (0, -2.842170943040401e-14, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (96.91379174320627, -321.5000055655837, -108.58040453529875)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_103" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 160
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-27.599986135959625, -381.910742167973, -108.58040453529873)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_101" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-93.59998613595963, -258.1409227266871, -108.58040453529873)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_109" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-282.5999861359596, 413.58048883227616, -108.58040453529873)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_100" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-27.21326348465368, -129.50000315157035, -108.58040453529873)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_104" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 200
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-265.320874353975, 450.11877588924153, -108.5804045352985)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_105" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 150
                double3 xformOp:rotateXYZ = (0, 2.842170943040401e-14, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-410.72385038192556, 551.2629709910345, -107.73407011605804)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_98" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-309.6497138965276, 670.1743374842683, -108.5804045352985)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_99" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 30
                double3 xformOp:rotateXYZ = (0, -2.842170943040401e-14, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (97.3432859095019, -159.5000031515956, -108.58040453529861)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_68" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 695
                double3 xformOp:rotateXYZ = (180, 8.46991696749769e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-863.3999986052513, 699.7000096514821, 169.85564760346404)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_FD216DA63DF7874C" (
            references = @./SubUSDs/light_FD216DA63DF7874C.usd@</light_FD216DA63DF7874C>
        )
        {
            float intensity = 0
        }

        over "light_0433D76D4A39F850" (
            references = @./SubUSDs/light_0433D76D4A39F850.usd@</light_0433D76D4A39F850>
        )
        {
            float intensity = 0
        }

        over "light_A82DE90AE51ED684" (
            references = @./SubUSDs/light_A82DE90AE51ED684.usd@</light_A82DE90AE51ED684>
        )
        {
            float intensity = 0
        }

        over "light_20CE94EE7182C56A" (
            references = @./SubUSDs/light_20CE94EE7182C56A.usd@</light_20CE94EE7182C56A>
        )
        {
            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.3783784, 0.79280066, 1)
                float intensity = 2500
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (-165, -6.361109437179021e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (324.77686575931295, -788.3787590100624, -5487.179825979944)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.3783784, 0.79280066, 1)
                float intensity = 2500
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (-165, -6.361109437179021e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-155.3928799442932, 1674.003967992497, -5642.631426304109)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.3783784, 0.79280066, 1)
                float intensity = 2500
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (-165, -6.361109437179021e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1233.4356526126903, 212.41929684385877, -3234.0812624732534)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_B0F2B80208DD5EDE" (
            references = @./SubUSDs/light_B0F2B80208DD5EDE.usd@</light_B0F2B80208DD5EDE>
        )
        {
            float intensity = 3500
        }

        over "light_7F131CDE99159C43" (
            references = @./SubUSDs/light_7F131CDE99159C43.usd@</light_7F131CDE99159C43>
        )
        {
            float intensity = 37.30194

            def RectLight "CUbeDropLight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.4192394, 0.00386101)
                float height = 85
                float intensity = 60
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 85
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1002.7349704508749, 2097.527928803128, 739.3485457834264)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.4192394, 0.00386101)
                float height = 85
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 85
                double3 xformOp:rotateXYZ = (-90, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (771.9634076416214, 2382.2046322994543, 1152.5802635845891)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.4192394, 0.00386101)
                float height = 85
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 85
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1002.7349704509827, 1811.9275808010184, 419.96715442761354)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.4192394, 0.00386101)
                float height = 85
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 85
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1002.7349704510796, 1362.1360591847229, 419.9671544275893)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_11" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9249117, 0.7335907)
                float height = 70
                float intensity = 0
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "invisible"
                float width = 200
                double3 xformOp:rotateXYZ = (0, 90, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (746.285361304286, 1941.6332858860856, 1051.7985666590794)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_12" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.37278813, 0.15830117)
                float height = 85
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 85
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (112.11386577518402, 1074.02629777109, -1084.692502054751)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_13" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.37278813, 0.15830117)
                float height = 85
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 85
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (112.11386577518516, 1074.02629777109, -1311.617791218709)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_14" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.37278813, 0.15830117)
                float height = 85
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 85
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (112.11386577518516, 803.5434814784751, -1311.617791218709)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9877014, 0.87258685)
                float intensity = 15
                float radius = 47
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 90, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (729.3076278137162, 1060.2324287688089, 402.01818221742906)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9877014, 0.87258685)
                float intensity = 15
                float radius = 47
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 90, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (729.3076278137162, 1060.2324287688089, 722.0181822174284)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9877014, 0.87258685)
                float intensity = 15
                float radius = 47
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 90, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (701.3076278137162, 1004.2324287688077, 986.018182217427)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9877014, 0.87258685)
                float intensity = 15
                float radius = 47
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 90, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (728.3076278137141, 835.8510722107399, 626.372812122297)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9877014, 0.87258685)
                float intensity = 15
                float radius = 47
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 90, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (728.3076278137141, 779.3728475465291, 385.5748905925734)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_E41312AD74E39BF7" (
            references = @./SubUSDs/light_E41312AD74E39BF7.usd@</light_E41312AD74E39BF7>
        )
        {
            float intensity = 14000
            token visibility = "inherited"

            def SphereLight "OfficeFill" (
                prepend references = @./SubUSDs/light_FF0E7B05DE0DC887.usd@
            )
            {
                color3f color = (0.84313726, 0.96184427, 1)
                float intensity = 30000
                token visibility = "inherited"
                float3 xformOp:rotateZYX = (-59.128708, -28.753965, -16.546095)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-66.28866094968498, -83.39285494789023, 1.2288409669531326)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
            }

            def RectLight "FloorLight2_61" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (-140.8712921142578, 28.75396728515625, -163.4539031982422)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-214.71351302103244, -220.8106362376398, -411.67964321888957)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_60" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-153.0798797607422, -48.806129455566406, -112.27718353271484)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-99.69948219310851, -170.29642610704474, -373.18554898581016)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_59" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (100.87129211425781, -28.75396728515625, 16.546092987060547)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-151.8347950991996, -67.32242763972494, -601.1906196290165)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_58" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 450
                double3 xformOp:rotateXYZ = (100.87129211425781, -28.75396728515625, 16.546092987060547)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (510.8613022883089, 163.8117686292686, -279.1559336074658)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_57" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-153.0798797607422, -48.806129455566406, -112.27718353271484)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-52.14152580834792, -54.206502976791924, -516.5210852120746)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_56" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (100.87129211425781, -28.75396728515625, 16.546092987060547)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (46.48093044215358, -42.353107776679266, -430.8847188221347)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_55" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 340
                double3 xformOp:rotateXYZ = (-140.8712921142578, 28.75396728515625, -163.4539031982422)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (137.74182190840367, -149.9494847260485, -153.30747313355334)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_FF0E7B05DE0DC887" (
            references = @./SubUSDs/light_FF0E7B05DE0DC887.usd@</light_FF0E7B05DE0DC887>
        )
        {
            float intensity = 7000
        }

        over "light_79A89B252EB1B7D2" (
            references = @./SubUSDs/light_79A89B252EB1B7D2.usd@</light_79A89B252EB1B7D2>
        )
        {
            float intensity = 20000

            def RectLight "FloorLight2_62" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (-133.74618530273438, -13.382782936096191, 36.244075775146484)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-370.1257662239005, 35.51316582391769, -122.3238710157878)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_67" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 90
                double3 xformOp:rotateXYZ = (96.28042602539062, -27.775123596191406, -162.5290069580078)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-9.532208684769017, 2.4455529375075855, -619.4680805183923)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 110
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (63.71957015991211, 27.775123596191406, 17.470989227294922)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (69.25216951950131, -433.2252649497245, -271.641360156285)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_C4E63AFE93E97940" (
            references = @./SubUSDs/light_C4E63AFE93E97940.usd@</light_C4E63AFE93E97940>
        )
        {
            float intensity = 90
            float radius = 1.5
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-768, -2949.02676208154, -7364.135865557379)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def SphereLight "light_C4E63AFE93E97940_01" (
                prepend references = @./SubUSDs/light_C4E63AFE93E97940.usd@
            )
            {
                color3f color = (1, 0.6042986, 0.32128036)
                float intensity = 10
                float radius = 1.5
                token visibility = "inherited"
                float3 xformOp:rotateZYX = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-6.6887759966815565, -15.498011088316161, -6.041379022095498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
            }

            def SphereLight "light_C4E63AFE93E97940_02" (
                prepend references = @./SubUSDs/light_C4E63AFE93E97940.usd@
            )
            {
                color3f color = (0.36412695, 0.6649075, 0.68339765)
                float intensity = 60
                float radius = 4
                float3 xformOp:rotateZYX = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (501.3326665103265, 922.683130509128, 370.7493322380151)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
            }

            def SphereLight "light_C4E63AFE93E97940_03" (
                prepend references = @./SubUSDs/light_C4E63AFE93E97940.usd@
            )
            {
                color3f color = (0.36412695, 0.63532215, 0.68339765)
                float intensity = 60
                float radius = 4
                float3 xformOp:rotateZYX = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-473.34805052947786, 482.42994335300364, 154.33767701006946)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
            }
        }

        over "light_0E06E9DAFADD4C33" (
            references = @./SubUSDs/light_0E06E9DAFADD4C33.usd@</light_0E06E9DAFADD4C33>
        )
        {
            float intensity = 0
        }

        over "light_427989FC96DE7BAF" (
            references = @./SubUSDs/light_427989FC96DE7BAF.usd@</light_427989FC96DE7BAF>
        )
        {
            float intensity = 0
        }

        over "light_D1971E7AACCCB14E" (
            references = @./SubUSDs/light_D1971E7AACCCB14E.usd@
        )
        {
            float intensity = 0
        }

        over "light_DE013A8AA5D03639" (
            references = @./SubUSDs/light_DE013A8AA5D03639.usd@
        )
        {
            float intensity = 0
        }

        over "light_6DBB1757A6022762" (
            references = @./SubUSDs/light_6DBB1757A6022762.usd@</light_6DBB1757A6022762>
        )
        {
            float intensity = 0
        }

        over "light_1316531283FB611D" (
            references = @./SubUSDs/light_1316531283FB611D.usd@</light_1316531283FB611D>
        )
        {
            float intensity = 15000
        }

        over "light_4D0CCEBDBFA61D4D" (
            references = @./SubUSDs/light_4D0CCEBDBFA61D4D.usd@</light_4D0CCEBDBFA61D4D>
        )
        {
            float intensity = 37.30194
        }

        over "light_483992330D2C0B9C" (
            references = @./SubUSDs/light_483992330D2C0B9C.usd@</light_483992330D2C0B9C>
        )
        {
            float intensity = 400
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1424, 423, 824)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_37755C6C9774D5C7" (
            references = @./SubUSDs/light_37755C6C9774D5C7.usd@</light_37755C6C9774D5C7>
        )
        {
            token visibility = "inherited"

            def SphereLight "SphereLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                float intensity = 500
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (523.0000000000015, -307.9999999999998, -777.9999999999998)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                float intensity = 500
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (370.0000000000017, -345.9999999999998, -64.99999999999977)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float diffuse = 3
                float intensity = 700
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-453.9999999999983, -498.9999999999998, -64.99999999999955)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_262CE2BAB06FD11F" (
            references = @./SubUSDs/light_262CE2BAB06FD11F.usd@</light_262CE2BAB06FD11F>
        )
        {
            token visibility = "inherited"
        }

        over "light_8261A29521D2C8F6" (
            references = @./SubUSDs/light_8261A29521D2C8F6.usd@</light_8261A29521D2C8F6>
        )
        {
            token visibility = "inherited"
        }

        over "light_8B030CEDC4AEC855" (
            references = @./SubUSDs/light_8B030CEDC4AEC855.usd@</light_8B030CEDC4AEC855>
        )
        {
            token visibility = "inherited"
        }

        over "light_CFADC9B195AE2424" (
            references = @./SubUSDs/light_CFADC9B195AE2424.usd@</light_CFADC9B195AE2424>
        )
        {
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (-90, -0.0000065378845, -0.0000065378845)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-101.33717301508406, 651.0873870346778, 1152.4100283228202)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def SphereLight "SphereLight_13" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.9266409, 0.3803066, 0.118066244)
                float diffuse = 2
                float intensity = 100
                float radius = 20
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -89.99999237060547, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-218.67315769044362, 845.891161960634, -73.64450998591394)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_14" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.9254902, 0.38039216, 0.11764706)
                float diffuse = 2
                float intensity = 100
                float radius = 20
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -89.99999237060547, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-217.26558210607115, 845.8911624012846, -200.44655592672297)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_15" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.8918919, 0.4039374, 0.16873631)
                float diffuse = 2
                float intensity = 120
                float radius = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -89.99999237060547, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-217.2637873943855, 845.8911624993342, -329.6903977045711)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_48D8E9902F8260C1" (
            references = @./SubUSDs/light_48D8E9902F8260C1.usd@</light_48D8E9902F8260C1>
        )
        {
            token visibility = "inherited"
        }

        over "light_2355CF9678430EFB" (
            references = @./SubUSDs/light_2355CF9678430EFB.usd@</light_2355CF9678430EFB>
        )
        {
            token visibility = "inherited"
        }

        over "light_0F639063E7A063A7" (
            references = @./SubUSDs/light_0F639063E7A063A7.usd@</light_0F639063E7A063A7>
        )
        {
            token visibility = "inherited"
        }

        over "light_2D13D0875EB2F265" (
            references = @./SubUSDs/light_2D13D0875EB2F265.usd@</light_2D13D0875EB2F265>
        )
        {
            token visibility = "inherited"
        }

        over "light_517209A22A27153C" (
            references = @./SubUSDs/light_517209A22A27153C.usd@</light_517209A22A27153C>
        )
        {
            float intensity = 10000
            token visibility = "inherited"
        }

        over "light_4A29626F8FA695FD" (
            references = @./SubUSDs/light_4A29626F8FA695FD.usd@</light_4A29626F8FA695FD>
        )
        {
            float intensity = 10000
            token visibility = "inherited"
        }

        over "light_9907D0B07D040077" (
            references = @./SubUSDs/light_9907D0B07D040077.usd@</light_9907D0B07D040077>
        )
        {
            float intensity = 0
        }

        over "light_F848FCBEA7B3A4AA" (
            references = @./SubUSDs/light_F848FCBEA7B3A4AA.usd@</light_F848FCBEA7B3A4AA>
        )
        {
            color3f color = (1, 0.99508595, 0.8918919)
            float intensity = 4
        }

        over "light_86D7C072D7AE44B8" (
            references = @./SubUSDs/light_86D7C072D7AE44B8.usd@</light_86D7C072D7AE44B8>
        )
        {
            float intensity = 0

            def Xform "FloorLights_Advanced13"
            {
                float3 xformOp:rotateXYZ = (-53.94761, 54.46865, -29.357656)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (54.7563346565029, -404.3658020444956, -650.1072439891675)
                float3 xformOp:translate:pivot = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "FloorLight02" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (162, 2.842170943040401e-14, 8.526512829121202e-14)
                    double3 xformOp:scale = (2.7113659381866455, 0.028999999165534973, 1)
                    double3 xformOp:translate = (-428.65875469523945, 253.9964393258029, 128.99999999999838)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight03" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, 2.842170943040401e-14, 90)
                    double3 xformOp:scale = (3.0384345054626465, 0.028999999165534973, 1)
                    double3 xformOp:translate = (-573.5415957340701, 93.68641802474599, 129.00000000000094)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight04" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, 2.842170943040401e-14, 45)
                    double3 xformOp:scale = (1.6985806226730347, 0.028999999165534973, 1)
                    double3 xformOp:translate = (-191.02995535704832, 316.75713601801004, 0.9805581965246754)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight05" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, 2.842170943040401e-14, 0)
                    double3 xformOp:scale = (1.803894281387329, 0.028999999165534973, 1)
                    double3 xformOp:translate = (-672.0960655478517, -65.70551641103722, 129.45615080200875)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight06" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (174, 5.684341886080802e-14, 180)
                    double3 xformOp:scale = (1.8633997440338135, 0.028999999165534973, 1)
                    double3 xformOp:translate = (-672.09607, -189.61055278120543, 129.6732622587364)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight07" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (170, -2.842170943040401e-14, 90.00000000000006)
                    double3 xformOp:scale = (0.1, 0.1, 0.1)
                    double3 xformOp:translate = (-629.0096431594059, -65.08137839801783, 59.5730754147648)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight08" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (162, 2.842170943040401e-14, 180)
                    double3 xformOp:scale = (2.7100348472595215, 0.20000000298023224, 1)
                    double3 xformOp:translate = (-436.07018805453947, -252.92305252563781, 120)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight15" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (184.60000275075436, 0, 90)
                    double3 xformOp:scale = (6.198397636413574, 0.03889208287000656, 0.7922307848930359)
                    double3 xformOp:translate = (507.21315426824225, -71.80000106990286, 0.2701631367457902)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "FloorLight18" (
                    apiSchemas = ["ShapingAPI"]
                )
                {
                    color3f color = (1, 0.6779922, 0.39999998)
                    float height = 20
                    float intensity = 10
                    float shaping:cone:angle = 180
                    float shaping:cone:softness
                    float shaping:focus
                    color3f shaping:focusTint
                    asset shaping:ies:file
                    float width = 100
                    double3 xformOp:rotateXYZ = (175, 2.842170943040401e-14, -45)
                    double3 xformOp:scale = (1.7128759622573853, 0.02800000086426735, 1.1226569414138794)
                    double3 xformOp:translate = (446.90539786963376, 316.54778569650273, 1.199421683611058)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def RectLight "FloorLight02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 100
                float intensity = 70
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (108.0523910522461, 54.468650817871094, -29.357656478881836)
                double3 xformOp:scale = (2.7113659381866455, 0.028999999165534973, 1)
                double3 xformOp:translate = (-129.75295480732356, -9.409600615144484, -376.48443751808566)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 100
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (-117.79588317871094, 28.024320602416992, 108.82976531982422)
                double3 xformOp:scale = (3.0384345054626465, 0.028999999165534973, 1)
                double3 xformOp:translate = (-157.46379870116485, -102.07033515575085, -183.25804707900795)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 100
                float intensity = 0
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (121.0523910522461, 54.468650817871094, -29.357656478881836)
                double3 xformOp:scale = (1.803894281387329, 0.028999999165534973, 1)
                double3 xformOp:translate = (-161.59898249580257, -206.9492672526813, -28.008924008367785)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 100
                float intensity = 0
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (-132.05239868164062, -54.468650817871094, 150.64234924316406)
                double3 xformOp:scale = (1.8633997440338135, 0.028999999165534973, 1)
                double3 xformOp:translate = (-126.1200682577742, -310.3705395638047, 30.281660594263144)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight08" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 100
                float intensity = 15
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 100
                double3 xformOp:rotateXYZ = (-144.05239868164062, -54.468650817871094, 150.64234924316406)
                double3 xformOp:scale = (2.7100348472595215, 0.20000000298023224, 1)
                double3 xformOp:translate = (9.482617068976367, -424.95137225695856, -135.23298027981605)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_1F8C36537B5EA988" (
            references = @./SubUSDs/light_1F8C36537B5EA988.usd@</light_1F8C36537B5EA988>
        )
        {
            float intensity = 500

            def RectLight "FloorLight2_83" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (180, 3.2541349884098337e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-129.67434279506165, -120.87046194427103, 95.72159741782474)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_84" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 180
                double3 xformOp:rotateXYZ = (180, 7.0167091267055864e-15, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-252.47099441289902, 6.356515045186143, 95.72159741782468)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_80" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 230
                double3 xformOp:rotateXYZ = (180, 7.0167091267055864e-15, -7.0167091267055864e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-223.47099775075947, -501.5999850034714, 92.68424620630725)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_82" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 100
                double3 xformOp:rotateXYZ = (180, -1.0248620935194783e-14, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-381.78061950156683, -120.87046194427103, 93.08996892907862)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.5019608, 0.14509805)
                float intensity = 7
                float radius = 50
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-738.4675877370736, 258.2036381649684, 19.263245710401037)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_10" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.50252676, 0.14671814)
                float height = 110
                float intensity = 300
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 110
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-919.5033689852071, 266.8676627931095, 25.16198611903883)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "CUbeDropLight_11" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.30385655, 0.00386101)
                float height = 110
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 220
                double3 xformOp:rotateXYZ = (0, -90, 8.15250015258789)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1045.57662450474, -120.13745111188064, -38.666959368925006)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_81" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "invisible"
                float width = 100
                double3 xformOp:rotateXYZ = (180, 7.0167091267055864e-15, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-450.47099775075947, -314.105735770534, 94.20101296273077)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_D8CF1ED70D06CAA1" (
            references = @./SubUSDs/light_D8CF1ED70D06CAA1.usd@</light_D8CF1ED70D06CAA1>
        )
        {
            float intensity = 3000
        }

        over "light_83F8D0EF4025B25F" (
            references = @./SubUSDs/light_83F8D0EF4025B25F.usd@</light_83F8D0EF4025B25F>
        )
        {
            float intensity = 0
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (9376, 1201, 504)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def RectLight "RectLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.18532819, 0)
                float height = 120
                float intensity = 20
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (90, 2.842170943040401e-14, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1246.752949955824, 14.318236558425951, 71.69285698677334)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "incin" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.20849419, 0)
                float height = 70
                float intensity = 5000
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 70
                double3 xformOp:rotateXYZ = (180, 1.453208052550341e-15, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1024.25169163385, 12.900873873729779, -194.64652799103698)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Glados" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.18825, 0.51458687, 0.5945946)
                float intensity = 1000
                float radius = 20
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -100.20938606785478)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.8069498, 0.96198624, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -100.20938606785478)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Spot" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66795367, 0.9346222, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (429.159610208877, -624.6945201822417, -108.63146051731673)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Spot_01" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66795367, 0.9346222, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (616.1275377693655, -430.82305949246927, -108.6314605173173)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Spot_02" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66795367, 0.9346222, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (616.1275377693655, 459.9965991355034, -108.6314605173173)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Spot_03" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66795367, 0.9346222, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (432.9962935338608, 654.4600396522653, -108.63146051731161)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Spot_04" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66795367, 0.9346222, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-451.91757432374834, 676.3528566854202, -108.63146051731457)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Spot_05" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66795367, 0.9346222, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-636.4380423326584, 480.0783006627921, -108.63146051733037)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Spot_06" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66795367, 0.9346222, 1)
                float intensity = 5000
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.03719672270199226, -0.009466884277344434, -108.6314605173331)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_01" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.6756757, 0.89768887, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-446.22477733814594, 670.5272556089681, -114.10909331065301)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_02" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.8648649, 0.95737344, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-637.1943554207865, 479.09795511299467, -114.10909331065272)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_03" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.6756757, 0.89768887, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 50
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (432.45348978670336, 654.6497855429411, -114.10909331065301)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_04" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.84942085, 0.95249903, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 40
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (621.733650240687, 463.54343233737404, -114.10909331064869)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_05" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.84942085, 0.95249903, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 57
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (621.733650240687, -434.6712570727318, -114.10909331064869)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_06" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.74517375, 0.91961765, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (431.2969488248036, -625.3486282657267, -114.10909331064863)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_07" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.74517375, 0.91961765, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-464.09319096356194, -625.3486282657267, -114.10909331064863)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_08" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.8996139, 0.9683345, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 42
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (189.56266285168505, -6.811044390239971, -1.916178256846365)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-654.5383128688227, -431.3664538508393, -114.10909331065398)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DiskLight "DiskLight" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.992278, 0.36456895, 0.19922186)
                float intensity = 10
                float radius = 750
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 3149.3731584530506)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_10" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.83324647, 1, 0.63706565)
                float intensity = 600
                float radius = 10
                float shaping:cone:angle = 80
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.6594542473922047, -2.533332911116986, -111.27023753866138)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_09" (
                active = false
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.74517375, 0.91961765, 1)
                float intensity = 350
                float radius = 10
                float shaping:cone:angle = 70
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.6594542473922047, -2.533332911116986, -111.27023753866138)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_13" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.95403564, 0.8069498)
                float intensity = 10
                float radius = 7
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90, -3.1805547185895103e-15, 139.29066467285156)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-230.41134171009435, 619.706377774613, 130.68406614486287)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_14" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.95403564, 0.8069498)
                float intensity = 10
                float radius = 7
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90, -3.1805547185895103e-15, 139.29066467285156)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-135.38512964895563, 619.7063777744731, 130.68406614486287)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.84942085, 0.95249903, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 40
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (621.733650240687, 463.54343233737404, -114.10909331064869)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.6756757, 0.89768887, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-446.22477733814594, 670.5272556089681, -114.10909331065301)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.8648649, 0.95737344, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 45
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-637.1943554207865, 479.09795511299467, -114.10909331065272)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.6756757, 0.89768887, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 50
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (432.45348978670336, 654.6497855429411, -114.10909331065301)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.84942085, 0.95249903, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 57
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (621.733650240687, -434.6712570727318, -114.10909331064869)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.74517375, 0.91961765, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (431.2969488248036, -625.3486282657267, -114.10909331064863)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.74517375, 0.91961765, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-464.09319096356194, -625.3486282657267, -114.10909331064863)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.8996139, 0.9683345, 1)
                float intensity = 250
                float radius = 10
                float shaping:cone:angle = 42
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (189.56266285168505, -6.811044390239971, -1.916178256846365)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-654.5383128688227, -431.3664538508393, -114.10909331065398)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "FloorSpot_Glados_Center" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.66568667, 0.996139, 0.27691892)
                float intensity = 800
                float radius = 10
                float shaping:cone:angle = 80
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.6594542473922047, -2.533332911116986, -111.27023753866138)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_C8EF0BB66C5FF837" (
            references = @./SubUSDs/light_C8EF0BB66C5FF837.usd@</light_C8EF0BB66C5FF837>
        )
        {
            float intensity = 70
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (8375.738399707527, 1215.765462267096, 637)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_7B0448DE65CB48B8" (
            references = @./SubUSDs/light_7B0448DE65CB48B8.usd@</light_7B0448DE65CB48B8>
        )
        {
            float intensity = 0
        }

        over "light_2DC0963E4ADF3C67" (
            references = @./SubUSDs/light_2DC0963E4ADF3C67.usd@</light_2DC0963E4ADF3C67>
        )
        {
            float intensity = 0
        }

        over "light_6ED41161E0C7602F" (
            references = @./SubUSDs/light_6ED41161E0C7602F.usd@</light_6ED41161E0C7602F>
        )
        {
            float intensity = 0

            def RectLight "Cubby_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9022525, 0.6795367)
                float height = 1
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 1
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (29.46390724182129, 29.46390724182129, 29.46390724182129)
                double3 xformOp:translate = (0.7379474777067117, 0.05536847541672785, -1.4032675285476444)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_A043105CD8A454C6" (
            references = @./SubUSDs/light_A043105CD8A454C6.usd@</light_A043105CD8A454C6>
        )
        {
            float intensity = 2000

            def RectLight "FloorLight1_08" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 3
                float intensity = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 320
                double3 xformOp:rotateXYZ = (-7.0167091267055864e-15, 7.0167091267055864e-15, -90)
                double3 xformOp:scale = (1, 1, 3)
                double3 xformOp:translate = (-49.49771631333715, -319.9924734830585, 62.787465676239094)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_13" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 3
                float intensity = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 320
                double3 xformOp:rotateXYZ = (-7.0167091267055864e-15, 7.0167091267055864e-15, 90)
                double3 xformOp:scale = (1, 1, 3)
                double3 xformOp:translate = (-301.3893434069968, -319.9924734830599, 62.78746567623915)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_17" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 3
                float intensity = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 500
                double3 xformOp:rotateXYZ = (-7.0167091267055864e-15, 7.0167091267055864e-15, -90)
                double3 xformOp:scale = (1, 1, 3)
                double3 xformOp:translate = (-50.367387514540155, -773.2715238749784, 198.19424739910858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_16" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 3
                float intensity = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 500
                double3 xformOp:rotateXYZ = (-7.0167091267055864e-15, 7.0167091267055864e-15, 90)
                double3 xformOp:scale = (1, 1, 3)
                double3 xformOp:translate = (-302.16228236655877, -773.2715238749787, 198.19424739911358)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_18" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 3
                float intensity = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 250
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 3)
                double3 xformOp:translate = (-177.09396525306977, -513.8996954722752, 198.19424739912563)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_19" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 3
                float intensity = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 320
                double3 xformOp:rotateXYZ = (-7.0167091267055864e-15, 7.0167091267055864e-15, 90)
                double3 xformOp:scale = (1, 1, 3)
                double3 xformOp:translate = (-365.91731154151273, -1201.674129828994, 198.55314543455768)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_14" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float height = 3
                float intensity = 30
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 320
                double3 xformOp:rotateXYZ = (-7.0167091267055864e-15, 7.0167091267055864e-15, 180)
                double3 xformOp:scale = (1, 1, 3)
                double3 xformOp:translate = (-301.3893434069967, -1342.317376369694, 198.55314543459144)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Cubby_13" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float height = 60
                float intensity = 300
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 60
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (399.1653604422622, -1088.1262871692852, 363.40845602698744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Cubby_08" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float height = 1
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 1
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (29.463899612426758, 29.464086532592773, 29.463735580444336)
                double3 xformOp:translate = (9.09583930265569, 1008.0759066544631, -272.68652201901983)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Cubby_11" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float height = 1
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 1
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (29.463899612426758, 29.464086532592773, 29.463735580444336)
                double3 xformOp:translate = (-361.04533564922707, 751.7252187327608, -272.68652201901955)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Cubby_12" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float height = 1
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 1
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (29.463899612426758, 29.464086532592773, 29.463735580444336)
                double3 xformOp:translate = (-361.04533564922724, 368.23516443327617, -240.76140579211472)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_E814360D952AD662" (
            references = @./SubUSDs/light_E814360D952AD662.usd@</light_E814360D952AD662>
        )
        {
            def RectLight "Cubby_09" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float height = 60
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 60
                double3 xformOp:rotateXYZ = (3.4704184532165527, -48.19069290161133, -1.5524345636367798)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-139.2666547073581, -216.17360063651995, -246.12141910769105)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Cubby_10" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.9137255, 0.64705884)
                float height = 60
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 60
                double3 xformOp:rotateXYZ = (3.4704184532165527, -48.19069290161133, -1.5524345636367798)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-308.2484533904282, -276.9873515713025, -439.0906221771305)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_B028B1A6E036005A" (
            references = @./SubUSDs/light_B028B1A6E036005A.usd@</light_B028B1A6E036005A>
        )
        {
        }

        over "light_A6E4D1B2C600EB28" (
            references = @./SubUSDs/light_A6E4D1B2C600EB28.usd@</light_A6E4D1B2C600EB28>
        )
        {
            float intensity = 0
        }

        over "light_E2A31F0196C24256" (
            references = @./SubUSDs/light_E2A31F0196C24256.usd@</light_E2A31F0196C24256>
        )
        {
            float intensity = 0
        }

        over "light_0C5DC6C62225249B" (
            references = @./SubUSDs/light_0C5DC6C62225249B.usd@</light_0C5DC6C62225249B>
        )
        {
            float intensity = 0
        }

        over "light_809D9A777EAD65C6" (
            references = @./SubUSDs/light_809D9A777EAD65C6.usd@</light_809D9A777EAD65C6>
        )
        {
            float intensity = 0
        }

        over "light_E3C0C6AE3676DFD7" (
            references = @./SubUSDs/light_E3C0C6AE3676DFD7.usd@</light_E3C0C6AE3676DFD7>
        )
        {
            float intensity = 0
        }

        over "light_990EAE69ECA7B1A7" (
            references = @./SubUSDs/light_990EAE69ECA7B1A7.usd@</light_990EAE69ECA7B1A7>
        )
        {
            float intensity = 0
        }

        over "light_673A3C3F45A26D36" (
            references = @./SubUSDs/light_673A3C3F45A26D36.usd@</light_673A3C3F45A26D36>
        )
        {
            float intensity = 0
        }

        over "light_429E5CABACCAD4A6" (
            references = @./SubUSDs/light_429E5CABACCAD4A6.usd@</light_429E5CABACCAD4A6>
        )
        {
            float intensity = 0
        }

        over "light_C2AB540578328945" (
            references = @./SubUSDs/light_C2AB540578328945.usd@</light_C2AB540578328945>
        )
        {
            def RectLight "FloorLight2_50" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (-99.56957244873047, -24.276891708374023, -104.27913665771484)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-173.20874566304173, -451.70526255081927, -461.47661949996234)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_51" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (-117.57325744628906, 52.452064514160156, -158.35037231445312)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-118.28705715206503, -355.3701607759079, -452.72585220943483)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_52" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (157.57325744628906, -52.452064514160156, 21.649633407592773)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-160.35259830325992, -520.6512736362362, -375.80229719097986)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_53" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 215
                double3 xformOp:rotateXYZ = (157.57325744628906, -52.452064514160156, 21.649633407592773)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-13.024129474071366, -614.8288208219562, -30.05976699407526)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_54" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (139.569580078125, 24.276891708374023, 75.72086334228516)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (91.81271862749365, -423.2266957651464, -20.073554544934296)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_55" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (157.57325744628906, -52.452064514160156, 21.649633407592773)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (116.97273950745644, -461.9086003913502, 59.25049296710401)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_56" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (139.569580078125, 24.276891708374023, 75.72086334228516)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (168.6256347445596, -388.89947554286897, 83.55954213732096)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_57" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (157.57325744628906, -52.452064514160156, 21.649633407592773)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (209.64945757367968, -475.53504579027646, 235.08974346412086)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_58" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (-117.57325744628906, 52.452064514160156, -158.35037231445312)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (266.11797515898235, -253.66272054130786, 131.8280475389234)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_59" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (-117.57325744628906, 52.452064514160156, -158.35037231445312)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (144.85608315862953, -352.3512300875111, 8.261349341442155)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_60" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (-99.56957244873047, -24.276891708374023, -104.27913665771484)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (309.93893170884917, -336.2619812439841, 284.5140667500459)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_F4F24586C56B5184" (
            references = @./SubUSDs/light_F4F24586C56B5184.usd@</light_F4F24586C56B5184>
        )
        {
            def RectLight "CUbeDropLight_09" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.11924398, 0.00386101)
                float height = 120
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (-1.4033418253411173e-14, -1.8427728622010496e-14, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-348.8438792244292, 326.11006018521334, 327.1166228894342)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_61" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 475
                double3 xformOp:rotateXYZ = (20, -7.951387114111131e-15, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (93.65403474881549, 695.6716594688487, 88.02612187683178)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_62" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 475
                double3 xformOp:rotateXYZ = (20, -1.9083328735053535e-14, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-285.3459652511844, 695.6716594688487, 88.02612187683172)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_63" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 80
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (20, -3.947785430806136e-14, -7.0167091267055864e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-93.34596525118437, 932.6716594688487, 88.02612187683161)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_DF3C822F4D2868B5" (
            references = @./SubUSDs/light_DF3C822F4D2868B5.usd@</light_DF3C822F4D2868B5>
        )
        {
            def RectLight "RectLight_15" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68339765, 0.9816667, 1)
                float exposure = 2
                float height = 3
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (56.04066848754883, -28.627403259277344, 80.51021575927734)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-60.898648858147, -227.0094399556688, 95.69032817048242)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_16" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68339765, 0.9816667, 1)
                float exposure = 2
                float height = 3
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 440
                double3 xformOp:rotateXYZ = (-14.020984649658203, -31.093400955200195, -170.27047729492188)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (107.11188162380631, -304.6373340759152, -78.96081038286047)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_17" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68339765, 0.9816667, 1)
                float exposure = 2
                float height = 3
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 440
                double3 xformOp:rotateXYZ = (54.0209846496582, 31.093400955200195, 9.72952651977539)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (143.5506023828052, -86.6494598279971, 41.6762402350073)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_18" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68339765, 0.9816667, 1)
                float exposure = 0
                float height = 3
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 280
                double3 xformOp:rotateXYZ = (165.97901916503906, -31.093400955200195, -170.27047729492188)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-413.450108802213, -1.6648874007682082, -77.4976696846312)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_19" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.68339765, 0.9816667, 1)
                float exposure = 0
                float height = 3
                float intensity = 150
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 280
                double3 xformOp:rotateXYZ = (-125.97901153564453, 31.093400955200195, 9.72952651977539)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-431.2762895756414, -108.30670060988012, -136.51450198539692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_5BA07AEF21839F9B" (
            references = @./SubUSDs/light_5BA07AEF21839F9B.usd@</light_5BA07AEF21839F9B>
        )
        {
            float intensity = 4500
        }

        over "light_37BFE9E7C048128F" (
            references = @./SubUSDs/light_37BFE9E7C048128F.usd@</light_37BFE9E7C048128F>
        )
        {
            float intensity = 0
        }

        over "light_4855E4B7A607AB91" (
            references = @./SubUSDs/light_4855E4B7A607AB91.usd@</light_4855E4B7A607AB91>
        )
        {
            float intensity = 0
        }

        over "light_5856838C32EC8C27" (
            references = @./SubUSDs/light_5856838C32EC8C27.usd@</light_5856838C32EC8C27>
        )
        {
            float intensity = 0
        }

        over "light_9D29BD5FA6C6318C" (
            references = @./SubUSDs/light_9D29BD5FA6C6318C.usd@</light_9D29BD5FA6C6318C>
        )
        {
            float intensity = 0
        }

        over "light_F569669E11682BE4" (
            references = @./SubUSDs/light_F569669E11682BE4.usd@</light_F569669E11682BE4>
        )
        {
            def RectLight "skylight_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-36.96411895751953, -52.05809783935547, -161.45838928222656)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (660.5498420080124, 1887.9849456589322, 499.2353637505083)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-36.96411895751953, -52.05809783935547, -161.45838928222656)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (584.4040360064188, 1780.2299225289842, 540.3754948498554)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-36.96411895751953, -52.05809783935547, -161.45838928222656)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (399.60515714651456, 1638.6135543512635, 730.4486500139878)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (-36.96411895751953, -52.05809783935547, -161.45838928222656)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (362.0203606777503, 1464.0059742145324, 659.3770283591182)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_000332C07328974D" (
            references = @./SubUSDs/light_000332C07328974D.usd@</light_000332C07328974D>
        )
        {
            float intensity = 0
        }

        over "light_D3249AF779086E5D" (
            references = @./SubUSDs/light_D3249AF779086E5D.usd@</light_D3249AF779086E5D>
        )
        {
            def RectLight "FloorLight2_99" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (160, -1.083648689394033e-16, 1.4824197836814184e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1022.6828280194816, 301.74795377398414, -464.3509451826984)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_103" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (160, -1.083648689394033e-16, 1.4824197836814184e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1213.4815143089124, 173.58985888436473, -464.35094518266874)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_102" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (160, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1149.5027847468516, 237.69785467268684, -464.35094518268716)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_101" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (160, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-893.7098963250173, 365.47945868465285, -464.3509451826833)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_100" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (160, -1.083648689394033e-16, 1.4824197836814184e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-769.8170912748542, 429.6109049880115, -464.35094518269955)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_98" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (160, 0.000002998594027303625, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1026.5048978824639, 112.65474633550411, -464.3509451827175)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_97" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (160, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-893.466928086604, 112.65474633550366, -464.3509451827165)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_96" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (160, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-959.5367630407407, 178.1203752147767, -464.35094518271353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_95" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (160, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1152.2296993155664, 50.17632983168642, -464.35094518271757)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_94" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 250
                double3 xformOp:rotateXYZ = (160, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-767.9028374047571, 50.48737126168362, -464.3509451827215)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0.000004512603481998667, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (576.49343234971, 3409.616574244999, -130.29350899210982)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "skylight_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.94582665, 0.82239383)
                float height = 60
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 60
                double3 xformOp:rotateXYZ = (0.000004512603481998667, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (288.8913666491976, 3055.1012521521134, -130.2935089921046)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_F2C39B2A2B9CCF97" (
            references = @./SubUSDs/light_F2C39B2A2B9CCF97.usd@</light_F2C39B2A2B9CCF97>
        )
        {
            def RectLight "FloorLight2_93" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (160, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-217.4844993350008, -87.48067499941499, -377.1016805586806)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_87" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (-19.999996185302734, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-24.437112990813375, 803.764589573439, 37.27292848421132)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_88" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (-20, 7.730563189542212e-16, 1.5090593933890398e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-24.43711299079746, 424.3556295010112, 37.272928484218085)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_89" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 460
                double3 xformOp:rotateXYZ = (160, 0.000002998594027303625, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-124.37662535775507, 151.87016828148853, -377.10168055868075)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_90" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 220
                double3 xformOp:rotateXYZ = (160, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-631.6526791039678, 309.09359782023284, -377.10168055868127)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_91" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 95
                double3 xformOp:rotateXYZ = (160, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-631.6662856595322, -42.19985641297899, -377.1016805586811)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_92" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 190
                double3 xformOp:rotateXYZ = (160, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-538.0723592057661, -87.56952738991504, -377.1016805586806)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_83" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 380
                double3 xformOp:rotateXYZ = (-5.000000476837158, 0.0000029985937999299495, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-823.5276363853555, 228.39654415041332, 37.27292848403317)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_84" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 150
                double3 xformOp:rotateXYZ = (-19.999996185302734, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-745.1495931152308, 419.68966167796, 37.27292848406853)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_85" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 150
                double3 xformOp:rotateXYZ = (-20, 7.730563189542212e-16, 1.5090593933890398e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-745.1495931152306, 40.41707927824427, 37.272928484069666)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_86" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 375
                double3 xformOp:rotateXYZ = (-4.999999523162842, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (68.57479441233158, 611.9644135295621, 37.272928484144586)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_3210D09E8568488E" (
            references = @./SubUSDs/light_3210D09E8568488E.usd@</light_3210D09E8568488E>
        )
        {
            def RectLight "FloorLight2_77" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (-20.116193771362305, 1.2766000032424927, 0.000001394014020661416)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (130.07032843876522, -1006.094119264284, 39.447244592003926)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_76" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 350
                double3 xformOp:rotateXYZ = (-20, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (191.21577071629912, -809.2248993285921, 39.4472445920193)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_75" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 630
                double3 xformOp:rotateXYZ = (-20, 7.730563189542212e-16, 1.5090593933890398e-15)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (512.6385934433807, -623.9261382908994, 39.44724459201467)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_74" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 750
                double3 xformOp:rotateXYZ = (-19.999996185302734, -0.0000021155874492251314, -180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (446.49746947537335, 12.980286504890046, 39.447244591997446)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_73" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 630
                double3 xformOp:rotateXYZ = (-20, -0.000002998594027303625, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (831.188235858076, -305.32159034474944, 39.44724459202126)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_72" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float height = 3
                float intensity = 100
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 1010
                double3 xformOp:rotateXYZ = (-20, 0.000002998594027303625, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (67.9374063353788, -495.80653374594567, 39.4472445920248)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_66ED8BA7EE9E7ECC" (
            references = @./SubUSDs/light_66ED8BA7EE9E7ECC.usd@</light_66ED8BA7EE9E7ECC>
        )
        {
            def RectLight "FloorLight2_92" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (-37.39606857299805, 37.6200065612793, -103.15221405029297)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (64.8878422422531, 103.05179508760493, -339.9006002275055)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_93" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 330
                double3 xformOp:rotateXYZ = (-44.128936767578125, -28.753673553466797, -168.13674926757812)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-139.0830540749522, -11.665479899102507, -295.25642324288367)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_94" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 350
                double3 xformOp:rotateXYZ = (44.128936767578125, 28.753673553466797, 11.863252639770508)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-108.53473929876816, 133.0343536014667, -178.24338029693013)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_95" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 120
                double3 xformOp:rotateXYZ = (37.39606857299805, -37.6200065612793, 76.84778594970703)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-209.13028154988558, -192.20070479588045, -416.83658319557435)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "FloorLight2_96" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (0.4, 0.75686276, 1)
                float diffuse = 2
                float exposure = 1
                float height = 3
                float intensity = 120
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 20
                double3 xformOp:rotateXYZ = (37.39606857299805, -37.6200065612793, 76.84778594970703)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-10.599722188008855, -220.04033438228342, -595.6088298577711)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_D31A34A520414E04" (
            references = @./SubUSDs/light_D31A34A520414E04.usd@</light_D31A34A520414E04>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_069F4059333DE733" (
            references = @./SubUSDs/light_069F4059333DE733.usd@</light_069F4059333DE733>
        )
        {
            float intensity = 0
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (180, -7.0167096e-15, 180)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (9376, 1201, 404)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_E0D4F8E20C9828D1" (
            references = @./SubUSDs/light_E0D4F8E20C9828D1.usd@</light_E0D4F8E20C9828D1>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_D3B7C05353C3FEF2" (
            references = @./SubUSDs/light_D3B7C05353C3FEF2.usd@</light_D3B7C05353C3FEF2>
        )
        {
            color3f color = (0.85328186, 0.93762934, 1)
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_29C77EFD713EA898" (
            references = @./SubUSDs/light_29C77EFD713EA898.usd@</light_29C77EFD713EA898>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_D6BEA20C1550B173" (
            references = @./SubUSDs/light_D6BEA20C1550B173.usd@</light_D6BEA20C1550B173>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_17305C35F3CE0957" (
            references = @./SubUSDs/light_17305C35F3CE0957.usd@</light_17305C35F3CE0957>
        )
        {
            float intensity = 0
            token visibility = "inherited"
        }

        over "light_92345191A9BF0087" (
            references = @./SubUSDs/light_92345191A9BF0087.usd@</light_92345191A9BF0087>
        )
        {
            float intensity = 0
        }

        over "light_C7362F88703ACEFE" (
            references = @./SubUSDs/light_C7362F88703ACEFE.usd@</light_C7362F88703ACEFE>
        )
        {
            float intensity = 0
        }

        over "light_4561D6F43CFC6F38" (
            references = @./SubUSDs/light_4561D6F43CFC6F38.usd@</light_4561D6F43CFC6F38>
        )
        {
            float intensity = 0
        }

        over "light_8FAAF8B08104992C" (
            references = @./SubUSDs/light_8FAAF8B08104992C.usd@</light_8FAAF8B08104992C>
        )
        {
            float radius = 2
            float3 xformOp:rotateZYX = (-14.980366, -0.77612776, -0.10204541)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-545.5392347609626, -318.48197888070564, 325.6675305638738)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_C569E8FD374FB0B6" (
            references = @./SubUSDs/light_C569E8FD374FB0B6.usd@</light_C569E8FD374FB0B6>
        )
        {
            float intensity = 0
        }

        over "light_CB3AB8939172B56D" (
            references = @./SubUSDs/light_CB3AB8939172B56D.usd@</light_CB3AB8939172B56D>
        )
        {
            float intensity = 0
        }

        over "light_BED3FA83665D13B4" (
            references = @./SubUSDs/light_BED3FA83665D13B4.usd@</light_BED3FA83665D13B4>
        )
        {
            float intensity = 0
        }

        over "light_2E1C9A093897340C" (
            references = @./SubUSDs/light_2E1C9A093897340C.usd@</light_2E1C9A093897340C>
        )
        {
            float intensity = 0
        }

        over "light_74A971A9C451EB1D" (
            references = @./SubUSDs/light_74A971A9C451EB1D.usd@</light_74A971A9C451EB1D>
        )
        {
            float intensity = 0
        }

        over "light_5664CB0FCCE3472C" (
            references = @./SubUSDs/light_5664CB0FCCE3472C.usd@</light_5664CB0FCCE3472C>
        )
        {
            float intensity = 0
        }

        over "light_26BF7934AB77F25D" (
            references = @./SubUSDs/light_26BF7934AB77F25D.usd@</light_26BF7934AB77F25D>
        )
        {
            float intensity = 0
        }

        over "light_580213F0E312FD6C" (
            references = @./SubUSDs/light_580213F0E312FD6C.usd@</light_580213F0E312FD6C>
        )
        {
            float intensity = 0
        }

        over "light_9C79A3EB369E5DC2" (
            references = @./SubUSDs/light_9C79A3EB369E5DC2.usd@</light_9C79A3EB369E5DC2>
        )
        {
            float intensity = 0
        }

        over "light_1F2F24155DD6B1B1" (
            references = @./SubUSDs/light_1F2F24155DD6B1B1.usd@</light_1F2F24155DD6B1B1>
        )
        {
            float intensity = 0
        }

        over "light_4654BF34E7A86FFA" (
            references = @./SubUSDs/light_4654BF34E7A86FFA.usd@</light_4654BF34E7A86FFA>
        )
        {
            float intensity = 0
        }

        over "light_DC016173622551C5" (
            references = @./SubUSDs/light_DC016173622551C5.usd@</light_DC016173622551C5>
        )
        {
            float intensity = 0
        }

        over "light_D15513F83B6FD748" (
            references = @./SubUSDs/light_D15513F83B6FD748.usd@</light_D15513F83B6FD748>
        )
        {
            float intensity = 0
        }

        over "light_E240256D09B7BA52" (
            references = @./SubUSDs/light_E240256D09B7BA52.usd@</light_E240256D09B7BA52>
        )
        {
            float intensity = 0
        }

        over "light_1E93D6938A69E1C8" (
            references = @./SubUSDs/light_1E93D6938A69E1C8.usd@</light_1E93D6938A69E1C8>
        )
        {
            float intensity = 0
        }

        over "light_0FC285A400B2C87F" (
            references = @./SubUSDs/light_0FC285A400B2C87F.usd@</light_0FC285A400B2C87F>
        )
        {
            float intensity = 0
        }

        over "light_93472C47FCE76150" (
            references = @./SubUSDs/light_93472C47FCE76150.usd@</light_93472C47FCE76150>
        )
        {
            float intensity = 0
        }

        over "light_16E94B4DE1E3F19E" (
            references = @./SubUSDs/light_16E94B4DE1E3F19E.usd@</light_16E94B4DE1E3F19E>
        )
        {
            float intensity = 0
        }

        over "light_781653A332CBF430" (
            references = @./SubUSDs/light_781653A332CBF430.usd@</light_781653A332CBF430>
        )
        {
            float intensity = 0
        }

        over "light_F209FDFEB78F312C" (
            references = @./SubUSDs/light_F209FDFEB78F312C.usd@</light_F209FDFEB78F312C>
        )
        {
            float intensity = 0
        }

        over "light_6202EC69ACE108B0" (
            references = @./SubUSDs/light_6202EC69ACE108B0.usd@</light_6202EC69ACE108B0>
        )
        {
            float intensity = 0
        }

        over "light_39FA294C03DD29FF" (
            references = @./SubUSDs/light_39FA294C03DD29FF.usd@</light_39FA294C03DD29FF>
        )
        {
            float intensity = 0
        }

        over "light_57AEC62D204FA103" (
            references = @./SubUSDs/light_57AEC62D204FA103.usd@</light_57AEC62D204FA103>
        )
        {
            float intensity = 0
        }

        over "light_96AA21D9981644B3" (
            references = @./SubUSDs/light_96AA21D9981644B3.usd@</light_96AA21D9981644B3>
        )
        {
            float intensity = 0
        }

        over "light_951162BB20192D10" (
            references = @./SubUSDs/light_951162BB20192D10.usd@</light_951162BB20192D10>
        )
        {
            float intensity = 0
        }

        over "light_056B6A176E503883" (
            references = @./SubUSDs/light_056B6A176E503883.usd@</light_056B6A176E503883>
        )
        {
            float intensity = 0
        }

        over "light_8AF70E69621796E7" (
            references = @./SubUSDs/light_8AF70E69621796E7.usd@</light_8AF70E69621796E7>
        )
        {
            float intensity = 0
        }

        over "light_6E26C9D60FA81073" (
            references = @./SubUSDs/light_6E26C9D60FA81073.usd@</light_6E26C9D60FA81073>
        )
        {
            float intensity = 0
        }

        over "light_BE186E192F40CD38" (
            references = @./SubUSDs/light_BE186E192F40CD38.usd@</light_BE186E192F40CD38>
        )
        {
            float intensity = 0
        }

        over "light_302F227CAE1D55FB" (
            references = @./SubUSDs/light_302F227CAE1D55FB.usd@</light_302F227CAE1D55FB>
        )
        {
            float intensity = 0
        }

        over "light_96967123457B0A54" (
            references = @./SubUSDs/light_96967123457B0A54.usd@</light_96967123457B0A54>
        )
        {
            float intensity = 0
        }

        over "light_E518109CEA5DA0FC" (
            references = @./SubUSDs/light_E518109CEA5DA0FC.usd@</light_E518109CEA5DA0FC>
        )
        {
            float intensity = 0
        }

        over "light_215A6400FA80B858" (
            references = @./SubUSDs/light_215A6400FA80B858.usd@</light_215A6400FA80B858>
        )
        {
            float intensity = 0
        }

        over "light_FDEBB4AC54C17AFC" (
            references = @./SubUSDs/light_FDEBB4AC54C17AFC.usd@</light_FDEBB4AC54C17AFC>
        )
        {
            float intensity = 0
        }

        over "light_925D78BCD75D62F1" (
            references = @./SubUSDs/light_925D78BCD75D62F1.usd@</light_925D78BCD75D62F1>
        )
        {
            float intensity = 0
        }

        over "light_01C67629880A66A4" (
            references = @./SubUSDs/light_01C67629880A66A4.usd@</light_01C67629880A66A4>
        )
        {
            float intensity = 0
        }

        over "light_81BD01AE1AA0C279" (
            references = @./SubUSDs/light_81BD01AE1AA0C279.usd@</light_81BD01AE1AA0C279>
        )
        {
            float intensity = 0
        }

        over "light_E02808E36BEC212E" (
            references = @./SubUSDs/light_E02808E36BEC212E.usd@</light_E02808E36BEC212E>
        )
        {
            float intensity = 0
        }

        over "light_C534118D3F5EDCA1" (
            references = @./SubUSDs/light_C534118D3F5EDCA1.usd@</light_C534118D3F5EDCA1>
        )
        {
            float intensity = 0
        }

        over "light_DE2FF22649501AA6" (
            references = @./SubUSDs/light_DE2FF22649501AA6.usd@</light_DE2FF22649501AA6>
        )
        {
            float intensity = 0
        }

        over "light_9FFDEA095ED199D2" (
            references = @./SubUSDs/light_9FFDEA095ED199D2.usd@</light_9FFDEA095ED199D2>
        )
        {
            float intensity = 0
        }

        over "light_E8DB0FED55FAA3D6" (
            references = @./SubUSDs/light_E8DB0FED55FAA3D6.usd@</light_E8DB0FED55FAA3D6>
        )
        {
            float intensity = 0
        }

        over "light_4811E74B9F8F591F" (
            references = @./SubUSDs/light_4811E74B9F8F591F.usd@</light_4811E74B9F8F591F>
        )
        {
            float intensity = 0
        }

        over "light_B4C24078EA26E648" (
            references = @./SubUSDs/light_B4C24078EA26E648.usd@</light_B4C24078EA26E648>
        )
        {
            float intensity = 0
        }

        over "light_13F8ABB2127CE1E9" (
            references = @./SubUSDs/light_13F8ABB2127CE1E9.usd@</light_13F8ABB2127CE1E9>
        )
        {
            float intensity = 0
        }

        over "light_6B8969B24F7ECDB7" (
            references = @./SubUSDs/light_6B8969B24F7ECDB7.usd@</light_6B8969B24F7ECDB7>
        )
        {
            float intensity = 0
        }

        over "light_69B565AD22E1C406" (
            references = @./SubUSDs/light_69B565AD22E1C406.usd@</light_69B565AD22E1C406>
        )
        {
            float intensity = 0
        }

        over "light_175F12AFF849D100" (
            references = @./SubUSDs/light_175F12AFF849D100.usd@</light_175F12AFF849D100>
        )
        {
            float intensity = 0
        }

        over "light_5D35C66E4BCDA364" (
            references = @./SubUSDs/light_5D35C66E4BCDA364.usd@</light_5D35C66E4BCDA364>
        )
        {
            float intensity = 0
        }

        over "light_D537DD9C6C529377" (
            references = @./SubUSDs/light_D537DD9C6C529377.usd@</light_D537DD9C6C529377>
        )
        {
            float intensity = 0
        }

        over "light_7C25EA48FA7EF55B" (
            references = @./SubUSDs/light_7C25EA48FA7EF55B.usd@</light_7C25EA48FA7EF55B>
        )
        {
            float intensity = 0
        }

        over "light_6DF7C9F7299F8464" (
            references = @./SubUSDs/light_6DF7C9F7299F8464.usd@</light_6DF7C9F7299F8464>
        )
        {
            float intensity = 0
        }

        over "light_4EF9AD024796926B" (
            references = @./SubUSDs/light_4EF9AD024796926B.usd@</light_4EF9AD024796926B>
        )
        {
            float intensity = 0
        }

        over "light_99056175215858EF" (
            references = @./SubUSDs/light_99056175215858EF.usd@</light_99056175215858EF>
        )
        {
            float intensity = 0
        }

        over "light_B8CF30BA4787E302" (
            references = @./SubUSDs/light_B8CF30BA4787E302.usd@</light_B8CF30BA4787E302>
        )
        {
            float intensity = 0
        }

        over "light_A79358FAE13DD65E" (
            references = @./SubUSDs/light_A79358FAE13DD65E.usd@</light_A79358FAE13DD65E>
        )
        {
            float intensity = 0
        }

        over "light_D97F84B721019FB2" (
            references = @./SubUSDs/light_D97F84B721019FB2.usd@</light_D97F84B721019FB2>
        )
        {
            float intensity = 0
        }

        over "light_CB3AEBFB85DECA7A" (
            references = @./SubUSDs/light_CB3AEBFB85DECA7A.usd@</light_CB3AEBFB85DECA7A>
        )
        {
            float intensity = 0
        }

        over "light_B5296A19DE01DFD1" (
            references = @./SubUSDs/light_B5296A19DE01DFD1.usd@</light_B5296A19DE01DFD1>
        )
        {
        }

        over "light_D5543A1B9706CB89" (
            references = @./SubUSDs/light_D5543A1B9706CB89.usd@</light_D5543A1B9706CB89>
        )
        {
            token visibility = "inherited"
        }

        over "light_31C78AC63FC0BEF3" (
            references = @./SubUSDs/light_31C78AC63FC0BEF3.usd@</light_31C78AC63FC0BEF3>
        )
        {
            token visibility = "inherited"
        }

        over "light_26EBCFB89EC66F21" (
            references = @./SubUSDs/light_26EBCFB89EC66F21.usd@</light_26EBCFB89EC66F21>
        )
        {
            token visibility = "inherited"
        }

        over "light_37E182874B0F7327" (
            references = @./SubUSDs/light_37E182874B0F7327.usd@</light_37E182874B0F7327>
        )
        {
            token visibility = "inherited"
        }

        over "light_62471F094065B207" (
            references = @./SubUSDs/light_62471F094065B207.usd@</light_62471F094065B207>
        )
        {
            token visibility = "inherited"
        }

        over "light_A314C476BA43AE4E" (
            references = @./SubUSDs/light_A314C476BA43AE4E.usd@</light_A314C476BA43AE4E>
        )
        {
            token visibility = "inherited"
        }

        over "light_56524DD5A4910C19" (
            references = @./SubUSDs/light_56524DD5A4910C19.usd@</light_56524DD5A4910C19>
        )
        {
            token visibility = "inherited"
        }

        over "light_B9FD44FDB1A21ED7" (
            references = @./SubUSDs/light_B9FD44FDB1A21ED7.usd@</light_B9FD44FDB1A21ED7>
        )
        {
            token visibility = "inherited"
        }

        over "light_8CF5B7EB309A241C" (
            references = @./SubUSDs/light_8CF5B7EB309A241C.usd@</light_8CF5B7EB309A241C>
        )
        {
            token visibility = "inherited"
        }

        over "light_EE0CD886C5AADD89" (
            references = @./SubUSDs/light_EE0CD886C5AADD89.usd@</light_EE0CD886C5AADD89>
        )
        {
            token visibility = "inherited"
        }

        over "light_35FB85E1D6B3F513" (
            references = @./SubUSDs/light_35FB85E1D6B3F513.usd@</light_35FB85E1D6B3F513>
        )
        {
            token visibility = "inherited"
        }

        over "light_4A8BAF64D2257AFD" (
            references = @./SubUSDs/light_4A8BAF64D2257AFD.usd@</light_4A8BAF64D2257AFD>
        )
        {
            token visibility = "inherited"
        }

        over "light_31B2EA338D63CEC4" (
            references = @./SubUSDs/light_31B2EA338D63CEC4.usd@</light_31B2EA338D63CEC4>
        )
        {
            token visibility = "inherited"

            def RectLight "incin_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                color3f color = (1, 0.20849419, 0)
                float height = 70
                float intensity = 5000
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                float width = 70
                double3 xformOp:rotateXYZ = (0, 192.10402032542402, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-24.15698639051402, -15.21476299647452, -275.2518677362457)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "light_C9A351B3E6F8060A" (
            references = @./SubUSDs/light_C9A351B3E6F8060A.usd@</light_C9A351B3E6F8060A>
        )
        {
            token visibility = "inherited"
        }

        over "light_4D55F3B7C1436908" (
            references = @./SubUSDs/light_4D55F3B7C1436908.usd@</light_4D55F3B7C1436908>
        )
        {
            token visibility = "inherited"
        }

        over "light_749152CFB7BF6149" (
            references = @./SubUSDs/light_749152CFB7BF6149.usd@</light_749152CFB7BF6149>
        )
        {
            token visibility = "inherited"
        }

        over "light_C679804A97A5F0C1" (
            references = @./SubUSDs/light_C679804A97A5F0C1.usd@</light_C679804A97A5F0C1>
        )
        {
            token visibility = "inherited"
        }

        over "light_678EF9AC53FB7EAF" (
            references = @./SubUSDs/light_678EF9AC53FB7EAF.usd@</light_678EF9AC53FB7EAF>
        )
        {
            token visibility = "inherited"
        }

        over "light_BA9CA2891310864D" (
            references = @./SubUSDs/light_BA9CA2891310864D.usd@</light_BA9CA2891310864D>
        )
        {
            token visibility = "inherited"
        }

        over "light_DFA1A11CE0EA1E91" (
            references = @./SubUSDs/light_DFA1A11CE0EA1E91.usd@</light_DFA1A11CE0EA1E91>
        )
        {
            token visibility = "inherited"
        }

        over "light_D569C681066C1653" (
            references = @./SubUSDs/light_D569C681066C1653.usd@</light_D569C681066C1653>
        )
        {
            token visibility = "inherited"
        }

        over "light_0298F8DE5F2F1FE8" (
            references = @./SubUSDs/light_0298F8DE5F2F1FE8.usd@</light_0298F8DE5F2F1FE8>
        )
        {
            token visibility = "inherited"
        }

        over "light_57E96DF293D76167" (
            references = @./SubUSDs/light_57E96DF293D76167.usd@</light_57E96DF293D76167>
        )
        {
            token visibility = "inherited"
        }

        over "light_A80993AA4012EE1D" (
            references = @./SubUSDs/light_A80993AA4012EE1D.usd@</light_A80993AA4012EE1D>
        )
        {
            token visibility = "inherited"
        }

        over "light_390EDF9505E9657E" (
            references = @./SubUSDs/light_390EDF9505E9657E.usd@</light_390EDF9505E9657E>
        )
        {
            token visibility = "inherited"
        }

        over "light_2098A0005C58E7F8" (
            references = @./SubUSDs/light_2098A0005C58E7F8.usd@</light_2098A0005C58E7F8>
        )
        {
            token visibility = "inherited"
        }

        over "light_C85C075EB78E5982" (
            references = @./SubUSDs/light_C85C075EB78E5982.usd@</light_C85C075EB78E5982>
        )
        {
            token visibility = "inherited"
        }

        over "light_7210F24509A54CD6" (
            references = @./SubUSDs/light_7210F24509A54CD6.usd@</light_7210F24509A54CD6>
        )
        {
            token visibility = "inherited"
        }

        over "light_7ECF5D822C02BE1D" (
            references = @./SubUSDs/light_7ECF5D822C02BE1D.usd@</light_7ECF5D822C02BE1D>
        )
        {
            token visibility = "inherited"
        }

        over "light_70D0EC97F0A98C86" (
            references = @./SubUSDs/light_70D0EC97F0A98C86.usd@</light_70D0EC97F0A98C86>
        )
        {
            token visibility = "inherited"
        }

        over "light_A664392A15E2FDBE" (
            references = @./SubUSDs/light_A664392A15E2FDBE.usd@</light_A664392A15E2FDBE>
        )
        {
            float intensity = 80000
            float3 xformOp:rotateZYX = (-0.0000016296099, 20.499998, 2.9468143e-7)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (4478.999999999999, 640.0000000000002, 712.9999999999994)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }
    }
}

